
Embedded_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000266a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000138  00800060  0000266a  000026fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005b  00800198  00800198  00002836  2**0
                  ALLOC
  3 .stab         00005178  00000000  00000000  00002838  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002811  00000000  00000000  000079b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000a1c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d8  00000000  00000000  0000a341  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002114  00000000  00000000  0000a519  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000121a  00000000  00000000  0000c62d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001165  00000000  00000000  0000d847  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000e9ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f7  00000000  00000000  0000eb4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009a2  00000000  00000000  0000ee43  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f7e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3f       	cpi	r26, 0xF3	; 243
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 15 07 	call	0xe2a	; 0xe2a <main>
      8a:	0c 94 33 13 	jmp	0x2666	; 0x2666 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fc 12 	jmp	0x25f8	; 0x25f8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e8       	ldi	r26, 0x8E	; 142
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fc 12 	jmp	0x25f8	; 0x25f8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e8       	ldi	r24, 0x8E	; 142
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e8       	ldi	r22, 0x8E	; 142
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 bc 06 	call	0xd78	; 0xd78 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__epilogue_restores__+0x18>

000007ea <__floatsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 05 13 	jmp	0x260a	; 0x260a <__prologue_saves__+0x12>
     7f6:	9b 01       	movw	r18, r22
     7f8:	ac 01       	movw	r20, r24
     7fa:	83 e0       	ldi	r24, 0x03	; 3
     7fc:	89 83       	std	Y+1, r24	; 0x01
     7fe:	da 01       	movw	r26, r20
     800:	c9 01       	movw	r24, r18
     802:	88 27       	eor	r24, r24
     804:	b7 fd       	sbrc	r27, 7
     806:	83 95       	inc	r24
     808:	99 27       	eor	r25, r25
     80a:	aa 27       	eor	r26, r26
     80c:	bb 27       	eor	r27, r27
     80e:	b8 2e       	mov	r11, r24
     810:	21 15       	cp	r18, r1
     812:	31 05       	cpc	r19, r1
     814:	41 05       	cpc	r20, r1
     816:	51 05       	cpc	r21, r1
     818:	19 f4       	brne	.+6      	; 0x820 <__floatsisf+0x36>
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	3a c0       	rjmp	.+116    	; 0x894 <__stack+0x35>
     820:	88 23       	and	r24, r24
     822:	a9 f0       	breq	.+42     	; 0x84e <__floatsisf+0x64>
     824:	20 30       	cpi	r18, 0x00	; 0
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	38 07       	cpc	r19, r24
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	48 07       	cpc	r20, r24
     82e:	80 e8       	ldi	r24, 0x80	; 128
     830:	58 07       	cpc	r21, r24
     832:	29 f4       	brne	.+10     	; 0x83e <__floatsisf+0x54>
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	9f ec       	ldi	r25, 0xCF	; 207
     83c:	30 c0       	rjmp	.+96     	; 0x89e <__stack+0x3f>
     83e:	ee 24       	eor	r14, r14
     840:	ff 24       	eor	r15, r15
     842:	87 01       	movw	r16, r14
     844:	e2 1a       	sub	r14, r18
     846:	f3 0a       	sbc	r15, r19
     848:	04 0b       	sbc	r16, r20
     84a:	15 0b       	sbc	r17, r21
     84c:	02 c0       	rjmp	.+4      	; 0x852 <__floatsisf+0x68>
     84e:	79 01       	movw	r14, r18
     850:	8a 01       	movw	r16, r20
     852:	8e e1       	ldi	r24, 0x1E	; 30
     854:	c8 2e       	mov	r12, r24
     856:	d1 2c       	mov	r13, r1
     858:	dc 82       	std	Y+4, r13	; 0x04
     85a:	cb 82       	std	Y+3, r12	; 0x03
     85c:	ed 82       	std	Y+5, r14	; 0x05
     85e:	fe 82       	std	Y+6, r15	; 0x06
     860:	0f 83       	std	Y+7, r16	; 0x07
     862:	18 87       	std	Y+8, r17	; 0x08
     864:	c8 01       	movw	r24, r16
     866:	b7 01       	movw	r22, r14
     868:	0e 94 20 05 	call	0xa40	; 0xa40 <__clzsi2>
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	18 16       	cp	r1, r24
     870:	19 06       	cpc	r1, r25
     872:	84 f4       	brge	.+32     	; 0x894 <__stack+0x35>
     874:	08 2e       	mov	r0, r24
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	ee 0c       	add	r14, r14
     87a:	ff 1c       	adc	r15, r15
     87c:	00 1f       	adc	r16, r16
     87e:	11 1f       	adc	r17, r17
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	ed 82       	std	Y+5, r14	; 0x05
     886:	fe 82       	std	Y+6, r15	; 0x06
     888:	0f 83       	std	Y+7, r16	; 0x07
     88a:	18 87       	std	Y+8, r17	; 0x08
     88c:	c8 1a       	sub	r12, r24
     88e:	d9 0a       	sbc	r13, r25
     890:	dc 82       	std	Y+4, r13	; 0x04
     892:	cb 82       	std	Y+3, r12	; 0x03
     894:	ba 82       	std	Y+2, r11	; 0x02
     896:	ce 01       	movw	r24, r28
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     89e:	28 96       	adiw	r28, 0x08	; 8
     8a0:	e9 e0       	ldi	r30, 0x09	; 9
     8a2:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__epilogue_restores__+0x12>

000008a6 <__fixsfsi>:
     8a6:	ac e0       	ldi	r26, 0x0C	; 12
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	e9 e5       	ldi	r30, 0x59	; 89
     8ac:	f4 e0       	ldi	r31, 0x04	; 4
     8ae:	0c 94 0c 13 	jmp	0x2618	; 0x2618 <__prologue_saves__+0x20>
     8b2:	69 83       	std	Y+1, r22	; 0x01
     8b4:	7a 83       	std	Y+2, r23	; 0x02
     8b6:	8b 83       	std	Y+3, r24	; 0x03
     8b8:	9c 83       	std	Y+4, r25	; 0x04
     8ba:	ce 01       	movw	r24, r28
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	be 01       	movw	r22, r28
     8c0:	6b 5f       	subi	r22, 0xFB	; 251
     8c2:	7f 4f       	sbci	r23, 0xFF	; 255
     8c4:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     8c8:	8d 81       	ldd	r24, Y+5	; 0x05
     8ca:	82 30       	cpi	r24, 0x02	; 2
     8cc:	61 f1       	breq	.+88     	; 0x926 <__fixsfsi+0x80>
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	50 f1       	brcs	.+84     	; 0x926 <__fixsfsi+0x80>
     8d2:	84 30       	cpi	r24, 0x04	; 4
     8d4:	21 f4       	brne	.+8      	; 0x8de <__fixsfsi+0x38>
     8d6:	8e 81       	ldd	r24, Y+6	; 0x06
     8d8:	88 23       	and	r24, r24
     8da:	51 f1       	breq	.+84     	; 0x930 <__fixsfsi+0x8a>
     8dc:	2e c0       	rjmp	.+92     	; 0x93a <__fixsfsi+0x94>
     8de:	2f 81       	ldd	r18, Y+7	; 0x07
     8e0:	38 85       	ldd	r19, Y+8	; 0x08
     8e2:	37 fd       	sbrc	r19, 7
     8e4:	20 c0       	rjmp	.+64     	; 0x926 <__fixsfsi+0x80>
     8e6:	6e 81       	ldd	r22, Y+6	; 0x06
     8e8:	2f 31       	cpi	r18, 0x1F	; 31
     8ea:	31 05       	cpc	r19, r1
     8ec:	1c f0       	brlt	.+6      	; 0x8f4 <__fixsfsi+0x4e>
     8ee:	66 23       	and	r22, r22
     8f0:	f9 f0       	breq	.+62     	; 0x930 <__fixsfsi+0x8a>
     8f2:	23 c0       	rjmp	.+70     	; 0x93a <__fixsfsi+0x94>
     8f4:	8e e1       	ldi	r24, 0x1E	; 30
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	82 1b       	sub	r24, r18
     8fa:	93 0b       	sbc	r25, r19
     8fc:	29 85       	ldd	r18, Y+9	; 0x09
     8fe:	3a 85       	ldd	r19, Y+10	; 0x0a
     900:	4b 85       	ldd	r20, Y+11	; 0x0b
     902:	5c 85       	ldd	r21, Y+12	; 0x0c
     904:	04 c0       	rjmp	.+8      	; 0x90e <__fixsfsi+0x68>
     906:	56 95       	lsr	r21
     908:	47 95       	ror	r20
     90a:	37 95       	ror	r19
     90c:	27 95       	ror	r18
     90e:	8a 95       	dec	r24
     910:	d2 f7       	brpl	.-12     	; 0x906 <__fixsfsi+0x60>
     912:	66 23       	and	r22, r22
     914:	b1 f0       	breq	.+44     	; 0x942 <__fixsfsi+0x9c>
     916:	50 95       	com	r21
     918:	40 95       	com	r20
     91a:	30 95       	com	r19
     91c:	21 95       	neg	r18
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	4f 4f       	sbci	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	0e c0       	rjmp	.+28     	; 0x942 <__fixsfsi+0x9c>
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	09 c0       	rjmp	.+18     	; 0x942 <__fixsfsi+0x9c>
     930:	2f ef       	ldi	r18, 0xFF	; 255
     932:	3f ef       	ldi	r19, 0xFF	; 255
     934:	4f ef       	ldi	r20, 0xFF	; 255
     936:	5f e7       	ldi	r21, 0x7F	; 127
     938:	04 c0       	rjmp	.+8      	; 0x942 <__fixsfsi+0x9c>
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e8       	ldi	r21, 0x80	; 128
     942:	b9 01       	movw	r22, r18
     944:	ca 01       	movw	r24, r20
     946:	2c 96       	adiw	r28, 0x0c	; 12
     948:	e2 e0       	ldi	r30, 0x02	; 2
     94a:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__epilogue_restores__+0x20>

0000094e <__floatunsisf>:
     94e:	a8 e0       	ldi	r26, 0x08	; 8
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	ed ea       	ldi	r30, 0xAD	; 173
     954:	f4 e0       	ldi	r31, 0x04	; 4
     956:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__prologue_saves__+0x10>
     95a:	7b 01       	movw	r14, r22
     95c:	8c 01       	movw	r16, r24
     95e:	61 15       	cp	r22, r1
     960:	71 05       	cpc	r23, r1
     962:	81 05       	cpc	r24, r1
     964:	91 05       	cpc	r25, r1
     966:	19 f4       	brne	.+6      	; 0x96e <__floatunsisf+0x20>
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	89 83       	std	Y+1, r24	; 0x01
     96c:	60 c0       	rjmp	.+192    	; 0xa2e <__floatunsisf+0xe0>
     96e:	83 e0       	ldi	r24, 0x03	; 3
     970:	89 83       	std	Y+1, r24	; 0x01
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 20 05 	call	0xa40	; 0xa40 <__clzsi2>
     98c:	fc 01       	movw	r30, r24
     98e:	31 97       	sbiw	r30, 0x01	; 1
     990:	f7 ff       	sbrs	r31, 7
     992:	3b c0       	rjmp	.+118    	; 0xa0a <__floatunsisf+0xbc>
     994:	22 27       	eor	r18, r18
     996:	33 27       	eor	r19, r19
     998:	2e 1b       	sub	r18, r30
     99a:	3f 0b       	sbc	r19, r31
     99c:	57 01       	movw	r10, r14
     99e:	68 01       	movw	r12, r16
     9a0:	02 2e       	mov	r0, r18
     9a2:	04 c0       	rjmp	.+8      	; 0x9ac <__floatunsisf+0x5e>
     9a4:	d6 94       	lsr	r13
     9a6:	c7 94       	ror	r12
     9a8:	b7 94       	ror	r11
     9aa:	a7 94       	ror	r10
     9ac:	0a 94       	dec	r0
     9ae:	d2 f7       	brpl	.-12     	; 0x9a4 <__floatunsisf+0x56>
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	50 e0       	ldi	r21, 0x00	; 0
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	a0 e0       	ldi	r26, 0x00	; 0
     9be:	b0 e0       	ldi	r27, 0x00	; 0
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__floatunsisf+0x7c>
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	aa 1f       	adc	r26, r26
     9c8:	bb 1f       	adc	r27, r27
     9ca:	2a 95       	dec	r18
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__floatunsisf+0x74>
     9ce:	01 97       	sbiw	r24, 0x01	; 1
     9d0:	a1 09       	sbc	r26, r1
     9d2:	b1 09       	sbc	r27, r1
     9d4:	8e 21       	and	r24, r14
     9d6:	9f 21       	and	r25, r15
     9d8:	a0 23       	and	r26, r16
     9da:	b1 23       	and	r27, r17
     9dc:	00 97       	sbiw	r24, 0x00	; 0
     9de:	a1 05       	cpc	r26, r1
     9e0:	b1 05       	cpc	r27, r1
     9e2:	21 f0       	breq	.+8      	; 0x9ec <__floatunsisf+0x9e>
     9e4:	41 e0       	ldi	r20, 0x01	; 1
     9e6:	50 e0       	ldi	r21, 0x00	; 0
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	4a 29       	or	r20, r10
     9ee:	5b 29       	or	r21, r11
     9f0:	6c 29       	or	r22, r12
     9f2:	7d 29       	or	r23, r13
     9f4:	4d 83       	std	Y+5, r20	; 0x05
     9f6:	5e 83       	std	Y+6, r21	; 0x06
     9f8:	6f 83       	std	Y+7, r22	; 0x07
     9fa:	78 87       	std	Y+8, r23	; 0x08
     9fc:	8e e1       	ldi	r24, 0x1E	; 30
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	8e 1b       	sub	r24, r30
     a02:	9f 0b       	sbc	r25, r31
     a04:	9c 83       	std	Y+4, r25	; 0x04
     a06:	8b 83       	std	Y+3, r24	; 0x03
     a08:	12 c0       	rjmp	.+36     	; 0xa2e <__floatunsisf+0xe0>
     a0a:	30 97       	sbiw	r30, 0x00	; 0
     a0c:	81 f0       	breq	.+32     	; 0xa2e <__floatunsisf+0xe0>
     a0e:	0e 2e       	mov	r0, r30
     a10:	04 c0       	rjmp	.+8      	; 0xa1a <__floatunsisf+0xcc>
     a12:	ee 0c       	add	r14, r14
     a14:	ff 1c       	adc	r15, r15
     a16:	00 1f       	adc	r16, r16
     a18:	11 1f       	adc	r17, r17
     a1a:	0a 94       	dec	r0
     a1c:	d2 f7       	brpl	.-12     	; 0xa12 <__floatunsisf+0xc4>
     a1e:	ed 82       	std	Y+5, r14	; 0x05
     a20:	fe 82       	std	Y+6, r15	; 0x06
     a22:	0f 83       	std	Y+7, r16	; 0x07
     a24:	18 87       	std	Y+8, r17	; 0x08
     a26:	ce 1a       	sub	r12, r30
     a28:	df 0a       	sbc	r13, r31
     a2a:	dc 82       	std	Y+4, r13	; 0x04
     a2c:	cb 82       	std	Y+3, r12	; 0x03
     a2e:	1a 82       	std	Y+2, r1	; 0x02
     a30:	ce 01       	movw	r24, r28
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     a38:	28 96       	adiw	r28, 0x08	; 8
     a3a:	ea e0       	ldi	r30, 0x0A	; 10
     a3c:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__epilogue_restores__+0x10>

00000a40 <__clzsi2>:
     a40:	ef 92       	push	r14
     a42:	ff 92       	push	r15
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	7b 01       	movw	r14, r22
     a4a:	8c 01       	movw	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	e8 16       	cp	r14, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	f8 06       	cpc	r15, r24
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	08 07       	cpc	r16, r24
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	18 07       	cpc	r17, r24
     a5c:	88 f4       	brcc	.+34     	; 0xa80 <__clzsi2+0x40>
     a5e:	8f ef       	ldi	r24, 0xFF	; 255
     a60:	e8 16       	cp	r14, r24
     a62:	f1 04       	cpc	r15, r1
     a64:	01 05       	cpc	r16, r1
     a66:	11 05       	cpc	r17, r1
     a68:	31 f0       	breq	.+12     	; 0xa76 <__clzsi2+0x36>
     a6a:	28 f0       	brcs	.+10     	; 0xa76 <__clzsi2+0x36>
     a6c:	88 e0       	ldi	r24, 0x08	; 8
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	a0 e0       	ldi	r26, 0x00	; 0
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	17 c0       	rjmp	.+46     	; 0xaa4 <__clzsi2+0x64>
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	12 c0       	rjmp	.+36     	; 0xaa4 <__clzsi2+0x64>
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	e8 16       	cp	r14, r24
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	f8 06       	cpc	r15, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	08 07       	cpc	r16, r24
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	18 07       	cpc	r17, r24
     a90:	28 f0       	brcs	.+10     	; 0xa9c <__clzsi2+0x5c>
     a92:	88 e1       	ldi	r24, 0x18	; 24
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	a0 e0       	ldi	r26, 0x00	; 0
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <__clzsi2+0x64>
     a9c:	80 e1       	ldi	r24, 0x10	; 16
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	a0 e0       	ldi	r26, 0x00	; 0
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	20 e2       	ldi	r18, 0x20	; 32
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	28 1b       	sub	r18, r24
     aae:	39 0b       	sbc	r19, r25
     ab0:	4a 0b       	sbc	r20, r26
     ab2:	5b 0b       	sbc	r21, r27
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__clzsi2+0x7e>
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__clzsi2+0x76>
     ac2:	f7 01       	movw	r30, r14
     ac4:	ea 56       	subi	r30, 0x6A	; 106
     ac6:	ff 4f       	sbci	r31, 0xFF	; 255
     ac8:	80 81       	ld	r24, Z
     aca:	28 1b       	sub	r18, r24
     acc:	31 09       	sbc	r19, r1
     ace:	41 09       	sbc	r20, r1
     ad0:	51 09       	sbc	r21, r1
     ad2:	c9 01       	movw	r24, r18
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
     adc:	08 95       	ret

00000ade <__pack_f>:
     ade:	df 92       	push	r13
     ae0:	ef 92       	push	r14
     ae2:	ff 92       	push	r15
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
     ae8:	fc 01       	movw	r30, r24
     aea:	e4 80       	ldd	r14, Z+4	; 0x04
     aec:	f5 80       	ldd	r15, Z+5	; 0x05
     aee:	06 81       	ldd	r16, Z+6	; 0x06
     af0:	17 81       	ldd	r17, Z+7	; 0x07
     af2:	d1 80       	ldd	r13, Z+1	; 0x01
     af4:	80 81       	ld	r24, Z
     af6:	82 30       	cpi	r24, 0x02	; 2
     af8:	48 f4       	brcc	.+18     	; 0xb0c <__pack_f+0x2e>
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	a0 e1       	ldi	r26, 0x10	; 16
     b00:	b0 e0       	ldi	r27, 0x00	; 0
     b02:	e8 2a       	or	r14, r24
     b04:	f9 2a       	or	r15, r25
     b06:	0a 2b       	or	r16, r26
     b08:	1b 2b       	or	r17, r27
     b0a:	a5 c0       	rjmp	.+330    	; 0xc56 <__pack_f+0x178>
     b0c:	84 30       	cpi	r24, 0x04	; 4
     b0e:	09 f4       	brne	.+2      	; 0xb12 <__pack_f+0x34>
     b10:	9f c0       	rjmp	.+318    	; 0xc50 <__pack_f+0x172>
     b12:	82 30       	cpi	r24, 0x02	; 2
     b14:	21 f4       	brne	.+8      	; 0xb1e <__pack_f+0x40>
     b16:	ee 24       	eor	r14, r14
     b18:	ff 24       	eor	r15, r15
     b1a:	87 01       	movw	r16, r14
     b1c:	05 c0       	rjmp	.+10     	; 0xb28 <__pack_f+0x4a>
     b1e:	e1 14       	cp	r14, r1
     b20:	f1 04       	cpc	r15, r1
     b22:	01 05       	cpc	r16, r1
     b24:	11 05       	cpc	r17, r1
     b26:	19 f4       	brne	.+6      	; 0xb2e <__pack_f+0x50>
     b28:	e0 e0       	ldi	r30, 0x00	; 0
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	96 c0       	rjmp	.+300    	; 0xc5a <__pack_f+0x17c>
     b2e:	62 81       	ldd	r22, Z+2	; 0x02
     b30:	73 81       	ldd	r23, Z+3	; 0x03
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	62 38       	cpi	r22, 0x82	; 130
     b36:	79 07       	cpc	r23, r25
     b38:	0c f0       	brlt	.+2      	; 0xb3c <__pack_f+0x5e>
     b3a:	5b c0       	rjmp	.+182    	; 0xbf2 <__pack_f+0x114>
     b3c:	22 e8       	ldi	r18, 0x82	; 130
     b3e:	3f ef       	ldi	r19, 0xFF	; 255
     b40:	26 1b       	sub	r18, r22
     b42:	37 0b       	sbc	r19, r23
     b44:	2a 31       	cpi	r18, 0x1A	; 26
     b46:	31 05       	cpc	r19, r1
     b48:	2c f0       	brlt	.+10     	; 0xb54 <__pack_f+0x76>
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	2a c0       	rjmp	.+84     	; 0xba8 <__pack_f+0xca>
     b54:	b8 01       	movw	r22, r16
     b56:	a7 01       	movw	r20, r14
     b58:	02 2e       	mov	r0, r18
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__pack_f+0x86>
     b5c:	76 95       	lsr	r23
     b5e:	67 95       	ror	r22
     b60:	57 95       	ror	r21
     b62:	47 95       	ror	r20
     b64:	0a 94       	dec	r0
     b66:	d2 f7       	brpl	.-12     	; 0xb5c <__pack_f+0x7e>
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	a0 e0       	ldi	r26, 0x00	; 0
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	04 c0       	rjmp	.+8      	; 0xb7a <__pack_f+0x9c>
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	aa 1f       	adc	r26, r26
     b78:	bb 1f       	adc	r27, r27
     b7a:	2a 95       	dec	r18
     b7c:	d2 f7       	brpl	.-12     	; 0xb72 <__pack_f+0x94>
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	a1 09       	sbc	r26, r1
     b82:	b1 09       	sbc	r27, r1
     b84:	8e 21       	and	r24, r14
     b86:	9f 21       	and	r25, r15
     b88:	a0 23       	and	r26, r16
     b8a:	b1 23       	and	r27, r17
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	a1 05       	cpc	r26, r1
     b90:	b1 05       	cpc	r27, r1
     b92:	21 f0       	breq	.+8      	; 0xb9c <__pack_f+0xbe>
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	9a 01       	movw	r18, r20
     b9e:	ab 01       	movw	r20, r22
     ba0:	28 2b       	or	r18, r24
     ba2:	39 2b       	or	r19, r25
     ba4:	4a 2b       	or	r20, r26
     ba6:	5b 2b       	or	r21, r27
     ba8:	da 01       	movw	r26, r20
     baa:	c9 01       	movw	r24, r18
     bac:	8f 77       	andi	r24, 0x7F	; 127
     bae:	90 70       	andi	r25, 0x00	; 0
     bb0:	a0 70       	andi	r26, 0x00	; 0
     bb2:	b0 70       	andi	r27, 0x00	; 0
     bb4:	80 34       	cpi	r24, 0x40	; 64
     bb6:	91 05       	cpc	r25, r1
     bb8:	a1 05       	cpc	r26, r1
     bba:	b1 05       	cpc	r27, r1
     bbc:	39 f4       	brne	.+14     	; 0xbcc <__pack_f+0xee>
     bbe:	27 ff       	sbrs	r18, 7
     bc0:	09 c0       	rjmp	.+18     	; 0xbd4 <__pack_f+0xf6>
     bc2:	20 5c       	subi	r18, 0xC0	; 192
     bc4:	3f 4f       	sbci	r19, 0xFF	; 255
     bc6:	4f 4f       	sbci	r20, 0xFF	; 255
     bc8:	5f 4f       	sbci	r21, 0xFF	; 255
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <__pack_f+0xf6>
     bcc:	21 5c       	subi	r18, 0xC1	; 193
     bce:	3f 4f       	sbci	r19, 0xFF	; 255
     bd0:	4f 4f       	sbci	r20, 0xFF	; 255
     bd2:	5f 4f       	sbci	r21, 0xFF	; 255
     bd4:	e0 e0       	ldi	r30, 0x00	; 0
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	20 30       	cpi	r18, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	3a 07       	cpc	r19, r26
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	4a 07       	cpc	r20, r26
     be2:	a0 e4       	ldi	r26, 0x40	; 64
     be4:	5a 07       	cpc	r21, r26
     be6:	10 f0       	brcs	.+4      	; 0xbec <__pack_f+0x10e>
     be8:	e1 e0       	ldi	r30, 0x01	; 1
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	79 01       	movw	r14, r18
     bee:	8a 01       	movw	r16, r20
     bf0:	27 c0       	rjmp	.+78     	; 0xc40 <__pack_f+0x162>
     bf2:	60 38       	cpi	r22, 0x80	; 128
     bf4:	71 05       	cpc	r23, r1
     bf6:	64 f5       	brge	.+88     	; 0xc50 <__pack_f+0x172>
     bf8:	fb 01       	movw	r30, r22
     bfa:	e1 58       	subi	r30, 0x81	; 129
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	d8 01       	movw	r26, r16
     c00:	c7 01       	movw	r24, r14
     c02:	8f 77       	andi	r24, 0x7F	; 127
     c04:	90 70       	andi	r25, 0x00	; 0
     c06:	a0 70       	andi	r26, 0x00	; 0
     c08:	b0 70       	andi	r27, 0x00	; 0
     c0a:	80 34       	cpi	r24, 0x40	; 64
     c0c:	91 05       	cpc	r25, r1
     c0e:	a1 05       	cpc	r26, r1
     c10:	b1 05       	cpc	r27, r1
     c12:	39 f4       	brne	.+14     	; 0xc22 <__pack_f+0x144>
     c14:	e7 fe       	sbrs	r14, 7
     c16:	0d c0       	rjmp	.+26     	; 0xc32 <__pack_f+0x154>
     c18:	80 e4       	ldi	r24, 0x40	; 64
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a0 e0       	ldi	r26, 0x00	; 0
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__pack_f+0x14c>
     c22:	8f e3       	ldi	r24, 0x3F	; 63
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	a0 e0       	ldi	r26, 0x00	; 0
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e8 0e       	add	r14, r24
     c2c:	f9 1e       	adc	r15, r25
     c2e:	0a 1f       	adc	r16, r26
     c30:	1b 1f       	adc	r17, r27
     c32:	17 ff       	sbrs	r17, 7
     c34:	05 c0       	rjmp	.+10     	; 0xc40 <__pack_f+0x162>
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	31 96       	adiw	r30, 0x01	; 1
     c40:	87 e0       	ldi	r24, 0x07	; 7
     c42:	16 95       	lsr	r17
     c44:	07 95       	ror	r16
     c46:	f7 94       	ror	r15
     c48:	e7 94       	ror	r14
     c4a:	8a 95       	dec	r24
     c4c:	d1 f7       	brne	.-12     	; 0xc42 <__pack_f+0x164>
     c4e:	05 c0       	rjmp	.+10     	; 0xc5a <__pack_f+0x17c>
     c50:	ee 24       	eor	r14, r14
     c52:	ff 24       	eor	r15, r15
     c54:	87 01       	movw	r16, r14
     c56:	ef ef       	ldi	r30, 0xFF	; 255
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	6e 2f       	mov	r22, r30
     c5c:	67 95       	ror	r22
     c5e:	66 27       	eor	r22, r22
     c60:	67 95       	ror	r22
     c62:	90 2f       	mov	r25, r16
     c64:	9f 77       	andi	r25, 0x7F	; 127
     c66:	d7 94       	ror	r13
     c68:	dd 24       	eor	r13, r13
     c6a:	d7 94       	ror	r13
     c6c:	8e 2f       	mov	r24, r30
     c6e:	86 95       	lsr	r24
     c70:	49 2f       	mov	r20, r25
     c72:	46 2b       	or	r20, r22
     c74:	58 2f       	mov	r21, r24
     c76:	5d 29       	or	r21, r13
     c78:	b7 01       	movw	r22, r14
     c7a:	ca 01       	movw	r24, r20
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	ff 90       	pop	r15
     c82:	ef 90       	pop	r14
     c84:	df 90       	pop	r13
     c86:	08 95       	ret

00000c88 <__unpack_f>:
     c88:	fc 01       	movw	r30, r24
     c8a:	db 01       	movw	r26, r22
     c8c:	40 81       	ld	r20, Z
     c8e:	51 81       	ldd	r21, Z+1	; 0x01
     c90:	22 81       	ldd	r18, Z+2	; 0x02
     c92:	62 2f       	mov	r22, r18
     c94:	6f 77       	andi	r22, 0x7F	; 127
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	22 1f       	adc	r18, r18
     c9a:	22 27       	eor	r18, r18
     c9c:	22 1f       	adc	r18, r18
     c9e:	93 81       	ldd	r25, Z+3	; 0x03
     ca0:	89 2f       	mov	r24, r25
     ca2:	88 0f       	add	r24, r24
     ca4:	82 2b       	or	r24, r18
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	99 1f       	adc	r25, r25
     cac:	99 27       	eor	r25, r25
     cae:	99 1f       	adc	r25, r25
     cb0:	11 96       	adiw	r26, 0x01	; 1
     cb2:	9c 93       	st	X, r25
     cb4:	11 97       	sbiw	r26, 0x01	; 1
     cb6:	21 15       	cp	r18, r1
     cb8:	31 05       	cpc	r19, r1
     cba:	a9 f5       	brne	.+106    	; 0xd26 <__unpack_f+0x9e>
     cbc:	41 15       	cp	r20, r1
     cbe:	51 05       	cpc	r21, r1
     cc0:	61 05       	cpc	r22, r1
     cc2:	71 05       	cpc	r23, r1
     cc4:	11 f4       	brne	.+4      	; 0xcca <__unpack_f+0x42>
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	37 c0       	rjmp	.+110    	; 0xd38 <__unpack_f+0xb0>
     cca:	82 e8       	ldi	r24, 0x82	; 130
     ccc:	9f ef       	ldi	r25, 0xFF	; 255
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	9a 01       	movw	r18, r20
     cd8:	ab 01       	movw	r20, r22
     cda:	67 e0       	ldi	r22, 0x07	; 7
     cdc:	22 0f       	add	r18, r18
     cde:	33 1f       	adc	r19, r19
     ce0:	44 1f       	adc	r20, r20
     ce2:	55 1f       	adc	r21, r21
     ce4:	6a 95       	dec	r22
     ce6:	d1 f7       	brne	.-12     	; 0xcdc <__unpack_f+0x54>
     ce8:	83 e0       	ldi	r24, 0x03	; 3
     cea:	8c 93       	st	X, r24
     cec:	0d c0       	rjmp	.+26     	; 0xd08 <__unpack_f+0x80>
     cee:	22 0f       	add	r18, r18
     cf0:	33 1f       	adc	r19, r19
     cf2:	44 1f       	adc	r20, r20
     cf4:	55 1f       	adc	r21, r21
     cf6:	12 96       	adiw	r26, 0x02	; 2
     cf8:	8d 91       	ld	r24, X+
     cfa:	9c 91       	ld	r25, X
     cfc:	13 97       	sbiw	r26, 0x03	; 3
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	13 96       	adiw	r26, 0x03	; 3
     d02:	9c 93       	st	X, r25
     d04:	8e 93       	st	-X, r24
     d06:	12 97       	sbiw	r26, 0x02	; 2
     d08:	20 30       	cpi	r18, 0x00	; 0
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	38 07       	cpc	r19, r24
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	48 07       	cpc	r20, r24
     d12:	80 e4       	ldi	r24, 0x40	; 64
     d14:	58 07       	cpc	r21, r24
     d16:	58 f3       	brcs	.-42     	; 0xcee <__unpack_f+0x66>
     d18:	14 96       	adiw	r26, 0x04	; 4
     d1a:	2d 93       	st	X+, r18
     d1c:	3d 93       	st	X+, r19
     d1e:	4d 93       	st	X+, r20
     d20:	5c 93       	st	X, r21
     d22:	17 97       	sbiw	r26, 0x07	; 7
     d24:	08 95       	ret
     d26:	2f 3f       	cpi	r18, 0xFF	; 255
     d28:	31 05       	cpc	r19, r1
     d2a:	79 f4       	brne	.+30     	; 0xd4a <__unpack_f+0xc2>
     d2c:	41 15       	cp	r20, r1
     d2e:	51 05       	cpc	r21, r1
     d30:	61 05       	cpc	r22, r1
     d32:	71 05       	cpc	r23, r1
     d34:	19 f4       	brne	.+6      	; 0xd3c <__unpack_f+0xb4>
     d36:	84 e0       	ldi	r24, 0x04	; 4
     d38:	8c 93       	st	X, r24
     d3a:	08 95       	ret
     d3c:	64 ff       	sbrs	r22, 4
     d3e:	03 c0       	rjmp	.+6      	; 0xd46 <__unpack_f+0xbe>
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	8c 93       	st	X, r24
     d44:	12 c0       	rjmp	.+36     	; 0xd6a <__unpack_f+0xe2>
     d46:	1c 92       	st	X, r1
     d48:	10 c0       	rjmp	.+32     	; 0xd6a <__unpack_f+0xe2>
     d4a:	2f 57       	subi	r18, 0x7F	; 127
     d4c:	30 40       	sbci	r19, 0x00	; 0
     d4e:	13 96       	adiw	r26, 0x03	; 3
     d50:	3c 93       	st	X, r19
     d52:	2e 93       	st	-X, r18
     d54:	12 97       	sbiw	r26, 0x02	; 2
     d56:	83 e0       	ldi	r24, 0x03	; 3
     d58:	8c 93       	st	X, r24
     d5a:	87 e0       	ldi	r24, 0x07	; 7
     d5c:	44 0f       	add	r20, r20
     d5e:	55 1f       	adc	r21, r21
     d60:	66 1f       	adc	r22, r22
     d62:	77 1f       	adc	r23, r23
     d64:	8a 95       	dec	r24
     d66:	d1 f7       	brne	.-12     	; 0xd5c <__unpack_f+0xd4>
     d68:	70 64       	ori	r23, 0x40	; 64
     d6a:	14 96       	adiw	r26, 0x04	; 4
     d6c:	4d 93       	st	X+, r20
     d6e:	5d 93       	st	X+, r21
     d70:	6d 93       	st	X+, r22
     d72:	7c 93       	st	X, r23
     d74:	17 97       	sbiw	r26, 0x07	; 7
     d76:	08 95       	ret

00000d78 <__fpcmp_parts_f>:
     d78:	1f 93       	push	r17
     d7a:	dc 01       	movw	r26, r24
     d7c:	fb 01       	movw	r30, r22
     d7e:	9c 91       	ld	r25, X
     d80:	92 30       	cpi	r25, 0x02	; 2
     d82:	08 f4       	brcc	.+2      	; 0xd86 <__fpcmp_parts_f+0xe>
     d84:	47 c0       	rjmp	.+142    	; 0xe14 <__fpcmp_parts_f+0x9c>
     d86:	80 81       	ld	r24, Z
     d88:	82 30       	cpi	r24, 0x02	; 2
     d8a:	08 f4       	brcc	.+2      	; 0xd8e <__fpcmp_parts_f+0x16>
     d8c:	43 c0       	rjmp	.+134    	; 0xe14 <__fpcmp_parts_f+0x9c>
     d8e:	94 30       	cpi	r25, 0x04	; 4
     d90:	51 f4       	brne	.+20     	; 0xda6 <__fpcmp_parts_f+0x2e>
     d92:	11 96       	adiw	r26, 0x01	; 1
     d94:	1c 91       	ld	r17, X
     d96:	84 30       	cpi	r24, 0x04	; 4
     d98:	99 f5       	brne	.+102    	; 0xe00 <__fpcmp_parts_f+0x88>
     d9a:	81 81       	ldd	r24, Z+1	; 0x01
     d9c:	68 2f       	mov	r22, r24
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	61 1b       	sub	r22, r17
     da2:	71 09       	sbc	r23, r1
     da4:	3f c0       	rjmp	.+126    	; 0xe24 <__fpcmp_parts_f+0xac>
     da6:	84 30       	cpi	r24, 0x04	; 4
     da8:	21 f0       	breq	.+8      	; 0xdb2 <__fpcmp_parts_f+0x3a>
     daa:	92 30       	cpi	r25, 0x02	; 2
     dac:	31 f4       	brne	.+12     	; 0xdba <__fpcmp_parts_f+0x42>
     dae:	82 30       	cpi	r24, 0x02	; 2
     db0:	b9 f1       	breq	.+110    	; 0xe20 <__fpcmp_parts_f+0xa8>
     db2:	81 81       	ldd	r24, Z+1	; 0x01
     db4:	88 23       	and	r24, r24
     db6:	89 f1       	breq	.+98     	; 0xe1a <__fpcmp_parts_f+0xa2>
     db8:	2d c0       	rjmp	.+90     	; 0xe14 <__fpcmp_parts_f+0x9c>
     dba:	11 96       	adiw	r26, 0x01	; 1
     dbc:	1c 91       	ld	r17, X
     dbe:	11 97       	sbiw	r26, 0x01	; 1
     dc0:	82 30       	cpi	r24, 0x02	; 2
     dc2:	f1 f0       	breq	.+60     	; 0xe00 <__fpcmp_parts_f+0x88>
     dc4:	81 81       	ldd	r24, Z+1	; 0x01
     dc6:	18 17       	cp	r17, r24
     dc8:	d9 f4       	brne	.+54     	; 0xe00 <__fpcmp_parts_f+0x88>
     dca:	12 96       	adiw	r26, 0x02	; 2
     dcc:	2d 91       	ld	r18, X+
     dce:	3c 91       	ld	r19, X
     dd0:	13 97       	sbiw	r26, 0x03	; 3
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	93 81       	ldd	r25, Z+3	; 0x03
     dd6:	82 17       	cp	r24, r18
     dd8:	93 07       	cpc	r25, r19
     dda:	94 f0       	brlt	.+36     	; 0xe00 <__fpcmp_parts_f+0x88>
     ddc:	28 17       	cp	r18, r24
     dde:	39 07       	cpc	r19, r25
     de0:	bc f0       	brlt	.+46     	; 0xe10 <__fpcmp_parts_f+0x98>
     de2:	14 96       	adiw	r26, 0x04	; 4
     de4:	8d 91       	ld	r24, X+
     de6:	9d 91       	ld	r25, X+
     de8:	0d 90       	ld	r0, X+
     dea:	bc 91       	ld	r27, X
     dec:	a0 2d       	mov	r26, r0
     dee:	24 81       	ldd	r18, Z+4	; 0x04
     df0:	35 81       	ldd	r19, Z+5	; 0x05
     df2:	46 81       	ldd	r20, Z+6	; 0x06
     df4:	57 81       	ldd	r21, Z+7	; 0x07
     df6:	28 17       	cp	r18, r24
     df8:	39 07       	cpc	r19, r25
     dfa:	4a 07       	cpc	r20, r26
     dfc:	5b 07       	cpc	r21, r27
     dfe:	18 f4       	brcc	.+6      	; 0xe06 <__fpcmp_parts_f+0x8e>
     e00:	11 23       	and	r17, r17
     e02:	41 f0       	breq	.+16     	; 0xe14 <__fpcmp_parts_f+0x9c>
     e04:	0a c0       	rjmp	.+20     	; 0xe1a <__fpcmp_parts_f+0xa2>
     e06:	82 17       	cp	r24, r18
     e08:	93 07       	cpc	r25, r19
     e0a:	a4 07       	cpc	r26, r20
     e0c:	b5 07       	cpc	r27, r21
     e0e:	40 f4       	brcc	.+16     	; 0xe20 <__fpcmp_parts_f+0xa8>
     e10:	11 23       	and	r17, r17
     e12:	19 f0       	breq	.+6      	; 0xe1a <__fpcmp_parts_f+0xa2>
     e14:	61 e0       	ldi	r22, 0x01	; 1
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <__fpcmp_parts_f+0xac>
     e1a:	6f ef       	ldi	r22, 0xFF	; 255
     e1c:	7f ef       	ldi	r23, 0xFF	; 255
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <__fpcmp_parts_f+0xac>
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	cb 01       	movw	r24, r22
     e26:	1f 91       	pop	r17
     e28:	08 95       	ret

00000e2a <main>:
#include "Motor_driver.h"
U16 distance = 0;
U16 left_dis = 0;
U16 Right_dis = 0;

int main() {
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
	lcd_Init();
     e2e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <lcd_Init>
	lcd_vidSendCmd(_LCD_CURSOR_OFF);
     e32:	8c e0       	ldi	r24, 0x0C	; 12
     e34:	0e 94 8c 0a 	call	0x1518	; 0x1518 <lcd_vidSendCmd>
	servo_Init();
     e38:	0e 94 a7 08 	call	0x114e	; 0x114e <servo_Init>
	Motor_driver_Init();
     e3c:	0e 94 66 09 	call	0x12cc	; 0x12cc <Motor_driver_Init>
	ultrasonic_init();
     e40:	0e 94 8e 08 	call	0x111c	; 0x111c <ultrasonic_init>
	servo_90();
     e44:	0e 94 b7 08 	call	0x116e	; 0x116e <servo_90>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e48:	c0 e9       	ldi	r28, 0x90	; 144
     e4a:	d1 e0       	ldi	r29, 0x01	; 1
	while (1) {
		distance = ultra_Get_distance();
     e4c:	0e 94 71 08 	call	0x10e2	; 0x10e2 <ultra_Get_distance>
     e50:	70 93 99 01 	sts	0x0199, r23
     e54:	60 93 98 01 	sts	0x0198, r22
		if (distance > 20) {
     e58:	65 31       	cpi	r22, 0x15	; 21
     e5a:	71 05       	cpc	r23, r1
     e5c:	90 f5       	brcc	.+100    	; 0xec2 <main+0x98>
			Go_Forword();
			lcd_vidSendCmd(_LCD_CLEAR);
			lcd_vidDisplayString((U8*) "Direc. = Forword");
		} else if (distance <= 20) {
			Stop_all();
     e5e:	0e 94 0d 09 	call	0x121a	; 0x121a <Stop_all>
			servo_0();
     e62:	0e 94 b3 08 	call	0x1166	; 0x1166 <servo_0>
     e66:	20 e1       	ldi	r18, 0x10	; 16
     e68:	37 e2       	ldi	r19, 0x27	; 39
     e6a:	ce 01       	movw	r24, r28
     e6c:	01 97       	sbiw	r24, 0x01	; 1
     e6e:	f1 f7       	brne	.-4      	; 0xe6c <main+0x42>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e70:	21 50       	subi	r18, 0x01	; 1
     e72:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e74:	d1 f7       	brne	.-12     	; 0xe6a <main+0x40>
			_delay_ms(1000);
			Right_dis = ultra_Get_distance();
     e76:	0e 94 71 08 	call	0x10e2	; 0x10e2 <ultra_Get_distance>
     e7a:	70 93 9d 01 	sts	0x019D, r23
     e7e:	60 93 9c 01 	sts	0x019C, r22
			servo_180();
     e82:	0e 94 bc 08 	call	0x1178	; 0x1178 <servo_180>
     e86:	20 e1       	ldi	r18, 0x10	; 16
     e88:	37 e2       	ldi	r19, 0x27	; 39
     e8a:	ce 01       	movw	r24, r28
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <main+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e90:	21 50       	subi	r18, 0x01	; 1
     e92:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e94:	d1 f7       	brne	.-12     	; 0xe8a <main+0x60>
			_delay_ms(1000);
			left_dis = ultra_Get_distance();
     e96:	0e 94 71 08 	call	0x10e2	; 0x10e2 <ultra_Get_distance>
     e9a:	70 93 9b 01 	sts	0x019B, r23
     e9e:	60 93 9a 01 	sts	0x019A, r22
			servo_90();
     ea2:	0e 94 b7 08 	call	0x116e	; 0x116e <servo_90>
			if (Right_dis > left_dis) {
     ea6:	20 91 9c 01 	lds	r18, 0x019C
     eaa:	30 91 9d 01 	lds	r19, 0x019D
     eae:	80 91 9a 01 	lds	r24, 0x019A
     eb2:	90 91 9b 01 	lds	r25, 0x019B
     eb6:	82 17       	cp	r24, r18
     eb8:	93 07       	cpc	r25, r19
     eba:	68 f0       	brcs	.+26     	; 0xed6 <main+0xac>
				Go_Right();
				lcd_vidSendCmd(_LCD_CLEAR);
				lcd_vidDisplayString((U8*) "Direc. = Right");
				_delay_ms(1000);
			} else if (left_dis > Right_dis) {
     ebc:	28 17       	cp	r18, r24
     ebe:	39 07       	cpc	r19, r25
     ec0:	e0 f0       	brcs	.+56     	; 0xefa <main+0xd0>
				Go_Left();
				lcd_vidSendCmd(_LCD_CLEAR);
				lcd_vidDisplayString((U8*) "Direc. = Left");
				_delay_ms(1000);
			} else {
				Go_Forword();
     ec2:	0e 94 61 09 	call	0x12c2	; 0x12c2 <Go_Forword>
				lcd_vidSendCmd(_LCD_CLEAR);
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	0e 94 8c 0a 	call	0x1518	; 0x1518 <lcd_vidSendCmd>
				lcd_vidDisplayString((U8*) "Direc. = Forword");
     ecc:	80 e6       	ldi	r24, 0x60	; 96
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 cd 0a 	call	0x159a	; 0x159a <lcd_vidDisplayString>
     ed4:	bb cf       	rjmp	.-138    	; 0xe4c <main+0x22>
			servo_180();
			_delay_ms(1000);
			left_dis = ultra_Get_distance();
			servo_90();
			if (Right_dis > left_dis) {
				Go_Right();
     ed6:	0e 94 42 09 	call	0x1284	; 0x1284 <Go_Right>
				lcd_vidSendCmd(_LCD_CLEAR);
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	0e 94 8c 0a 	call	0x1518	; 0x1518 <lcd_vidSendCmd>
				lcd_vidDisplayString((U8*) "Direc. = Right");
     ee0:	81 e7       	ldi	r24, 0x71	; 113
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 cd 0a 	call	0x159a	; 0x159a <lcd_vidDisplayString>
     ee8:	20 e1       	ldi	r18, 0x10	; 16
     eea:	37 e2       	ldi	r19, 0x27	; 39
     eec:	ce 01       	movw	r24, r28
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <main+0xc4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef2:	21 50       	subi	r18, 0x01	; 1
     ef4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef6:	d1 f7       	brne	.-12     	; 0xeec <main+0xc2>
     ef8:	a9 cf       	rjmp	.-174    	; 0xe4c <main+0x22>
				_delay_ms(1000);
			} else if (left_dis > Right_dis) {
				Go_Left();
     efa:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <Go_Left>
				lcd_vidSendCmd(_LCD_CLEAR);
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	0e 94 8c 0a 	call	0x1518	; 0x1518 <lcd_vidSendCmd>
				lcd_vidDisplayString((U8*) "Direc. = Left");
     f04:	80 e8       	ldi	r24, 0x80	; 128
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 cd 0a 	call	0x159a	; 0x159a <lcd_vidDisplayString>
     f0c:	20 e1       	ldi	r18, 0x10	; 16
     f0e:	37 e2       	ldi	r19, 0x27	; 39
     f10:	ce 01       	movw	r24, r28
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	f1 f7       	brne	.-4      	; 0xf12 <main+0xe8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f16:	21 50       	subi	r18, 0x01	; 1
     f18:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f1a:	d1 f7       	brne	.-12     	; 0xf10 <main+0xe6>
     f1c:	97 cf       	rjmp	.-210    	; 0xe4c <main+0x22>

00000f1e <SCM_CreateTask>:
U32 No_of_over_flows_timer2 = 0;
void SCM_Init(void) {
	TIMER2_Init();
	TCNT2_REG = 240;
}
void SCM_CreateTask(U16 Priority, U16 Periodicity, void (*funPtr)(void)) {
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	8b 01       	movw	r16, r22
	Task_Array[Priority].TaskPeriodicity = Periodicity;
     f24:	fc 01       	movw	r30, r24
     f26:	ee 0f       	add	r30, r30
     f28:	ff 1f       	adc	r31, r31
     f2a:	e8 0f       	add	r30, r24
     f2c:	f9 1f       	adc	r31, r25
     f2e:	ee 0f       	add	r30, r30
     f30:	ff 1f       	adc	r31, r31
     f32:	ef 54       	subi	r30, 0x4F	; 79
     f34:	fe 4f       	sbci	r31, 0xFE	; 254
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	00 83       	st	Z, r16
     f3c:	11 83       	std	Z+1, r17	; 0x01
     f3e:	22 83       	std	Z+2, r18	; 0x02
     f40:	33 83       	std	Z+3, r19	; 0x03
	Task_Array[Priority].fun_Ptr = funPtr;
     f42:	55 83       	std	Z+5, r21	; 0x05
     f44:	44 83       	std	Z+4, r20	; 0x04
}
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	08 95       	ret

00000f4c <__vector_5>:
}
void SCM_Start(void) {
	TIMER2_Start();
}

ISR(TIMER2_OVF_vect) {
     f4c:	1f 92       	push	r1
     f4e:	0f 92       	push	r0
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	0f 92       	push	r0
     f54:	11 24       	eor	r1, r1
     f56:	ef 92       	push	r14
     f58:	ff 92       	push	r15
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	2f 93       	push	r18
     f60:	3f 93       	push	r19
     f62:	4f 93       	push	r20
     f64:	5f 93       	push	r21
     f66:	6f 93       	push	r22
     f68:	7f 93       	push	r23
     f6a:	8f 93       	push	r24
     f6c:	9f 93       	push	r25
     f6e:	af 93       	push	r26
     f70:	bf 93       	push	r27
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	ef 93       	push	r30
     f78:	ff 93       	push	r31
	No_of_over_flows_timer2++;
     f7a:	e0 90 9e 01 	lds	r14, 0x019E
     f7e:	f0 90 9f 01 	lds	r15, 0x019F
     f82:	00 91 a0 01 	lds	r16, 0x01A0
     f86:	10 91 a1 01 	lds	r17, 0x01A1
     f8a:	08 94       	sec
     f8c:	e1 1c       	adc	r14, r1
     f8e:	f1 1c       	adc	r15, r1
     f90:	01 1d       	adc	r16, r1
     f92:	11 1d       	adc	r17, r1
     f94:	e0 92 9e 01 	sts	0x019E, r14
     f98:	f0 92 9f 01 	sts	0x019F, r15
     f9c:	00 93 a0 01 	sts	0x01A0, r16
     fa0:	10 93 a1 01 	sts	0x01A1, r17
	TCNT2_REG = 240;
     fa4:	80 ef       	ldi	r24, 0xF0	; 240
     fa6:	84 bd       	out	0x24, r24	; 36
     fa8:	c1 eb       	ldi	r28, 0xB1	; 177
     faa:	d1 e0       	ldi	r29, 0x01	; 1
     fac:	0d c0       	rjmp	.+26     	; 0xfc8 <__vector_5+0x7c>
	Task_Array[Priority].fun_Ptr = funPtr;
}
static void SCM_handler(void) {
	for (U32 count = 0; count < _MAXIMUM_TASKS; count++) {
		if (No_of_over_flows_timer2 % Task_Array[count].TaskPeriodicity == 0) {
			Task_Array[count].fun_Ptr();
     fae:	26 96       	adiw	r28, 0x06	; 6
void SCM_CreateTask(U16 Priority, U16 Periodicity, void (*funPtr)(void)) {
	Task_Array[Priority].TaskPeriodicity = Periodicity;
	Task_Array[Priority].fun_Ptr = funPtr;
}
static void SCM_handler(void) {
	for (U32 count = 0; count < _MAXIMUM_TASKS; count++) {
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	cd 3e       	cpi	r28, 0xED	; 237
     fb4:	d8 07       	cpc	r29, r24
     fb6:	e9 f0       	breq	.+58     	; 0xff2 <__vector_5+0xa6>
     fb8:	e0 90 9e 01 	lds	r14, 0x019E
     fbc:	f0 90 9f 01 	lds	r15, 0x019F
     fc0:	00 91 a0 01 	lds	r16, 0x01A0
     fc4:	10 91 a1 01 	lds	r17, 0x01A1
		if (No_of_over_flows_timer2 % Task_Array[count].TaskPeriodicity == 0) {
     fc8:	28 81       	ld	r18, Y
     fca:	39 81       	ldd	r19, Y+1	; 0x01
     fcc:	4a 81       	ldd	r20, Y+2	; 0x02
     fce:	5b 81       	ldd	r21, Y+3	; 0x03
     fd0:	c8 01       	movw	r24, r16
     fd2:	b7 01       	movw	r22, r14
     fd4:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__udivmodsi4>
     fd8:	61 15       	cp	r22, r1
     fda:	71 05       	cpc	r23, r1
     fdc:	81 05       	cpc	r24, r1
     fde:	91 05       	cpc	r25, r1
     fe0:	31 f7       	brne	.-52     	; 0xfae <__vector_5+0x62>
			Task_Array[count].fun_Ptr();
     fe2:	ec 81       	ldd	r30, Y+4	; 0x04
     fe4:	fd 81       	ldd	r31, Y+5	; 0x05
     fe6:	09 95       	icall
     fe8:	26 96       	adiw	r28, 0x06	; 6
void SCM_CreateTask(U16 Priority, U16 Periodicity, void (*funPtr)(void)) {
	Task_Array[Priority].TaskPeriodicity = Periodicity;
	Task_Array[Priority].fun_Ptr = funPtr;
}
static void SCM_handler(void) {
	for (U32 count = 0; count < _MAXIMUM_TASKS; count++) {
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	cd 3e       	cpi	r28, 0xED	; 237
     fee:	d8 07       	cpc	r29, r24
     ff0:	19 f7       	brne	.-58     	; 0xfb8 <__vector_5+0x6c>

ISR(TIMER2_OVF_vect) {
	No_of_over_flows_timer2++;
	TCNT2_REG = 240;
	SCM_handler();
}
     ff2:	ff 91       	pop	r31
     ff4:	ef 91       	pop	r30
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	bf 91       	pop	r27
     ffc:	af 91       	pop	r26
     ffe:	9f 91       	pop	r25
    1000:	8f 91       	pop	r24
    1002:	7f 91       	pop	r23
    1004:	6f 91       	pop	r22
    1006:	5f 91       	pop	r21
    1008:	4f 91       	pop	r20
    100a:	3f 91       	pop	r19
    100c:	2f 91       	pop	r18
    100e:	1f 91       	pop	r17
    1010:	0f 91       	pop	r16
    1012:	ff 90       	pop	r15
    1014:	ef 90       	pop	r14
    1016:	0f 90       	pop	r0
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	0f 90       	pop	r0
    101c:	1f 90       	pop	r1
    101e:	18 95       	reti

00001020 <SCM_Start>:
			Task_Array[count].fun_Ptr();
		}
	}
}
void SCM_Start(void) {
	TIMER2_Start();
    1020:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <TIMER2_Start>
}
    1024:	08 95       	ret

00001026 <SCM_Init>:
 */
#include "SCM.h"
SCM_t Task_Array[_MAXIMUM_TASKS];
U32 No_of_over_flows_timer2 = 0;
void SCM_Init(void) {
	TIMER2_Init();
    1026:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <TIMER2_Init>
	TCNT2_REG = 240;
    102a:	80 ef       	ldi	r24, 0xF0	; 240
    102c:	84 bd       	out	0x24, r24	; 36
}
    102e:	08 95       	ret

00001030 <__vector_1>:
		sensor_working = 1;
	}
	return distance;
}

ISR(INT0_vect) {
    1030:	1f 92       	push	r1
    1032:	0f 92       	push	r0
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	0f 92       	push	r0
    1038:	11 24       	eor	r1, r1
    103a:	2f 93       	push	r18
    103c:	3f 93       	push	r19
    103e:	4f 93       	push	r20
    1040:	5f 93       	push	r21
    1042:	6f 93       	push	r22
    1044:	7f 93       	push	r23
    1046:	8f 93       	push	r24
    1048:	9f 93       	push	r25
    104a:	af 93       	push	r26
    104c:	bf 93       	push	r27
    104e:	ef 93       	push	r30
    1050:	ff 93       	push	r31
	if (sensor_working == 1) {
    1052:	90 91 a2 01 	lds	r25, 0x01A2
    1056:	91 30       	cpi	r25, 0x01	; 1
    1058:	89 f0       	breq	.+34     	; 0x107c <__vector_1+0x4c>
			distance = (No_of_over_flows * 256 + TCNT0) / 933;
			No_of_over_flows = 0;
			rising_edge = 0;
		}
	}
}
    105a:	ff 91       	pop	r31
    105c:	ef 91       	pop	r30
    105e:	bf 91       	pop	r27
    1060:	af 91       	pop	r26
    1062:	9f 91       	pop	r25
    1064:	8f 91       	pop	r24
    1066:	7f 91       	pop	r23
    1068:	6f 91       	pop	r22
    106a:	5f 91       	pop	r21
    106c:	4f 91       	pop	r20
    106e:	3f 91       	pop	r19
    1070:	2f 91       	pop	r18
    1072:	0f 90       	pop	r0
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	0f 90       	pop	r0
    1078:	1f 90       	pop	r1
    107a:	18 95       	reti
	return distance;
}

ISR(INT0_vect) {
	if (sensor_working == 1) {
		if (rising_edge == 0) {
    107c:	80 91 a3 01 	lds	r24, 0x01A3
    1080:	88 23       	and	r24, r24
    1082:	51 f1       	breq	.+84     	; 0x10d8 <__vector_1+0xa8>
			rising_edge = 1;
			TIMER0_Reset();
		} else {
			distance = (No_of_over_flows * 256 + TCNT0) / 933;
    1084:	22 b7       	in	r18, 0x32	; 50
    1086:	60 91 ad 01 	lds	r22, 0x01AD
    108a:	70 91 ae 01 	lds	r23, 0x01AE
    108e:	80 91 af 01 	lds	r24, 0x01AF
    1092:	90 91 b0 01 	lds	r25, 0x01B0
    1096:	98 2f       	mov	r25, r24
    1098:	87 2f       	mov	r24, r23
    109a:	76 2f       	mov	r23, r22
    109c:	66 27       	eor	r22, r22
    109e:	62 0f       	add	r22, r18
    10a0:	71 1d       	adc	r23, r1
    10a2:	81 1d       	adc	r24, r1
    10a4:	91 1d       	adc	r25, r1
    10a6:	25 ea       	ldi	r18, 0xA5	; 165
    10a8:	33 e0       	ldi	r19, 0x03	; 3
    10aa:	40 e0       	ldi	r20, 0x00	; 0
    10ac:	50 e0       	ldi	r21, 0x00	; 0
    10ae:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__udivmodsi4>
    10b2:	20 93 98 01 	sts	0x0198, r18
    10b6:	30 93 99 01 	sts	0x0199, r19
    10ba:	40 93 9a 01 	sts	0x019A, r20
    10be:	50 93 9b 01 	sts	0x019B, r21
			No_of_over_flows = 0;
    10c2:	10 92 ad 01 	sts	0x01AD, r1
    10c6:	10 92 ae 01 	sts	0x01AE, r1
    10ca:	10 92 af 01 	sts	0x01AF, r1
    10ce:	10 92 b0 01 	sts	0x01B0, r1
			rising_edge = 0;
    10d2:	10 92 a3 01 	sts	0x01A3, r1
    10d6:	c1 cf       	rjmp	.-126    	; 0x105a <__vector_1+0x2a>
}

ISR(INT0_vect) {
	if (sensor_working == 1) {
		if (rising_edge == 0) {
			rising_edge = 1;
    10d8:	90 93 a3 01 	sts	0x01A3, r25
			TIMER0_Reset();
    10dc:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <TIMER0_Reset>
    10e0:	bc cf       	rjmp	.-136    	; 0x105a <__vector_1+0x2a>

000010e2 <ultra_Get_distance>:
	return;
}


U32 ultra_Get_distance(void) {
	if (!sensor_working) {
    10e2:	80 91 a2 01 	lds	r24, 0x01A2
    10e6:	88 23       	and	r24, r24
    10e8:	81 f4       	brne	.+32     	; 0x110a <ultra_Get_distance+0x28>
		Dio_write(TRIGER_PORT,TRIGER,Dio_HIGH);
    10ea:	83 e0       	ldi	r24, 0x03	; 3
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	41 e0       	ldi	r20, 0x01	; 1
    10f0:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    10f4:	80 e5       	ldi	r24, 0x50	; 80
    10f6:	8a 95       	dec	r24
    10f8:	f1 f7       	brne	.-4      	; 0x10f6 <ultra_Get_distance+0x14>
		_delay_us(15);
		Dio_write(TRIGER_PORT,TRIGER,Dio_LOW);
    10fa:	83 e0       	ldi	r24, 0x03	; 3
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	40 e0       	ldi	r20, 0x00	; 0
    1100:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
		sensor_working = 1;
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	80 93 a2 01 	sts	0x01A2, r24
    110a:	60 91 98 01 	lds	r22, 0x0198
    110e:	70 91 99 01 	lds	r23, 0x0199
	}
	return distance;
}
    1112:	80 91 9a 01 	lds	r24, 0x019A
    1116:	90 91 9b 01 	lds	r25, 0x019B
    111a:	08 95       	ret

0000111c <ultrasonic_init>:
U8 rising_edge = 0;
extern U32 No_of_over_flows ;
U32 distance;

void ultrasonic_init(void) {
	Dio_config(TRIGER_PORT,TRIGER,OUTPUT);
    111c:	83 e0       	ldi	r24, 0x03	; 3
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	41 e0       	ldi	r20, 0x01	; 1
    1122:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	Dio_config(ECHO_PORT,ECHO,INPUT);
    1126:	83 e0       	ldi	r24, 0x03	; 3
    1128:	62 e0       	ldi	r22, 0x02	; 2
    112a:	40 e0       	ldi	r20, 0x00	; 0
    112c:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	SET_BIT(ECHO_PULLUP,ECHO);
    1130:	92 9a       	sbi	0x12, 2	; 18
	GINT_Global_Enable();
    1132:	0e 94 92 10 	call	0x2124	; 0x2124 <GINT_Global_Enable>
	GINT_EnaleExtINT(INTR0);
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	0e 94 ad 10 	call	0x215a	; 0x215a <GINT_EnaleExtINT>
	GINT_Ext_Interrupt_Mode(INTR0, AnyLogic);
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	61 e0       	ldi	r22, 0x01	; 1
    1140:	0e 94 c0 10 	call	0x2180	; 0x2180 <GINT_Ext_Interrupt_Mode>
	TIMER0_Init();
    1144:	0e 94 25 10 	call	0x204a	; 0x204a <TIMER0_Init>
	TIMER0_Start();
    1148:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <TIMER0_Start>
	return;
}
    114c:	08 95       	ret

0000114e <servo_Init>:
 *      Author: Ahmed abdel Gawad
 */

#include "servo.h"
void servo_Init(void) {
	DDRD |= (1 << PD5); /* Make OC1A pin as output */
    114e:	8d 9a       	sbi	0x11, 5	; 17
	TCNT1 = 0; /* Set timer1 count zero */
    1150:	1d bc       	out	0x2d, r1	; 45
    1152:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 4999; /* Set TOP count for timer1 in ICR1 register */
    1154:	87 e8       	ldi	r24, 0x87	; 135
    1156:	93 e1       	ldi	r25, 0x13	; 19
    1158:	97 bd       	out	0x27, r25	; 39
    115a:	86 bd       	out	0x26, r24	; 38

	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	TCCR1A = (1 << WGM11) | (1 << COM1A1);
    115c:	82 e8       	ldi	r24, 0x82	; 130
    115e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM12) | (1 << WGM13) | (1 << CS10) | (1 << CS11);
    1160:	8b e1       	ldi	r24, 0x1B	; 27
    1162:	8e bd       	out	0x2e, r24	; 46
}
    1164:	08 95       	ret

00001166 <servo_0>:
void servo_0(void) {
	OCR1AL = 130;
    1166:	82 e8       	ldi	r24, 0x82	; 130
    1168:	8a bd       	out	0x2a, r24	; 42
	OCR1AH = 130 >> 8;
    116a:	1b bc       	out	0x2b, r1	; 43
}
    116c:	08 95       	ret

0000116e <servo_90>:
void servo_90(void) {
	OCR1AL = (U8) 350;
    116e:	8e e5       	ldi	r24, 0x5E	; 94
    1170:	8a bd       	out	0x2a, r24	; 42
	OCR1AH = 350 >> 8;
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	8b bd       	out	0x2b, r24	; 43
}
    1176:	08 95       	ret

00001178 <servo_180>:
void servo_180(void) {
	OCR1AL = (U8) 600;
    1178:	88 e5       	ldi	r24, 0x58	; 88
    117a:	8a bd       	out	0x2a, r24	; 42
	OCR1AH = 600 >> 8;
    117c:	82 e0       	ldi	r24, 0x02	; 2
    117e:	8b bd       	out	0x2b, r24	; 43
}
    1180:	08 95       	ret

00001182 <servo_Angle>:
void servo_Angle(U32 angle) {
	F32 ang = (F32) 2.611 * (F32) angle;
	angle = (U32) ang + 130;
    1182:	0e 94 a7 04 	call	0x94e	; 0x94e <__floatunsisf>
    1186:	20 ea       	ldi	r18, 0xA0	; 160
    1188:	3a e1       	ldi	r19, 0x1A	; 26
    118a:	47 e2       	ldi	r20, 0x27	; 39
    118c:	50 e4       	ldi	r21, 0x40	; 64
    118e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1196:	6e 57       	subi	r22, 0x7E	; 126
    1198:	7f 4f       	sbci	r23, 0xFF	; 255
    119a:	8f 4f       	sbci	r24, 0xFF	; 255
    119c:	9f 4f       	sbci	r25, 0xFF	; 255
	OCR1AL = (U8) angle;
    119e:	6a bd       	out	0x2a, r22	; 42
	OCR1AH = (U32) angle >> 8;
    11a0:	67 2f       	mov	r22, r23
    11a2:	78 2f       	mov	r23, r24
    11a4:	89 2f       	mov	r24, r25
    11a6:	99 27       	eor	r25, r25
    11a8:	6b bd       	out	0x2b, r22	; 43
}
    11aa:	08 95       	ret

000011ac <HC_05_receive_char>:
}
void HC_05_send_str(U8 *STRING) {
	UART_sendString(STRING);
}
U8 HC_05_receive_char(void) {
	U8 received = UART_receiveChar();
    11ac:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <UART_receiveChar>
	if (received != 0) {
		return received;
	} else {
		return 0;
	}
}
    11b0:	08 95       	ret

000011b2 <HC_05_send_str>:
}
void HC_05_send_char(U8 byte) {
	UART_sendChar(byte);
}
void HC_05_send_str(U8 *STRING) {
	UART_sendString(STRING);
    11b2:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <UART_sendString>
}
    11b6:	08 95       	ret

000011b8 <HC_05_send_char>:
#include "HC-05.h"
void HC_05_Init(void) {
	UART_Init(BAUD_RATE_9600);
}
void HC_05_send_char(U8 byte) {
	UART_sendChar(byte);
    11b8:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <UART_sendChar>
}
    11bc:	08 95       	ret

000011be <HC_05_Init>:
 *      Author: Ahmed abdel Gawad
 */

#include "HC-05.h"
void HC_05_Init(void) {
	UART_Init(BAUD_RATE_9600);
    11be:	67 e6       	ldi	r22, 0x67	; 103
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <UART_Init>
}
    11ca:	08 95       	ret

000011cc <Motor_Set_speed>:
	Dio_write(Dio_PORTD, Dio_pin5, Dio_HIGH);

}
void Motor_Set_speed(U16 value) {

	PWM1_Set_Duty(value);
    11cc:	a0 e0       	ldi	r26, 0x00	; 0
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	bc 01       	movw	r22, r24
    11d2:	cd 01       	movw	r24, r26
    11d4:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <PWM1_Set_Duty>
}
    11d8:	08 95       	ret

000011da <Motor_2_stop>:
	Dio_write(Dio_PORTC, Dio_pin4, Dio_LOW);
	Dio_write(Dio_PORTD, Dio_pin4, Dio_HIGH);

}
void Motor_2_stop(void) {
	Dio_write(Dio_PORTC, Dio_pin5, Dio_LOW);
    11da:	82 e0       	ldi	r24, 0x02	; 2
    11dc:	65 e0       	ldi	r22, 0x05	; 5
    11de:	40 e0       	ldi	r20, 0x00	; 0
    11e0:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	Dio_write(Dio_PORTC, Dio_pin6, Dio_LOW);
    11e4:	82 e0       	ldi	r24, 0x02	; 2
    11e6:	66 e0       	ldi	r22, 0x06	; 6
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	Dio_write(Dio_PORTD, Dio_pin5, Dio_HIGH);
    11ee:	83 e0       	ldi	r24, 0x03	; 3
    11f0:	65 e0       	ldi	r22, 0x05	; 5
    11f2:	41 e0       	ldi	r20, 0x01	; 1
    11f4:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>

}
    11f8:	08 95       	ret

000011fa <Motor_1_stop>:
	Dio_write(Dio_PORTC, Dio_pin5, Dio_LOW);
	Dio_write(Dio_PORTC, Dio_pin6, Dio_HIGH);
	Dio_write(Dio_PORTD, Dio_pin5, Dio_HIGH);
}
void Motor_1_stop(void) {
	Dio_write(Dio_PORTC, Dio_pin3, Dio_LOW);
    11fa:	82 e0       	ldi	r24, 0x02	; 2
    11fc:	63 e0       	ldi	r22, 0x03	; 3
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	Dio_write(Dio_PORTC, Dio_pin4, Dio_LOW);
    1204:	82 e0       	ldi	r24, 0x02	; 2
    1206:	64 e0       	ldi	r22, 0x04	; 4
    1208:	40 e0       	ldi	r20, 0x00	; 0
    120a:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	Dio_write(Dio_PORTD, Dio_pin4, Dio_HIGH);
    120e:	83 e0       	ldi	r24, 0x03	; 3
    1210:	64 e0       	ldi	r22, 0x04	; 4
    1212:	41 e0       	ldi	r20, 0x01	; 1
    1214:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>

}
    1218:	08 95       	ret

0000121a <Stop_all>:
void Go_Right(void) {
	Motor_2_forward();
	Motor_1_backward();
}
void Stop_all(void) {
	Motor_1_stop();
    121a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <Motor_1_stop>
	Motor_2_stop();
    121e:	0e 94 ed 08 	call	0x11da	; 0x11da <Motor_2_stop>
}
    1222:	08 95       	ret

00001224 <Motor_2_backward>:
	Dio_write(Dio_PORTC, Dio_pin6, Dio_LOW);
	Dio_write(Dio_PORTD, Dio_pin5, Dio_HIGH);

}
void Motor_2_backward(void) {
	Dio_write(Dio_PORTC, Dio_pin5, Dio_LOW);
    1224:	82 e0       	ldi	r24, 0x02	; 2
    1226:	65 e0       	ldi	r22, 0x05	; 5
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	Dio_write(Dio_PORTC, Dio_pin6, Dio_HIGH);
    122e:	82 e0       	ldi	r24, 0x02	; 2
    1230:	66 e0       	ldi	r22, 0x06	; 6
    1232:	41 e0       	ldi	r20, 0x01	; 1
    1234:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	Dio_write(Dio_PORTD, Dio_pin5, Dio_HIGH);
    1238:	83 e0       	ldi	r24, 0x03	; 3
    123a:	65 e0       	ldi	r22, 0x05	; 5
    123c:	41 e0       	ldi	r20, 0x01	; 1
    123e:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
}
    1242:	08 95       	ret

00001244 <Motor_2_forward>:
	Dio_write(Dio_PORTD, Dio_pin4, Dio_HIGH);

}

void Motor_2_forward(void) {
	Dio_write(Dio_PORTC, Dio_pin5, Dio_HIGH);
    1244:	82 e0       	ldi	r24, 0x02	; 2
    1246:	65 e0       	ldi	r22, 0x05	; 5
    1248:	41 e0       	ldi	r20, 0x01	; 1
    124a:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	Dio_write(Dio_PORTC, Dio_pin6, Dio_LOW);
    124e:	82 e0       	ldi	r24, 0x02	; 2
    1250:	66 e0       	ldi	r22, 0x06	; 6
    1252:	40 e0       	ldi	r20, 0x00	; 0
    1254:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	Dio_write(Dio_PORTD, Dio_pin5, Dio_HIGH);
    1258:	83 e0       	ldi	r24, 0x03	; 3
    125a:	65 e0       	ldi	r22, 0x05	; 5
    125c:	41 e0       	ldi	r20, 0x01	; 1
    125e:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>

}
    1262:	08 95       	ret

00001264 <Motor_1_backward>:
	Dio_write(Dio_PORTC, Dio_pin4, Dio_LOW);
	Dio_write(Dio_PORTD, Dio_pin4, Dio_HIGH);

}
void Motor_1_backward(void) {
	Dio_write(Dio_PORTC, Dio_pin3, Dio_LOW);
    1264:	82 e0       	ldi	r24, 0x02	; 2
    1266:	63 e0       	ldi	r22, 0x03	; 3
    1268:	40 e0       	ldi	r20, 0x00	; 0
    126a:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	Dio_write(Dio_PORTC, Dio_pin4, Dio_HIGH);
    126e:	82 e0       	ldi	r24, 0x02	; 2
    1270:	64 e0       	ldi	r22, 0x04	; 4
    1272:	41 e0       	ldi	r20, 0x01	; 1
    1274:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	Dio_write(Dio_PORTD, Dio_pin4, Dio_HIGH);
    1278:	83 e0       	ldi	r24, 0x03	; 3
    127a:	64 e0       	ldi	r22, 0x04	; 4
    127c:	41 e0       	ldi	r20, 0x01	; 1
    127e:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>

}
    1282:	08 95       	ret

00001284 <Go_Right>:
void Go_Left(void) {
	Motor_1_forward();
	Motor_2_backward();
}
void Go_Right(void) {
	Motor_2_forward();
    1284:	0e 94 22 09 	call	0x1244	; 0x1244 <Motor_2_forward>
	Motor_1_backward();
    1288:	0e 94 32 09 	call	0x1264	; 0x1264 <Motor_1_backward>
}
    128c:	08 95       	ret

0000128e <Go_Backward>:
void Go_Forword(void) {
	Motor_1_forward();
	Motor_2_forward();
}
void Go_Backward(void) {
	Motor_1_backward();
    128e:	0e 94 32 09 	call	0x1264	; 0x1264 <Motor_1_backward>
	Motor_2_backward();
    1292:	0e 94 12 09 	call	0x1224	; 0x1224 <Motor_2_backward>
}
    1296:	08 95       	ret

00001298 <Motor_1_forward>:
	Dio_config(Dio_PORTC, Dio_pin6, OUTPUT); //control
	//PWM1_Init(500);
}

void Motor_1_forward(void) {
	Dio_write(Dio_PORTC, Dio_pin3, Dio_HIGH);
    1298:	82 e0       	ldi	r24, 0x02	; 2
    129a:	63 e0       	ldi	r22, 0x03	; 3
    129c:	41 e0       	ldi	r20, 0x01	; 1
    129e:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	Dio_write(Dio_PORTC, Dio_pin4, Dio_LOW);
    12a2:	82 e0       	ldi	r24, 0x02	; 2
    12a4:	64 e0       	ldi	r22, 0x04	; 4
    12a6:	40 e0       	ldi	r20, 0x00	; 0
    12a8:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	Dio_write(Dio_PORTD, Dio_pin4, Dio_HIGH);
    12ac:	83 e0       	ldi	r24, 0x03	; 3
    12ae:	64 e0       	ldi	r22, 0x04	; 4
    12b0:	41 e0       	ldi	r20, 0x01	; 1
    12b2:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>

}
    12b6:	08 95       	ret

000012b8 <Go_Left>:
void Go_Backward(void) {
	Motor_1_backward();
	Motor_2_backward();
}
void Go_Left(void) {
	Motor_1_forward();
    12b8:	0e 94 4c 09 	call	0x1298	; 0x1298 <Motor_1_forward>
	Motor_2_backward();
    12bc:	0e 94 12 09 	call	0x1224	; 0x1224 <Motor_2_backward>
}
    12c0:	08 95       	ret

000012c2 <Go_Forword>:

	PWM1_Set_Duty(value);
}

void Go_Forword(void) {
	Motor_1_forward();
    12c2:	0e 94 4c 09 	call	0x1298	; 0x1298 <Motor_1_forward>
	Motor_2_forward();
    12c6:	0e 94 22 09 	call	0x1244	; 0x1244 <Motor_2_forward>
}
    12ca:	08 95       	ret

000012cc <Motor_driver_Init>:
 *      Author: Ahmed abdel Gawad
 */

#include "Motor_driver.h"
void Motor_driver_Init(void) {
	Dio_config(Dio_PORTD, Dio_pin4, OUTPUT);
    12cc:	83 e0       	ldi	r24, 0x03	; 3
    12ce:	64 e0       	ldi	r22, 0x04	; 4
    12d0:	41 e0       	ldi	r20, 0x01	; 1
    12d2:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	Dio_config(Dio_PORTD, Dio_pin5, OUTPUT); //enable
    12d6:	83 e0       	ldi	r24, 0x03	; 3
    12d8:	65 e0       	ldi	r22, 0x05	; 5
    12da:	41 e0       	ldi	r20, 0x01	; 1
    12dc:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>

	Dio_config(Dio_PORTC, Dio_pin3, OUTPUT);
    12e0:	82 e0       	ldi	r24, 0x02	; 2
    12e2:	63 e0       	ldi	r22, 0x03	; 3
    12e4:	41 e0       	ldi	r20, 0x01	; 1
    12e6:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	Dio_config(Dio_PORTC, Dio_pin4, OUTPUT);
    12ea:	82 e0       	ldi	r24, 0x02	; 2
    12ec:	64 e0       	ldi	r22, 0x04	; 4
    12ee:	41 e0       	ldi	r20, 0x01	; 1
    12f0:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	Dio_config(Dio_PORTC, Dio_pin5, OUTPUT);
    12f4:	82 e0       	ldi	r24, 0x02	; 2
    12f6:	65 e0       	ldi	r22, 0x05	; 5
    12f8:	41 e0       	ldi	r20, 0x01	; 1
    12fa:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	Dio_config(Dio_PORTC, Dio_pin6, OUTPUT); //control
    12fe:	82 e0       	ldi	r24, 0x02	; 2
    1300:	66 e0       	ldi	r22, 0x06	; 6
    1302:	41 e0       	ldi	r20, 0x01	; 1
    1304:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	//PWM1_Init(500);
}
    1308:	08 95       	ret

0000130a <SSD_3bits_disNum>:
	//control lines
	Dio_config(Dio_PORTB, Dio_pin1, OUTPUT);
	Dio_config(Dio_PORTB, Dio_pin2, OUTPUT);
	Dio_config(Dio_PORTB, Dio_pin3, OUTPUT);
}
void SSD_3bits_disNum(U16 num) {
    130a:	ef 92       	push	r14
    130c:	ff 92       	push	r15
    130e:	0f 93       	push	r16
    1310:	1f 93       	push	r17
    1312:	7c 01       	movw	r14, r24
	U8 loc_digit1 = (num % 10) << 4;
	U8 loc_digit2 = (num / 10)%10 << 4;
	U8 loc_digit3 = (num / 100) << 4;
	//enable ssd1
	Dio_write(Dio_PORTB, Dio_pin1, Dio_HIGH);
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	61 e0       	ldi	r22, 0x01	; 1
    1318:	41 e0       	ldi	r20, 0x01	; 1
    131a:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	//disable ssd2
	Dio_write(Dio_PORTB, Dio_pin2, Dio_LOW);
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	62 e0       	ldi	r22, 0x02	; 2
    1322:	40 e0       	ldi	r20, 0x00	; 0
    1324:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	//disable ssd3
	Dio_write(Dio_PORTB, Dio_pin3, Dio_LOW);
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	63 e0       	ldi	r22, 0x03	; 3
    132c:	40 e0       	ldi	r20, 0x00	; 0
    132e:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	//send digit 1
	Dio_writeChannelGroup(Dio_PORTA, loc_digit1, 0xF0);
    1332:	c7 01       	movw	r24, r14
    1334:	6a e0       	ldi	r22, 0x0A	; 10
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	0e 94 c6 12 	call	0x258c	; 0x258c <__udivmodhi4>
    133c:	68 2f       	mov	r22, r24
    133e:	62 95       	swap	r22
    1340:	60 7f       	andi	r22, 0xF0	; 240
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	40 ef       	ldi	r20, 0xF0	; 240
    1346:	0e 94 3d 12 	call	0x247a	; 0x247a <Dio_writeChannelGroup>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    134a:	00 e2       	ldi	r16, 0x20	; 32
    134c:	1e e4       	ldi	r17, 0x4E	; 78
    134e:	c8 01       	movw	r24, r16
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	f1 f7       	brne	.-4      	; 0x1350 <SSD_3bits_disNum+0x46>
	_delay_ms(5);

	//disable ssd1
	Dio_write(Dio_PORTB, Dio_pin1, Dio_LOW);
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	61 e0       	ldi	r22, 0x01	; 1
    1358:	40 e0       	ldi	r20, 0x00	; 0
    135a:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	//enable ssd2
	Dio_write(Dio_PORTB, Dio_pin2, Dio_HIGH);
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	62 e0       	ldi	r22, 0x02	; 2
    1362:	41 e0       	ldi	r20, 0x01	; 1
    1364:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	//disable ssd3
	Dio_write(Dio_PORTB, Dio_pin3, Dio_LOW);
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	63 e0       	ldi	r22, 0x03	; 3
    136c:	40 e0       	ldi	r20, 0x00	; 0
    136e:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	//send digit 2
	Dio_writeChannelGroup(Dio_PORTA, loc_digit2, 0xF0);
    1372:	c7 01       	movw	r24, r14
    1374:	6a e0       	ldi	r22, 0x0A	; 10
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	0e 94 c6 12 	call	0x258c	; 0x258c <__udivmodhi4>
    137c:	cb 01       	movw	r24, r22
    137e:	6a e0       	ldi	r22, 0x0A	; 10
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	0e 94 c6 12 	call	0x258c	; 0x258c <__udivmodhi4>
    1386:	68 2f       	mov	r22, r24
    1388:	62 95       	swap	r22
    138a:	60 7f       	andi	r22, 0xF0	; 240
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	40 ef       	ldi	r20, 0xF0	; 240
    1390:	0e 94 3d 12 	call	0x247a	; 0x247a <Dio_writeChannelGroup>
    1394:	c8 01       	movw	r24, r16
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	f1 f7       	brne	.-4      	; 0x1396 <SSD_3bits_disNum+0x8c>
	_delay_ms(5);

	//disable ssd1
	Dio_write(Dio_PORTB, Dio_pin1, Dio_LOW);
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	61 e0       	ldi	r22, 0x01	; 1
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	//disable ssd2
	Dio_write(Dio_PORTB, Dio_pin2, Dio_LOW);
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	62 e0       	ldi	r22, 0x02	; 2
    13a8:	40 e0       	ldi	r20, 0x00	; 0
    13aa:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	//enable ssd3
	Dio_write(Dio_PORTB, Dio_pin3, Dio_HIGH);
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	63 e0       	ldi	r22, 0x03	; 3
    13b2:	41 e0       	ldi	r20, 0x01	; 1
    13b4:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	//send digit 2
	Dio_writeChannelGroup(Dio_PORTA, loc_digit3, 0xF0);
    13b8:	c7 01       	movw	r24, r14
    13ba:	64 e6       	ldi	r22, 0x64	; 100
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	0e 94 c6 12 	call	0x258c	; 0x258c <__udivmodhi4>
    13c2:	62 95       	swap	r22
    13c4:	60 7f       	andi	r22, 0xF0	; 240
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	40 ef       	ldi	r20, 0xF0	; 240
    13ca:	0e 94 3d 12 	call	0x247a	; 0x247a <Dio_writeChannelGroup>
    13ce:	c8 01       	movw	r24, r16
    13d0:	01 97       	sbiw	r24, 0x01	; 1
    13d2:	f1 f7       	brne	.-4      	; 0x13d0 <SSD_3bits_disNum+0xc6>
	_delay_ms(5);
}
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	ff 90       	pop	r15
    13da:	ef 90       	pop	r14
    13dc:	08 95       	ret

000013de <SSD_3bits_disNumWithDelay>:
void SSD_3bits_disNumWithDelay(U16 num, U32 delay) {
    13de:	8f 92       	push	r8
    13e0:	9f 92       	push	r9
    13e2:	af 92       	push	r10
    13e4:	bf 92       	push	r11
    13e6:	cf 92       	push	r12
    13e8:	df 92       	push	r13
    13ea:	ef 92       	push	r14
    13ec:	ff 92       	push	r15
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	ec 01       	movw	r28, r24
    13f8:	5a 01       	movw	r10, r20
    13fa:	6b 01       	movw	r12, r22
	U32 count;
	for(count=1;count<=delay;count+=16){
    13fc:	41 15       	cp	r20, r1
    13fe:	51 05       	cpc	r21, r1
    1400:	61 05       	cpc	r22, r1
    1402:	71 05       	cpc	r23, r1
    1404:	e1 f0       	breq	.+56     	; 0x143e <SSD_3bits_disNumWithDelay+0x60>
    1406:	91 e0       	ldi	r25, 0x01	; 1
    1408:	e9 2e       	mov	r14, r25
    140a:	f1 2c       	mov	r15, r1
    140c:	01 2d       	mov	r16, r1
    140e:	11 2d       	mov	r17, r1
    1410:	80 ea       	ldi	r24, 0xA0	; 160
    1412:	88 2e       	mov	r8, r24
    1414:	8f e0       	ldi	r24, 0x0F	; 15
    1416:	98 2e       	mov	r9, r24
		SSD_3bits_disNum(num);
    1418:	ce 01       	movw	r24, r28
    141a:	0e 94 85 09 	call	0x130a	; 0x130a <SSD_3bits_disNum>
    141e:	c4 01       	movw	r24, r8
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	f1 f7       	brne	.-4      	; 0x1420 <SSD_3bits_disNumWithDelay+0x42>
	Dio_writeChannelGroup(Dio_PORTA, loc_digit3, 0xF0);
	_delay_ms(5);
}
void SSD_3bits_disNumWithDelay(U16 num, U32 delay) {
	U32 count;
	for(count=1;count<=delay;count+=16){
    1424:	80 e1       	ldi	r24, 0x10	; 16
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	a0 e0       	ldi	r26, 0x00	; 0
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e8 0e       	add	r14, r24
    142e:	f9 1e       	adc	r15, r25
    1430:	0a 1f       	adc	r16, r26
    1432:	1b 1f       	adc	r17, r27
    1434:	ae 14       	cp	r10, r14
    1436:	bf 04       	cpc	r11, r15
    1438:	c0 06       	cpc	r12, r16
    143a:	d1 06       	cpc	r13, r17
    143c:	68 f7       	brcc	.-38     	; 0x1418 <SSD_3bits_disNumWithDelay+0x3a>
		SSD_3bits_disNum(num);
		_delay_ms(1);
	}
}
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	1f 91       	pop	r17
    1444:	0f 91       	pop	r16
    1446:	ff 90       	pop	r15
    1448:	ef 90       	pop	r14
    144a:	df 90       	pop	r13
    144c:	cf 90       	pop	r12
    144e:	bf 90       	pop	r11
    1450:	af 90       	pop	r10
    1452:	9f 90       	pop	r9
    1454:	8f 90       	pop	r8
    1456:	08 95       	ret

00001458 <SSD_3bits_Init>:
 *      Author: Ahmed abdel Gawad
 */
#include "SSD_3bits.h"
void SSD_3bits_Init() {
	///Data lines
	Dio_config(Dio_PORTA, Dio_pin4, OUTPUT);
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	64 e0       	ldi	r22, 0x04	; 4
    145c:	41 e0       	ldi	r20, 0x01	; 1
    145e:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	Dio_config(Dio_PORTA, Dio_pin5, OUTPUT);
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	65 e0       	ldi	r22, 0x05	; 5
    1466:	41 e0       	ldi	r20, 0x01	; 1
    1468:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	Dio_config(Dio_PORTA, Dio_pin6, OUTPUT);
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	66 e0       	ldi	r22, 0x06	; 6
    1470:	41 e0       	ldi	r20, 0x01	; 1
    1472:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	Dio_config(Dio_PORTA, Dio_pin7, OUTPUT);
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	67 e0       	ldi	r22, 0x07	; 7
    147a:	41 e0       	ldi	r20, 0x01	; 1
    147c:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	//control lines
	Dio_config(Dio_PORTB, Dio_pin1, OUTPUT);
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	61 e0       	ldi	r22, 0x01	; 1
    1484:	41 e0       	ldi	r20, 0x01	; 1
    1486:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	Dio_config(Dio_PORTB, Dio_pin2, OUTPUT);
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	62 e0       	ldi	r22, 0x02	; 2
    148e:	41 e0       	ldi	r20, 0x01	; 1
    1490:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	Dio_config(Dio_PORTB, Dio_pin3, OUTPUT);
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	63 e0       	ldi	r22, 0x03	; 3
    1498:	41 e0       	ldi	r20, 0x01	; 1
    149a:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
}
    149e:	08 95       	ret

000014a0 <LM35_Read>:
}

F32 LM35_Read(void) {
	F32 mili_volt;
	U32 temp;
	mili_volt = (ADC_ReadChannel(LM35_channel) * 5.0);
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	0e 94 81 10 	call	0x2102	; 0x2102 <ADC_ReadChannel>
    14a6:	a0 e0       	ldi	r26, 0x00	; 0
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	bc 01       	movw	r22, r24
    14ac:	cd 01       	movw	r24, r26
    14ae:	0e 94 a7 04 	call	0x94e	; 0x94e <__floatunsisf>
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	40 ea       	ldi	r20, 0xA0	; 160
    14b8:	50 e4       	ldi	r21, 0x40	; 64
    14ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	40 e2       	ldi	r20, 0x20	; 32
    14c4:	51 e4       	ldi	r21, 0x41	; 65
    14c6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ce:	0e 94 a7 04 	call	0x94e	; 0x94e <__floatunsisf>
	temp = mili_volt / 10;
	return temp;
}
    14d2:	08 95       	ret

000014d4 <LM35_disp_temp>:

void LM35_disp_temp(void){
	lcd_Init();
    14d4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <lcd_Init>
	lcd_vidDisplayNum(LM35_Read());
    14d8:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LM35_Read>
    14dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e0:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <lcd_vidDisplayNum>
	lcd_vidDisplayChar('C');
    14e4:	83 e4       	ldi	r24, 0x43	; 67
    14e6:	0e 94 76 0c 	call	0x18ec	; 0x18ec <lcd_vidDisplayChar>
}
    14ea:	08 95       	ret

000014ec <LM35_Init>:
 *      Author: Ahmed abdel Gawad
 */

#include "LM35.h"
void LM35_Init(void) {
	ADC_Init(128);
    14ec:	80 e8       	ldi	r24, 0x80	; 128
    14ee:	0e 94 31 10 	call	0x2062	; 0x2062 <ADC_Init>
}
    14f2:	08 95       	ret

000014f4 <En_pluse>:
	lcd_vidSendCmd(_LCD_4BIT_MODE);
	lcd_GotoRowColum(0, 0);
}

static void En_pluse(void) {
	Dio_write(Dio_PORTB, Dio_pin3, Dio_HIGH);
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	63 e0       	ldi	r22, 0x03	; 3
    14f8:	41 e0       	ldi	r20, 0x01	; 1
    14fa:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    14fe:	85 e0       	ldi	r24, 0x05	; 5
    1500:	8a 95       	dec	r24
    1502:	f1 f7       	brne	.-4      	; 0x1500 <En_pluse+0xc>
	_delay_us(1);
	Dio_write(Dio_PORTB, Dio_pin3, Dio_LOW);
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	63 e0       	ldi	r22, 0x03	; 3
    1508:	40 e0       	ldi	r20, 0x00	; 0
    150a:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    150e:	80 e4       	ldi	r24, 0x40	; 64
    1510:	9f e1       	ldi	r25, 0x1F	; 31
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	f1 f7       	brne	.-4      	; 0x1512 <En_pluse+0x1e>
	_delay_ms(2);
}
    1516:	08 95       	ret

00001518 <lcd_vidSendCmd>:
	En_pluse();
	Dio_writeChannelGroup(Dio_PORTA, loc_LSBData, 0xF0);
	En_pluse();

}
void lcd_vidSendCmd(lcd_Cmd_Type cmd) {
    1518:	1f 93       	push	r17
    151a:	18 2f       	mov	r17, r24

	U8 loc_LSBCmd = cmd << 4;
	U8 loc_MSBCmd = cmd;
	Dio_write(Dio_PORTB, Dio_pin1, Dio_LOW);
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	61 e0       	ldi	r22, 0x01	; 1
    1520:	40 e0       	ldi	r20, 0x00	; 0
    1522:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	Dio_writeChannelGroup(Dio_PORTA, loc_MSBCmd, 0xF0);
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	61 2f       	mov	r22, r17
    152a:	40 ef       	ldi	r20, 0xF0	; 240
    152c:	0e 94 3d 12 	call	0x247a	; 0x247a <Dio_writeChannelGroup>
	En_pluse();
    1530:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <En_pluse>
	Dio_writeChannelGroup(Dio_PORTA, loc_LSBCmd, 0xF0);
    1534:	12 95       	swap	r17
    1536:	10 7f       	andi	r17, 0xF0	; 240
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	61 2f       	mov	r22, r17
    153c:	40 ef       	ldi	r20, 0xF0	; 240
    153e:	0e 94 3d 12 	call	0x247a	; 0x247a <Dio_writeChannelGroup>
	En_pluse();
    1542:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <En_pluse>
}
    1546:	1f 91       	pop	r17
    1548:	08 95       	ret

0000154a <lcd_GotoRowColum>:
		str++;
	}
}

void lcd_GotoRowColum(U8 row, U8 colum) {
	switch (row) {
    154a:	88 23       	and	r24, r24
    154c:	29 f4       	brne	.+10     	; 0x1558 <lcd_GotoRowColum+0xe>
	/*Row 0*/
	case 0:
		lcd_vidSendCmd(0x80 + colum);
    154e:	86 2f       	mov	r24, r22
    1550:	80 58       	subi	r24, 0x80	; 128
    1552:	0e 94 8c 0a 	call	0x1518	; 0x1518 <lcd_vidSendCmd>
    1556:	08 95       	ret
		str++;
	}
}

void lcd_GotoRowColum(U8 row, U8 colum) {
	switch (row) {
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	09 f0       	breq	.+2      	; 0x155e <lcd_GotoRowColum+0x14>
    155c:	08 95       	ret
	case 0:
		lcd_vidSendCmd(0x80 + colum);
		break;
	case 1:
		/*Row 1*/
		lcd_vidSendCmd(0xC0 + colum);
    155e:	86 2f       	mov	r24, r22
    1560:	80 54       	subi	r24, 0x40	; 64
    1562:	0e 94 8c 0a 	call	0x1518	; 0x1518 <lcd_vidSendCmd>
    1566:	08 95       	ret

00001568 <lcd_vidSendData>:
	_delay_us(1);
	Dio_write(Dio_PORTB, Dio_pin3, Dio_LOW);
	_delay_ms(2);
}

void lcd_vidSendData(U8 data) {
    1568:	1f 93       	push	r17
    156a:	18 2f       	mov	r17, r24
	U8 loc_LSBData = data << 4;
	U8 loc_MSBData = data;
	Dio_write(Dio_PORTB, Dio_pin1, Dio_HIGH);
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	61 e0       	ldi	r22, 0x01	; 1
    1570:	41 e0       	ldi	r20, 0x01	; 1
    1572:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	Dio_writeChannelGroup(Dio_PORTA, loc_MSBData, 0xF0);
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	61 2f       	mov	r22, r17
    157a:	40 ef       	ldi	r20, 0xF0	; 240
    157c:	0e 94 3d 12 	call	0x247a	; 0x247a <Dio_writeChannelGroup>
	En_pluse();
    1580:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <En_pluse>
	Dio_writeChannelGroup(Dio_PORTA, loc_LSBData, 0xF0);
    1584:	12 95       	swap	r17
    1586:	10 7f       	andi	r17, 0xF0	; 240
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	61 2f       	mov	r22, r17
    158c:	40 ef       	ldi	r20, 0xF0	; 240
    158e:	0e 94 3d 12 	call	0x247a	; 0x247a <Dio_writeChannelGroup>
	En_pluse();
    1592:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <En_pluse>

}
    1596:	1f 91       	pop	r17
    1598:	08 95       	ret

0000159a <lcd_vidDisplayString>:
		lcd_vidSendData(loc_digit3 + 48);
		lcd_vidSendData(loc_digit2 + 48);
		lcd_vidSendData(loc_digit1 + 48);
	}
}
void lcd_vidDisplayString(U8 *str) {
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	ec 01       	movw	r28, r24
	while (*str != '\0') {
    15a0:	88 81       	ld	r24, Y
    15a2:	88 23       	and	r24, r24
    15a4:	31 f0       	breq	.+12     	; 0x15b2 <lcd_vidDisplayString+0x18>
		lcd_vidSendData(*str);
    15a6:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_vidSendData>
		str++;
    15aa:	21 96       	adiw	r28, 0x01	; 1
		lcd_vidSendData(loc_digit2 + 48);
		lcd_vidSendData(loc_digit1 + 48);
	}
}
void lcd_vidDisplayString(U8 *str) {
	while (*str != '\0') {
    15ac:	88 81       	ld	r24, Y
    15ae:	88 23       	and	r24, r24
    15b0:	d1 f7       	brne	.-12     	; 0x15a6 <lcd_vidDisplayString+0xc>
		lcd_vidSendData(*str);
		str++;
	}
}
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	08 95       	ret

000015b8 <lcd_vidDisplayNum>:
}
void lcd_vidDisplayChar(U8 chr) {
	lcd_vidSendData(chr);
}

void lcd_vidDisplayNum(U32 num) {
    15b8:	5f 92       	push	r5
    15ba:	6f 92       	push	r6
    15bc:	7f 92       	push	r7
    15be:	8f 92       	push	r8
    15c0:	9f 92       	push	r9
    15c2:	af 92       	push	r10
    15c4:	bf 92       	push	r11
    15c6:	cf 92       	push	r12
    15c8:	df 92       	push	r13
    15ca:	ef 92       	push	r14
    15cc:	ff 92       	push	r15
    15ce:	0f 93       	push	r16
    15d0:	1f 93       	push	r17
    15d2:	7b 01       	movw	r14, r22
    15d4:	8c 01       	movw	r16, r24
	U8 loc_digit1 = (num % 10);
    15d6:	2a e0       	ldi	r18, 0x0A	; 10
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 e0       	ldi	r20, 0x00	; 0
    15dc:	50 e0       	ldi	r21, 0x00	; 0
    15de:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__udivmodsi4>
    15e2:	d6 2e       	mov	r13, r22
	U8 loc_digit7 = (num / 1000000) % 10;
	U8 loc_digit8 = (num / 10000000) % 10;
	U8 loc_digit9 = (num / 100000000) % 10;
	U8 loc_digit10 = (num / 1000000000);

	if (num < 10) {
    15e4:	2a e0       	ldi	r18, 0x0A	; 10
    15e6:	e2 16       	cp	r14, r18
    15e8:	f1 04       	cpc	r15, r1
    15ea:	01 05       	cpc	r16, r1
    15ec:	11 05       	cpc	r17, r1
    15ee:	08 f4       	brcc	.+2      	; 0x15f2 <lcd_vidDisplayNum+0x3a>
    15f0:	11 c1       	rjmp	.+546    	; 0x1814 <lcd_vidDisplayNum+0x25c>
	lcd_vidSendData(chr);
}

void lcd_vidDisplayNum(U32 num) {
	U8 loc_digit1 = (num % 10);
	U8 loc_digit2 = (num / 10) % 10;
    15f2:	c8 01       	movw	r24, r16
    15f4:	b7 01       	movw	r22, r14
    15f6:	2a e0       	ldi	r18, 0x0A	; 10
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	40 e0       	ldi	r20, 0x00	; 0
    15fc:	50 e0       	ldi	r21, 0x00	; 0
    15fe:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__udivmodsi4>
    1602:	ca 01       	movw	r24, r20
    1604:	b9 01       	movw	r22, r18
    1606:	2a e0       	ldi	r18, 0x0A	; 10
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	40 e0       	ldi	r20, 0x00	; 0
    160c:	50 e0       	ldi	r21, 0x00	; 0
    160e:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__udivmodsi4>
    1612:	c6 2e       	mov	r12, r22
	U8 loc_digit9 = (num / 100000000) % 10;
	U8 loc_digit10 = (num / 1000000000);

	if (num < 10) {
		lcd_vidSendData(loc_digit1 + 48);
	} else if (num < 100 && num > 9) {
    1614:	d8 01       	movw	r26, r16
    1616:	c7 01       	movw	r24, r14
    1618:	0a 97       	sbiw	r24, 0x0a	; 10
    161a:	a1 09       	sbc	r26, r1
    161c:	b1 09       	sbc	r27, r1
    161e:	8a 35       	cpi	r24, 0x5A	; 90
    1620:	91 05       	cpc	r25, r1
    1622:	a1 05       	cpc	r26, r1
    1624:	b1 05       	cpc	r27, r1
    1626:	08 f4       	brcc	.+2      	; 0x162a <lcd_vidDisplayNum+0x72>
    1628:	f1 c0       	rjmp	.+482    	; 0x180c <lcd_vidDisplayNum+0x254>
}

void lcd_vidDisplayNum(U32 num) {
	U8 loc_digit1 = (num % 10);
	U8 loc_digit2 = (num / 10) % 10;
	U8 loc_digit3 = (num / 100) % 10;
    162a:	c8 01       	movw	r24, r16
    162c:	b7 01       	movw	r22, r14
    162e:	24 e6       	ldi	r18, 0x64	; 100
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e0       	ldi	r20, 0x00	; 0
    1634:	50 e0       	ldi	r21, 0x00	; 0
    1636:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__udivmodsi4>
    163a:	ca 01       	movw	r24, r20
    163c:	b9 01       	movw	r22, r18
    163e:	2a e0       	ldi	r18, 0x0A	; 10
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e0       	ldi	r20, 0x00	; 0
    1644:	50 e0       	ldi	r21, 0x00	; 0
    1646:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__udivmodsi4>
    164a:	b6 2e       	mov	r11, r22
	if (num < 10) {
		lcd_vidSendData(loc_digit1 + 48);
	} else if (num < 100 && num > 9) {
		lcd_vidSendData(loc_digit2 + 48);
		lcd_vidSendData(loc_digit1 + 48);
	} else if (num < 1000 && num > 99) {
    164c:	d8 01       	movw	r26, r16
    164e:	c7 01       	movw	r24, r14
    1650:	84 56       	subi	r24, 0x64	; 100
    1652:	90 40       	sbci	r25, 0x00	; 0
    1654:	a0 40       	sbci	r26, 0x00	; 0
    1656:	b0 40       	sbci	r27, 0x00	; 0
    1658:	84 58       	subi	r24, 0x84	; 132
    165a:	93 40       	sbci	r25, 0x03	; 3
    165c:	a0 40       	sbci	r26, 0x00	; 0
    165e:	b0 40       	sbci	r27, 0x00	; 0
    1660:	08 f4       	brcc	.+2      	; 0x1664 <lcd_vidDisplayNum+0xac>
    1662:	d0 c0       	rjmp	.+416    	; 0x1804 <lcd_vidDisplayNum+0x24c>

void lcd_vidDisplayNum(U32 num) {
	U8 loc_digit1 = (num % 10);
	U8 loc_digit2 = (num / 10) % 10;
	U8 loc_digit3 = (num / 100) % 10;
	U8 loc_digit4 = (num / 1000) % 10;
    1664:	c8 01       	movw	r24, r16
    1666:	b7 01       	movw	r22, r14
    1668:	28 ee       	ldi	r18, 0xE8	; 232
    166a:	33 e0       	ldi	r19, 0x03	; 3
    166c:	40 e0       	ldi	r20, 0x00	; 0
    166e:	50 e0       	ldi	r21, 0x00	; 0
    1670:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__udivmodsi4>
    1674:	ca 01       	movw	r24, r20
    1676:	b9 01       	movw	r22, r18
    1678:	2a e0       	ldi	r18, 0x0A	; 10
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e0       	ldi	r20, 0x00	; 0
    167e:	50 e0       	ldi	r21, 0x00	; 0
    1680:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__udivmodsi4>
    1684:	a6 2e       	mov	r10, r22
		lcd_vidSendData(loc_digit1 + 48);
	} else if (num < 1000 && num > 99) {
		lcd_vidSendData(loc_digit3 + 48);
		lcd_vidSendData(loc_digit2 + 48);
		lcd_vidSendData(loc_digit1 + 48);
	} else if (num < 10000 && num > 999) {
    1686:	d8 01       	movw	r26, r16
    1688:	c7 01       	movw	r24, r14
    168a:	88 5e       	subi	r24, 0xE8	; 232
    168c:	93 40       	sbci	r25, 0x03	; 3
    168e:	a0 40       	sbci	r26, 0x00	; 0
    1690:	b0 40       	sbci	r27, 0x00	; 0
    1692:	88 52       	subi	r24, 0x28	; 40
    1694:	93 42       	sbci	r25, 0x23	; 35
    1696:	a0 40       	sbci	r26, 0x00	; 0
    1698:	b0 40       	sbci	r27, 0x00	; 0
    169a:	08 f4       	brcc	.+2      	; 0x169e <lcd_vidDisplayNum+0xe6>
    169c:	af c0       	rjmp	.+350    	; 0x17fc <lcd_vidDisplayNum+0x244>
void lcd_vidDisplayNum(U32 num) {
	U8 loc_digit1 = (num % 10);
	U8 loc_digit2 = (num / 10) % 10;
	U8 loc_digit3 = (num / 100) % 10;
	U8 loc_digit4 = (num / 1000) % 10;
	U8 loc_digit5 = (num / 10000) % 10;
    169e:	c8 01       	movw	r24, r16
    16a0:	b7 01       	movw	r22, r14
    16a2:	20 e1       	ldi	r18, 0x10	; 16
    16a4:	37 e2       	ldi	r19, 0x27	; 39
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	50 e0       	ldi	r21, 0x00	; 0
    16aa:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__udivmodsi4>
    16ae:	ca 01       	movw	r24, r20
    16b0:	b9 01       	movw	r22, r18
    16b2:	2a e0       	ldi	r18, 0x0A	; 10
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e0       	ldi	r20, 0x00	; 0
    16b8:	50 e0       	ldi	r21, 0x00	; 0
    16ba:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__udivmodsi4>
    16be:	86 2e       	mov	r8, r22
	} else if (num < 10000 && num > 999) {
		lcd_vidSendData(loc_digit4 + 48);
		lcd_vidSendData(loc_digit3 + 48);
		lcd_vidSendData(loc_digit2 + 48);
		lcd_vidSendData(loc_digit1 + 48);
	} else if (num < 100000 && num > 9999) {
    16c0:	d8 01       	movw	r26, r16
    16c2:	c7 01       	movw	r24, r14
    16c4:	80 51       	subi	r24, 0x10	; 16
    16c6:	97 42       	sbci	r25, 0x27	; 39
    16c8:	a0 40       	sbci	r26, 0x00	; 0
    16ca:	b0 40       	sbci	r27, 0x00	; 0
    16cc:	80 59       	subi	r24, 0x90	; 144
    16ce:	9f 45       	sbci	r25, 0x5F	; 95
    16d0:	a1 40       	sbci	r26, 0x01	; 1
    16d2:	b0 40       	sbci	r27, 0x00	; 0
    16d4:	08 f4       	brcc	.+2      	; 0x16d8 <lcd_vidDisplayNum+0x120>
    16d6:	8e c0       	rjmp	.+284    	; 0x17f4 <lcd_vidDisplayNum+0x23c>
	U8 loc_digit1 = (num % 10);
	U8 loc_digit2 = (num / 10) % 10;
	U8 loc_digit3 = (num / 100) % 10;
	U8 loc_digit4 = (num / 1000) % 10;
	U8 loc_digit5 = (num / 10000) % 10;
	U8 loc_digit6 = (num / 100000) % 10;
    16d8:	c8 01       	movw	r24, r16
    16da:	b7 01       	movw	r22, r14
    16dc:	20 ea       	ldi	r18, 0xA0	; 160
    16de:	36 e8       	ldi	r19, 0x86	; 134
    16e0:	41 e0       	ldi	r20, 0x01	; 1
    16e2:	50 e0       	ldi	r21, 0x00	; 0
    16e4:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__udivmodsi4>
    16e8:	ca 01       	movw	r24, r20
    16ea:	b9 01       	movw	r22, r18
    16ec:	2a e0       	ldi	r18, 0x0A	; 10
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	40 e0       	ldi	r20, 0x00	; 0
    16f2:	50 e0       	ldi	r21, 0x00	; 0
    16f4:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__udivmodsi4>
    16f8:	56 2e       	mov	r5, r22
		lcd_vidSendData(loc_digit5 + 48);
		lcd_vidSendData(loc_digit4 + 48);
		lcd_vidSendData(loc_digit3 + 48);
		lcd_vidSendData(loc_digit2 + 48);
		lcd_vidSendData(loc_digit1 + 48);
	} else if (num < 1000000 && num > 99999) {
    16fa:	d8 01       	movw	r26, r16
    16fc:	c7 01       	movw	r24, r14
    16fe:	80 5a       	subi	r24, 0xA0	; 160
    1700:	96 48       	sbci	r25, 0x86	; 134
    1702:	a1 40       	sbci	r26, 0x01	; 1
    1704:	b0 40       	sbci	r27, 0x00	; 0
    1706:	80 5a       	subi	r24, 0xA0	; 160
    1708:	9b 4b       	sbci	r25, 0xBB	; 187
    170a:	ad 40       	sbci	r26, 0x0D	; 13
    170c:	b0 40       	sbci	r27, 0x00	; 0
    170e:	08 f4       	brcc	.+2      	; 0x1712 <lcd_vidDisplayNum+0x15a>
    1710:	6d c0       	rjmp	.+218    	; 0x17ec <lcd_vidDisplayNum+0x234>
	U8 loc_digit2 = (num / 10) % 10;
	U8 loc_digit3 = (num / 100) % 10;
	U8 loc_digit4 = (num / 1000) % 10;
	U8 loc_digit5 = (num / 10000) % 10;
	U8 loc_digit6 = (num / 100000) % 10;
	U8 loc_digit7 = (num / 1000000) % 10;
    1712:	c8 01       	movw	r24, r16
    1714:	b7 01       	movw	r22, r14
    1716:	20 e4       	ldi	r18, 0x40	; 64
    1718:	32 e4       	ldi	r19, 0x42	; 66
    171a:	4f e0       	ldi	r20, 0x0F	; 15
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__udivmodsi4>
    1722:	ca 01       	movw	r24, r20
    1724:	b9 01       	movw	r22, r18
    1726:	2a e0       	ldi	r18, 0x0A	; 10
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	40 e0       	ldi	r20, 0x00	; 0
    172c:	50 e0       	ldi	r21, 0x00	; 0
    172e:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__udivmodsi4>
    1732:	76 2e       	mov	r7, r22
		lcd_vidSendData(loc_digit5 + 48);
		lcd_vidSendData(loc_digit4 + 48);
		lcd_vidSendData(loc_digit3 + 48);
		lcd_vidSendData(loc_digit2 + 48);
		lcd_vidSendData(loc_digit1 + 48);
	} else if (num < 10000000 && num > 999999) {
    1734:	d8 01       	movw	r26, r16
    1736:	c7 01       	movw	r24, r14
    1738:	80 54       	subi	r24, 0x40	; 64
    173a:	92 44       	sbci	r25, 0x42	; 66
    173c:	af 40       	sbci	r26, 0x0F	; 15
    173e:	b0 40       	sbci	r27, 0x00	; 0
    1740:	80 54       	subi	r24, 0x40	; 64
    1742:	94 45       	sbci	r25, 0x54	; 84
    1744:	a9 48       	sbci	r26, 0x89	; 137
    1746:	b0 40       	sbci	r27, 0x00	; 0
    1748:	08 f4       	brcc	.+2      	; 0x174c <lcd_vidDisplayNum+0x194>
    174a:	4c c0       	rjmp	.+152    	; 0x17e4 <lcd_vidDisplayNum+0x22c>
	U8 loc_digit3 = (num / 100) % 10;
	U8 loc_digit4 = (num / 1000) % 10;
	U8 loc_digit5 = (num / 10000) % 10;
	U8 loc_digit6 = (num / 100000) % 10;
	U8 loc_digit7 = (num / 1000000) % 10;
	U8 loc_digit8 = (num / 10000000) % 10;
    174c:	c8 01       	movw	r24, r16
    174e:	b7 01       	movw	r22, r14
    1750:	20 e8       	ldi	r18, 0x80	; 128
    1752:	36 e9       	ldi	r19, 0x96	; 150
    1754:	48 e9       	ldi	r20, 0x98	; 152
    1756:	50 e0       	ldi	r21, 0x00	; 0
    1758:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__udivmodsi4>
    175c:	ca 01       	movw	r24, r20
    175e:	b9 01       	movw	r22, r18
    1760:	2a e0       	ldi	r18, 0x0A	; 10
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e0       	ldi	r20, 0x00	; 0
    1766:	50 e0       	ldi	r21, 0x00	; 0
    1768:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__udivmodsi4>
    176c:	96 2e       	mov	r9, r22
		lcd_vidSendData(loc_digit5 + 48);
		lcd_vidSendData(loc_digit4 + 48);
		lcd_vidSendData(loc_digit3 + 48);
		lcd_vidSendData(loc_digit2 + 48);
		lcd_vidSendData(loc_digit1 + 48);
	} else if (num < 100000000 && num > 9999999) {
    176e:	d8 01       	movw	r26, r16
    1770:	c7 01       	movw	r24, r14
    1772:	80 58       	subi	r24, 0x80	; 128
    1774:	96 49       	sbci	r25, 0x96	; 150
    1776:	a8 49       	sbci	r26, 0x98	; 152
    1778:	b0 40       	sbci	r27, 0x00	; 0
    177a:	80 58       	subi	r24, 0x80	; 128
    177c:	9a 44       	sbci	r25, 0x4A	; 74
    177e:	ad 45       	sbci	r26, 0x5D	; 93
    1780:	b5 40       	sbci	r27, 0x05	; 5
    1782:	60 f1       	brcs	.+88     	; 0x17dc <lcd_vidDisplayNum+0x224>
	U8 loc_digit4 = (num / 1000) % 10;
	U8 loc_digit5 = (num / 10000) % 10;
	U8 loc_digit6 = (num / 100000) % 10;
	U8 loc_digit7 = (num / 1000000) % 10;
	U8 loc_digit8 = (num / 10000000) % 10;
	U8 loc_digit9 = (num / 100000000) % 10;
    1784:	c8 01       	movw	r24, r16
    1786:	b7 01       	movw	r22, r14
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	31 ee       	ldi	r19, 0xE1	; 225
    178c:	45 ef       	ldi	r20, 0xF5	; 245
    178e:	55 e0       	ldi	r21, 0x05	; 5
    1790:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__udivmodsi4>
    1794:	ca 01       	movw	r24, r20
    1796:	b9 01       	movw	r22, r18
    1798:	2a e0       	ldi	r18, 0x0A	; 10
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e0       	ldi	r20, 0x00	; 0
    179e:	50 e0       	ldi	r21, 0x00	; 0
    17a0:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__udivmodsi4>
    17a4:	66 2e       	mov	r6, r22
		lcd_vidSendData(loc_digit5 + 48);
		lcd_vidSendData(loc_digit4 + 48);
		lcd_vidSendData(loc_digit3 + 48);
		lcd_vidSendData(loc_digit2 + 48);
		lcd_vidSendData(loc_digit1 + 48);
	} else if (num < 1000000000 && num > 99999999) {
    17a6:	d8 01       	movw	r26, r16
    17a8:	c7 01       	movw	r24, r14
    17aa:	80 50       	subi	r24, 0x00	; 0
    17ac:	91 4e       	sbci	r25, 0xE1	; 225
    17ae:	a5 4f       	sbci	r26, 0xF5	; 245
    17b0:	b5 40       	sbci	r27, 0x05	; 5
    17b2:	80 50       	subi	r24, 0x00	; 0
    17b4:	99 4e       	sbci	r25, 0xE9	; 233
    17b6:	a4 4a       	sbci	r26, 0xA4	; 164
    17b8:	b5 43       	sbci	r27, 0x35	; 53
    17ba:	60 f0       	brcs	.+24     	; 0x17d4 <lcd_vidDisplayNum+0x21c>
		lcd_vidSendData(loc_digit4 + 48);
		lcd_vidSendData(loc_digit3 + 48);
		lcd_vidSendData(loc_digit2 + 48);
		lcd_vidSendData(loc_digit1 + 48);
	} else {
		lcd_vidSendData(loc_digit10 + 48);
    17bc:	c8 01       	movw	r24, r16
    17be:	b7 01       	movw	r22, r14
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	3a ec       	ldi	r19, 0xCA	; 202
    17c4:	4a e9       	ldi	r20, 0x9A	; 154
    17c6:	5b e3       	ldi	r21, 0x3B	; 59
    17c8:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__udivmodsi4>
    17cc:	82 2f       	mov	r24, r18
    17ce:	80 5d       	subi	r24, 0xD0	; 208
    17d0:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_vidSendData>
		lcd_vidSendData(loc_digit9 + 48);
    17d4:	86 2d       	mov	r24, r6
    17d6:	80 5d       	subi	r24, 0xD0	; 208
    17d8:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_vidSendData>
		lcd_vidSendData(loc_digit8 + 48);
    17dc:	89 2d       	mov	r24, r9
    17de:	80 5d       	subi	r24, 0xD0	; 208
    17e0:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_vidSendData>
		lcd_vidSendData(loc_digit7 + 48);
    17e4:	87 2d       	mov	r24, r7
    17e6:	80 5d       	subi	r24, 0xD0	; 208
    17e8:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_vidSendData>
		lcd_vidSendData(loc_digit6 + 48);
    17ec:	85 2d       	mov	r24, r5
    17ee:	80 5d       	subi	r24, 0xD0	; 208
    17f0:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_vidSendData>
		lcd_vidSendData(loc_digit5 + 48);
    17f4:	88 2d       	mov	r24, r8
    17f6:	80 5d       	subi	r24, 0xD0	; 208
    17f8:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_vidSendData>
		lcd_vidSendData(loc_digit4 + 48);
    17fc:	8a 2d       	mov	r24, r10
    17fe:	80 5d       	subi	r24, 0xD0	; 208
    1800:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_vidSendData>
		lcd_vidSendData(loc_digit3 + 48);
    1804:	8b 2d       	mov	r24, r11
    1806:	80 5d       	subi	r24, 0xD0	; 208
    1808:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_vidSendData>
		lcd_vidSendData(loc_digit2 + 48);
    180c:	8c 2d       	mov	r24, r12
    180e:	80 5d       	subi	r24, 0xD0	; 208
    1810:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_vidSendData>
		lcd_vidSendData(loc_digit1 + 48);
    1814:	8d 2d       	mov	r24, r13
    1816:	80 5d       	subi	r24, 0xD0	; 208
    1818:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_vidSendData>
	}
}
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	ff 90       	pop	r15
    1822:	ef 90       	pop	r14
    1824:	df 90       	pop	r13
    1826:	cf 90       	pop	r12
    1828:	bf 90       	pop	r11
    182a:	af 90       	pop	r10
    182c:	9f 90       	pop	r9
    182e:	8f 90       	pop	r8
    1830:	7f 90       	pop	r7
    1832:	6f 90       	pop	r6
    1834:	5f 90       	pop	r5
    1836:	08 95       	ret

00001838 <lcd_vidDisplauFloatNum>:
		break;
	}

}

void lcd_vidDisplauFloatNum(F32 num) {
    1838:	af 92       	push	r10
    183a:	bf 92       	push	r11
    183c:	cf 92       	push	r12
    183e:	df 92       	push	r13
    1840:	ef 92       	push	r14
    1842:	ff 92       	push	r15
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	5b 01       	movw	r10, r22
    184a:	6c 01       	movw	r12, r24

	lcd_vidDisplayNum(num);
    184c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1850:	7b 01       	movw	r14, r22
    1852:	8c 01       	movw	r16, r24
    1854:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <lcd_vidDisplayNum>
	lcd_vidSendData('.');
    1858:	8e e2       	ldi	r24, 0x2E	; 46
    185a:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_vidSendData>
	U32 Int_value = num;
	F32 float_value = (num - Int_value);
	U32 final_int=float_value*100000;
    185e:	c8 01       	movw	r24, r16
    1860:	b7 01       	movw	r22, r14
    1862:	0e 94 a7 04 	call	0x94e	; 0x94e <__floatunsisf>
    1866:	9b 01       	movw	r18, r22
    1868:	ac 01       	movw	r20, r24
    186a:	c6 01       	movw	r24, r12
    186c:	b5 01       	movw	r22, r10
    186e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e5       	ldi	r19, 0x50	; 80
    1876:	43 ec       	ldi	r20, 0xC3	; 195
    1878:	57 e4       	ldi	r21, 0x47	; 71
    187a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1882:	e6 2e       	mov	r14, r22
    1884:	a7 2e       	mov	r10, r23
    1886:	18 2f       	mov	r17, r24
    1888:	09 2f       	mov	r16, r25
    188a:	ff 24       	eor	r15, r15
	U8 count=0;
	for(count=0;count<5;count++){
		if(final_int%10==0){
    188c:	6e 2d       	mov	r22, r14
    188e:	7a 2d       	mov	r23, r10
    1890:	81 2f       	mov	r24, r17
    1892:	90 2f       	mov	r25, r16
    1894:	2a e0       	ldi	r18, 0x0A	; 10
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	50 e0       	ldi	r21, 0x00	; 0
    189c:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__udivmodsi4>
    18a0:	61 15       	cp	r22, r1
    18a2:	71 05       	cpc	r23, r1
    18a4:	81 05       	cpc	r24, r1
    18a6:	91 05       	cpc	r25, r1
    18a8:	91 f4       	brne	.+36     	; 0x18ce <lcd_vidDisplauFloatNum+0x96>
			final_int=final_int/10;
    18aa:	6e 2d       	mov	r22, r14
    18ac:	7a 2d       	mov	r23, r10
    18ae:	81 2f       	mov	r24, r17
    18b0:	90 2f       	mov	r25, r16
    18b2:	2a e0       	ldi	r18, 0x0A	; 10
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e0       	ldi	r20, 0x00	; 0
    18b8:	50 e0       	ldi	r21, 0x00	; 0
    18ba:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__udivmodsi4>
    18be:	e2 2e       	mov	r14, r18
    18c0:	a3 2e       	mov	r10, r19
    18c2:	14 2f       	mov	r17, r20
    18c4:	05 2f       	mov	r16, r21
	lcd_vidSendData('.');
	U32 Int_value = num;
	F32 float_value = (num - Int_value);
	U32 final_int=float_value*100000;
	U8 count=0;
	for(count=0;count<5;count++){
    18c6:	f3 94       	inc	r15
    18c8:	85 e0       	ldi	r24, 0x05	; 5
    18ca:	f8 16       	cp	r15, r24
    18cc:	f9 f6       	brne	.-66     	; 0x188c <lcd_vidDisplauFloatNum+0x54>
			final_int=final_int/10;
		}else{
			break;
		}
	}
lcd_vidDisplayNum(final_int);
    18ce:	6e 2d       	mov	r22, r14
    18d0:	7a 2d       	mov	r23, r10
    18d2:	81 2f       	mov	r24, r17
    18d4:	90 2f       	mov	r25, r16
    18d6:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <lcd_vidDisplayNum>
}
    18da:	1f 91       	pop	r17
    18dc:	0f 91       	pop	r16
    18de:	ff 90       	pop	r15
    18e0:	ef 90       	pop	r14
    18e2:	df 90       	pop	r13
    18e4:	cf 90       	pop	r12
    18e6:	bf 90       	pop	r11
    18e8:	af 90       	pop	r10
    18ea:	08 95       	ret

000018ec <lcd_vidDisplayChar>:
	En_pluse();
	Dio_writeChannelGroup(Dio_PORTA, loc_LSBCmd, 0xF0);
	En_pluse();
}
void lcd_vidDisplayChar(U8 chr) {
	lcd_vidSendData(chr);
    18ec:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_vidSendData>
}
    18f0:	08 95       	ret

000018f2 <lcd_Init>:
 * D6->PA6
 * D7->PA7
 * */

void lcd_Init(void) {
	Dio_config(Dio_PORTB, Dio_pin1, OUTPUT);
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	61 e0       	ldi	r22, 0x01	; 1
    18f6:	41 e0       	ldi	r20, 0x01	; 1
    18f8:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	Dio_config(Dio_PORTB, Dio_pin2, OUTPUT);
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	62 e0       	ldi	r22, 0x02	; 2
    1900:	41 e0       	ldi	r20, 0x01	; 1
    1902:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	Dio_config(Dio_PORTB, Dio_pin3, OUTPUT);
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	63 e0       	ldi	r22, 0x03	; 3
    190a:	41 e0       	ldi	r20, 0x01	; 1
    190c:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>

	Dio_config(Dio_PORTA, Dio_pin4, OUTPUT);
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	64 e0       	ldi	r22, 0x04	; 4
    1914:	41 e0       	ldi	r20, 0x01	; 1
    1916:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	Dio_config(Dio_PORTA, Dio_pin5, OUTPUT);
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	65 e0       	ldi	r22, 0x05	; 5
    191e:	41 e0       	ldi	r20, 0x01	; 1
    1920:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	Dio_config(Dio_PORTA, Dio_pin6, OUTPUT);
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	66 e0       	ldi	r22, 0x06	; 6
    1928:	41 e0       	ldi	r20, 0x01	; 1
    192a:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	Dio_config(Dio_PORTA, Dio_pin7, OUTPUT);
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	67 e0       	ldi	r22, 0x07	; 7
    1932:	41 e0       	ldi	r20, 0x01	; 1
    1934:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>

	Dio_write(Dio_PORTB, Dio_pin2, Dio_LOW);
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	62 e0       	ldi	r22, 0x02	; 2
    193c:	40 e0       	ldi	r20, 0x00	; 0
    193e:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
    1942:	80 e6       	ldi	r24, 0x60	; 96
    1944:	9a ee       	ldi	r25, 0xEA	; 234
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	f1 f7       	brne	.-4      	; 0x1946 <lcd_Init+0x54>
	_delay_ms(15);
	lcd_vidSendCmd(0x03);
    194a:	83 e0       	ldi	r24, 0x03	; 3
    194c:	0e 94 8c 0a 	call	0x1518	; 0x1518 <lcd_vidSendCmd>
    1950:	80 e2       	ldi	r24, 0x20	; 32
    1952:	9e e4       	ldi	r25, 0x4E	; 78
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	f1 f7       	brne	.-4      	; 0x1954 <lcd_Init+0x62>
	_delay_ms(5);
	lcd_vidSendCmd(0x03);
    1958:	83 e0       	ldi	r24, 0x03	; 3
    195a:	0e 94 8c 0a 	call	0x1518	; 0x1518 <lcd_vidSendCmd>
    195e:	80 e9       	ldi	r24, 0x90	; 144
    1960:	91 e0       	ldi	r25, 0x01	; 1
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <lcd_Init+0x70>
	_delay_us(100);
	lcd_vidSendCmd(0x03);
    1966:	83 e0       	ldi	r24, 0x03	; 3
    1968:	0e 94 8c 0a 	call	0x1518	; 0x1518 <lcd_vidSendCmd>
	lcd_vidSendCmd(0x02);
    196c:	82 e0       	ldi	r24, 0x02	; 2
    196e:	0e 94 8c 0a 	call	0x1518	; 0x1518 <lcd_vidSendCmd>
	lcd_vidSendCmd(_LCD_4BIT_MODE);
    1972:	88 e2       	ldi	r24, 0x28	; 40
    1974:	0e 94 8c 0a 	call	0x1518	; 0x1518 <lcd_vidSendCmd>
	lcd_GotoRowColum(0, 0);
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	60 e0       	ldi	r22, 0x00	; 0
    197c:	0e 94 a5 0a 	call	0x154a	; 0x154a <lcd_GotoRowColum>
}
    1980:	08 95       	ret

00001982 <SSD_disNum_scd>:
		SSD_disNum(num);
		_delay_ms(1);
	}
}

void SSD_disNum_scd(U8 num) {
    1982:	1f 93       	push	r17
    1984:	18 2f       	mov	r17, r24
	U8 loc_digit1 = (num % 10) << 4;
	U8 loc_digit2 = (num / 10) << 4;
	static boolen Loc_digitSwitch =TRUE ;
	if (Loc_digitSwitch==TRUE) {
    1986:	80 91 96 01 	lds	r24, 0x0196
    198a:	81 30       	cpi	r24, 0x01	; 1
    198c:	d1 f0       	breq	.+52     	; 0x19c2 <SSD_disNum_scd+0x40>
		Dio_writeChannelGroup(Dio_PORTA, loc_digit1, 0xF0);
		//-------------------
		Loc_digitSwitch =FALSE;
	} else  {
		//disable ssd1
		Dio_write(Dio_PORTB, Dio_pin1, Dio_LOW);
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	61 e0       	ldi	r22, 0x01	; 1
    1992:	40 e0       	ldi	r20, 0x00	; 0
    1994:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
		//enable ssd2
		Dio_write(Dio_PORTB, Dio_pin2, Dio_HIGH);
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	62 e0       	ldi	r22, 0x02	; 2
    199c:	41 e0       	ldi	r20, 0x01	; 1
    199e:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
		//send digit 2
		Dio_writeChannelGroup(Dio_PORTA, loc_digit2, 0xF0);
    19a2:	81 2f       	mov	r24, r17
    19a4:	6a e0       	ldi	r22, 0x0A	; 10
    19a6:	0e 94 ba 12 	call	0x2574	; 0x2574 <__udivmodqi4>
    19aa:	68 2f       	mov	r22, r24
    19ac:	62 95       	swap	r22
    19ae:	60 7f       	andi	r22, 0xF0	; 240
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	40 ef       	ldi	r20, 0xF0	; 240
    19b4:	0e 94 3d 12 	call	0x247a	; 0x247a <Dio_writeChannelGroup>
		//-------------------
		Loc_digitSwitch =TRUE;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	80 93 96 01 	sts	0x0196, r24
	}


}
    19be:	1f 91       	pop	r17
    19c0:	08 95       	ret
	U8 loc_digit1 = (num % 10) << 4;
	U8 loc_digit2 = (num / 10) << 4;
	static boolen Loc_digitSwitch =TRUE ;
	if (Loc_digitSwitch==TRUE) {
		//enable ssd1
		Dio_write(Dio_PORTB, Dio_pin1, Dio_HIGH);
    19c2:	61 e0       	ldi	r22, 0x01	; 1
    19c4:	41 e0       	ldi	r20, 0x01	; 1
    19c6:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
		//disable ssd2
		Dio_write(Dio_PORTB, Dio_pin2, Dio_LOW);
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	62 e0       	ldi	r22, 0x02	; 2
    19ce:	40 e0       	ldi	r20, 0x00	; 0
    19d0:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
		//send digit 1
		Dio_writeChannelGroup(Dio_PORTA, loc_digit1, 0xF0);
    19d4:	81 2f       	mov	r24, r17
    19d6:	6a e0       	ldi	r22, 0x0A	; 10
    19d8:	0e 94 ba 12 	call	0x2574	; 0x2574 <__udivmodqi4>
    19dc:	92 95       	swap	r25
    19de:	90 7f       	andi	r25, 0xF0	; 240
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	69 2f       	mov	r22, r25
    19e4:	40 ef       	ldi	r20, 0xF0	; 240
    19e6:	0e 94 3d 12 	call	0x247a	; 0x247a <Dio_writeChannelGroup>
		//-------------------
		Loc_digitSwitch =FALSE;
    19ea:	10 92 96 01 	sts	0x0196, r1
		//-------------------
		Loc_digitSwitch =TRUE;
	}


}
    19ee:	1f 91       	pop	r17
    19f0:	08 95       	ret

000019f2 <SSD_disNum>:
	Dio_config(Dio_PORTA, Dio_pin7, OUTPUT);
	//control lines
	Dio_config(Dio_PORTB, Dio_pin1, OUTPUT);
	Dio_config(Dio_PORTB, Dio_pin2, OUTPUT);
}
void SSD_disNum(U8 num) {
    19f2:	ff 92       	push	r15
    19f4:	0f 93       	push	r16
    19f6:	1f 93       	push	r17
    19f8:	f8 2e       	mov	r15, r24
	U8 loc_digit1 = (num % 10) << 4;
	U8 loc_digit2 = (num / 10) << 4;
	//enable ssd1
	Dio_write(Dio_PORTB, Dio_pin1, Dio_HIGH);
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	61 e0       	ldi	r22, 0x01	; 1
    19fe:	41 e0       	ldi	r20, 0x01	; 1
    1a00:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	//disable ssd2
	Dio_write(Dio_PORTB, Dio_pin2, Dio_LOW);
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	62 e0       	ldi	r22, 0x02	; 2
    1a08:	40 e0       	ldi	r20, 0x00	; 0
    1a0a:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	//send digit 1
	Dio_writeChannelGroup(Dio_PORTA, loc_digit1, 0xF0);
    1a0e:	8f 2d       	mov	r24, r15
    1a10:	6a e0       	ldi	r22, 0x0A	; 10
    1a12:	0e 94 ba 12 	call	0x2574	; 0x2574 <__udivmodqi4>
    1a16:	92 95       	swap	r25
    1a18:	90 7f       	andi	r25, 0xF0	; 240
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	69 2f       	mov	r22, r25
    1a1e:	40 ef       	ldi	r20, 0xF0	; 240
    1a20:	0e 94 3d 12 	call	0x247a	; 0x247a <Dio_writeChannelGroup>
    1a24:	00 e2       	ldi	r16, 0x20	; 32
    1a26:	1e e4       	ldi	r17, 0x4E	; 78
    1a28:	c8 01       	movw	r24, r16
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	f1 f7       	brne	.-4      	; 0x1a2a <SSD_disNum+0x38>
	_delay_ms(5);
	//disable ssd1
	Dio_write(Dio_PORTB, Dio_pin1, Dio_LOW);
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	61 e0       	ldi	r22, 0x01	; 1
    1a32:	40 e0       	ldi	r20, 0x00	; 0
    1a34:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	//enable ssd2
	Dio_write(Dio_PORTB, Dio_pin2, Dio_HIGH);
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	62 e0       	ldi	r22, 0x02	; 2
    1a3c:	41 e0       	ldi	r20, 0x01	; 1
    1a3e:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
	//send digit 2
	Dio_writeChannelGroup(Dio_PORTA, loc_digit2, 0xF0);
    1a42:	8f 2d       	mov	r24, r15
    1a44:	6a e0       	ldi	r22, 0x0A	; 10
    1a46:	0e 94 ba 12 	call	0x2574	; 0x2574 <__udivmodqi4>
    1a4a:	68 2f       	mov	r22, r24
    1a4c:	62 95       	swap	r22
    1a4e:	60 7f       	andi	r22, 0xF0	; 240
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	40 ef       	ldi	r20, 0xF0	; 240
    1a54:	0e 94 3d 12 	call	0x247a	; 0x247a <Dio_writeChannelGroup>
    1a58:	c8 01       	movw	r24, r16
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <SSD_disNum+0x68>
	_delay_ms(5);
}
    1a5e:	1f 91       	pop	r17
    1a60:	0f 91       	pop	r16
    1a62:	ff 90       	pop	r15
    1a64:	08 95       	ret

00001a66 <SSD_disNumWithDelay>:

void SSD_disNumWithDelay(U8 num, U32 delay) {
    1a66:	9f 92       	push	r9
    1a68:	af 92       	push	r10
    1a6a:	bf 92       	push	r11
    1a6c:	cf 92       	push	r12
    1a6e:	df 92       	push	r13
    1a70:	ef 92       	push	r14
    1a72:	ff 92       	push	r15
    1a74:	0f 93       	push	r16
    1a76:	1f 93       	push	r17
    1a78:	cf 93       	push	r28
    1a7a:	df 93       	push	r29
    1a7c:	98 2e       	mov	r9, r24
    1a7e:	5a 01       	movw	r10, r20
    1a80:	6b 01       	movw	r12, r22
	U32 count;
	for (count = 1; count <= delay; count += 11) {
    1a82:	41 15       	cp	r20, r1
    1a84:	51 05       	cpc	r21, r1
    1a86:	61 05       	cpc	r22, r1
    1a88:	71 05       	cpc	r23, r1
    1a8a:	d1 f0       	breq	.+52     	; 0x1ac0 <SSD_disNumWithDelay+0x5a>
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	e8 2e       	mov	r14, r24
    1a90:	f1 2c       	mov	r15, r1
    1a92:	01 2d       	mov	r16, r1
    1a94:	11 2d       	mov	r17, r1
    1a96:	c0 ea       	ldi	r28, 0xA0	; 160
    1a98:	df e0       	ldi	r29, 0x0F	; 15
		SSD_disNum(num);
    1a9a:	89 2d       	mov	r24, r9
    1a9c:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <SSD_disNum>
    1aa0:	ce 01       	movw	r24, r28
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	f1 f7       	brne	.-4      	; 0x1aa2 <SSD_disNumWithDelay+0x3c>
	_delay_ms(5);
}

void SSD_disNumWithDelay(U8 num, U32 delay) {
	U32 count;
	for (count = 1; count <= delay; count += 11) {
    1aa6:	8b e0       	ldi	r24, 0x0B	; 11
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	a0 e0       	ldi	r26, 0x00	; 0
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e8 0e       	add	r14, r24
    1ab0:	f9 1e       	adc	r15, r25
    1ab2:	0a 1f       	adc	r16, r26
    1ab4:	1b 1f       	adc	r17, r27
    1ab6:	ae 14       	cp	r10, r14
    1ab8:	bf 04       	cpc	r11, r15
    1aba:	c0 06       	cpc	r12, r16
    1abc:	d1 06       	cpc	r13, r17
    1abe:	68 f7       	brcc	.-38     	; 0x1a9a <SSD_disNumWithDelay+0x34>
		SSD_disNum(num);
		_delay_ms(1);
	}
}
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	1f 91       	pop	r17
    1ac6:	0f 91       	pop	r16
    1ac8:	ff 90       	pop	r15
    1aca:	ef 90       	pop	r14
    1acc:	df 90       	pop	r13
    1ace:	cf 90       	pop	r12
    1ad0:	bf 90       	pop	r11
    1ad2:	af 90       	pop	r10
    1ad4:	9f 90       	pop	r9
    1ad6:	08 95       	ret

00001ad8 <SSD_Init>:
 */
#include "SSD.h"
U32 Time_ms = 0;
void SSD_Init() {
	///Data lines
	Dio_config(Dio_PORTA, Dio_pin4, OUTPUT);
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	64 e0       	ldi	r22, 0x04	; 4
    1adc:	41 e0       	ldi	r20, 0x01	; 1
    1ade:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	Dio_config(Dio_PORTA, Dio_pin5, OUTPUT);
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	65 e0       	ldi	r22, 0x05	; 5
    1ae6:	41 e0       	ldi	r20, 0x01	; 1
    1ae8:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	Dio_config(Dio_PORTA, Dio_pin6, OUTPUT);
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	66 e0       	ldi	r22, 0x06	; 6
    1af0:	41 e0       	ldi	r20, 0x01	; 1
    1af2:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	Dio_config(Dio_PORTA, Dio_pin7, OUTPUT);
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	67 e0       	ldi	r22, 0x07	; 7
    1afa:	41 e0       	ldi	r20, 0x01	; 1
    1afc:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	//control lines
	Dio_config(Dio_PORTB, Dio_pin1, OUTPUT);
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	61 e0       	ldi	r22, 0x01	; 1
    1b04:	41 e0       	ldi	r20, 0x01	; 1
    1b06:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	Dio_config(Dio_PORTB, Dio_pin2, OUTPUT);
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	62 e0       	ldi	r22, 0x02	; 2
    1b0e:	41 e0       	ldi	r20, 0x01	; 1
    1b10:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
}
    1b14:	08 95       	ret

00001b16 <Buzzer_off>:
void Buzzer_on(){
	Dio_write(Dio_PORTA,Dio_pin3,Dio_HIGH);
}

void Buzzer_off(){
	Dio_write(Dio_PORTA,Dio_pin3,Dio_LOW);
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	63 e0       	ldi	r22, 0x03	; 3
    1b1a:	40 e0       	ldi	r20, 0x00	; 0
    1b1c:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
}
    1b20:	08 95       	ret

00001b22 <Buzzer_on>:
void Buzzer_Init(){
	Dio_config(Dio_PORTA,Dio_pin3,OUTPUT);
}

void Buzzer_on(){
	Dio_write(Dio_PORTA,Dio_pin3,Dio_HIGH);
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	63 e0       	ldi	r22, 0x03	; 3
    1b26:	41 e0       	ldi	r20, 0x01	; 1
    1b28:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
}
    1b2c:	08 95       	ret

00001b2e <Buzzer_Init>:
 *      Author: Ahmed abdel Gawad
 */
#include "Buzzer.h"

void Buzzer_Init(){
	Dio_config(Dio_PORTA,Dio_pin3,OUTPUT);
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	63 e0       	ldi	r22, 0x03	; 3
    1b32:	41 e0       	ldi	r20, 0x01	; 1
    1b34:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
}
    1b38:	08 95       	ret

00001b3a <Relay_off>:
}
void Relay_on(){
	Dio_write(Dio_PORTA,Dio_pin2,Dio_HIGH);
}
void Relay_off(){
	Dio_write(Dio_PORTA,Dio_pin2,Dio_LOW);
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	62 e0       	ldi	r22, 0x02	; 2
    1b3e:	40 e0       	ldi	r20, 0x00	; 0
    1b40:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
}
    1b44:	08 95       	ret

00001b46 <Relay_on>:

void Relay_Init(){
	Dio_config(Dio_PORTA,Dio_pin2,OUTPUT);
}
void Relay_on(){
	Dio_write(Dio_PORTA,Dio_pin2,Dio_HIGH);
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	62 e0       	ldi	r22, 0x02	; 2
    1b4a:	41 e0       	ldi	r20, 0x01	; 1
    1b4c:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
}
    1b50:	08 95       	ret

00001b52 <Relay_Init>:
 *      Author: Ahmed abdel Gawad
 */
#include "Relay.h"

void Relay_Init(){
	Dio_config(Dio_PORTA,Dio_pin2,OUTPUT);
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	62 e0       	ldi	r22, 0x02	; 2
    1b56:	41 e0       	ldi	r20, 0x01	; 1
    1b58:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
}
    1b5c:	08 95       	ret

00001b5e <Button_Read>:
	Dio_config(BT2_PORT, BT2_PIN, INPUT);
}

Button_state Button_Read(Button_t BT) {
	Button_state loc_read=0;
	switch (BT) {
    1b5e:	81 30       	cpi	r24, 0x01	; 1
    1b60:	59 f0       	breq	.+22     	; 0x1b78 <Button_Read+0x1a>
    1b62:	81 30       	cpi	r24, 0x01	; 1
    1b64:	20 f0       	brcs	.+8      	; 0x1b6e <Button_Read+0x10>
    1b66:	82 30       	cpi	r24, 0x02	; 2
    1b68:	61 f0       	breq	.+24     	; 0x1b82 <Button_Read+0x24>
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	08 95       	ret
	case BT0:
#if(BT0_Con == PULL_DOWN)
		loc_read = Dio_read(BT0_PORT, BT0_PIN);
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	60 e0       	ldi	r22, 0x00	; 0
    1b72:	0e 94 0f 12 	call	0x241e	; 0x241e <Dio_read>
    1b76:	08 95       	ret
		loc_read=!Dio_read(BT0_PORT,BT0_PIN);
#endif
		break;
	case BT1:
#if(BT1_Con == PULL_DOWN)
		loc_read = Dio_read(BT1_PORT, BT1_PIN);
    1b78:	83 e0       	ldi	r24, 0x03	; 3
    1b7a:	66 e0       	ldi	r22, 0x06	; 6
    1b7c:	0e 94 0f 12 	call	0x241e	; 0x241e <Dio_read>
    1b80:	08 95       	ret
		loc_read=!Dio_read(BT1_PORT,BT1_PIN);
#endif
		break;
	case BT2:
#if(BT2_Con==PULL_DOWN)
		loc_read = Dio_read(BT2_PORT, BT2_PIN);
    1b82:	83 e0       	ldi	r24, 0x03	; 3
    1b84:	62 e0       	ldi	r22, 0x02	; 2
    1b86:	0e 94 0f 12 	call	0x241e	; 0x241e <Dio_read>
#endif
		break;
	}
	return loc_read;

}
    1b8a:	08 95       	ret

00001b8c <Button_Init>:
 *  Created on: Dec 25, 2021
 *      Author: Ahmed abdel Gawad
 */
#include "Button.h"
void Button_Init() {
	Dio_config(BT0_PORT, BT0_PIN, INPUT);
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	60 e0       	ldi	r22, 0x00	; 0
    1b90:	40 e0       	ldi	r20, 0x00	; 0
    1b92:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	Dio_config(BT1_PORT, BT1_PIN, INPUT);
    1b96:	83 e0       	ldi	r24, 0x03	; 3
    1b98:	66 e0       	ldi	r22, 0x06	; 6
    1b9a:	40 e0       	ldi	r20, 0x00	; 0
    1b9c:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	Dio_config(BT2_PORT, BT2_PIN, INPUT);
    1ba0:	83 e0       	ldi	r24, 0x03	; 3
    1ba2:	62 e0       	ldi	r22, 0x02	; 2
    1ba4:	40 e0       	ldi	r20, 0x00	; 0
    1ba6:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
}
    1baa:	08 95       	ret

00001bac <Led0_Toggle>:



void Led0_Toggle(void)
{
		Dio_ToggleChannel(LED0_PORT, LED0_PIN);
    1bac:	82 e0       	ldi	r24, 0x02	; 2
    1bae:	62 e0       	ldi	r22, 0x02	; 2
    1bb0:	0e 94 66 12 	call	0x24cc	; 0x24cc <Dio_ToggleChannel>

}
    1bb4:	08 95       	ret

00001bb6 <Led_Toggle>:
}


void Led_Toggle(led_t led)
{
	switch (led)
    1bb6:	81 30       	cpi	r24, 0x01	; 1
    1bb8:	79 f0       	breq	.+30     	; 0x1bd8 <Led_Toggle+0x22>
    1bba:	81 30       	cpi	r24, 0x01	; 1
    1bbc:	28 f4       	brcc	.+10     	; 0x1bc8 <Led_Toggle+0x12>
	{
	case Led0:
		Dio_ToggleChannel(LED0_PORT, LED0_PIN);
    1bbe:	82 e0       	ldi	r24, 0x02	; 2
    1bc0:	62 e0       	ldi	r22, 0x02	; 2
    1bc2:	0e 94 66 12 	call	0x24cc	; 0x24cc <Dio_ToggleChannel>
    1bc6:	08 95       	ret
}


void Led_Toggle(led_t led)
{
	switch (led)
    1bc8:	82 30       	cpi	r24, 0x02	; 2
    1bca:	09 f0       	breq	.+2      	; 0x1bce <Led_Toggle+0x18>
    1bcc:	08 95       	ret
	case Led1:
		Dio_ToggleChannel(LED1_PORT, LED1_PIN);
		break;

	case Led2:
		Dio_ToggleChannel(LED2_PORT, LED2_PIN);
    1bce:	83 e0       	ldi	r24, 0x03	; 3
    1bd0:	63 e0       	ldi	r22, 0x03	; 3
    1bd2:	0e 94 66 12 	call	0x24cc	; 0x24cc <Dio_ToggleChannel>
    1bd6:	08 95       	ret
	case Led0:
		Dio_ToggleChannel(LED0_PORT, LED0_PIN);
		break;

	case Led1:
		Dio_ToggleChannel(LED1_PORT, LED1_PIN);
    1bd8:	82 e0       	ldi	r24, 0x02	; 2
    1bda:	67 e0       	ldi	r22, 0x07	; 7
    1bdc:	0e 94 66 12 	call	0x24cc	; 0x24cc <Dio_ToggleChannel>
    1be0:	08 95       	ret

00001be2 <Led_off>:

		}
}

void Led_off(led_t led){
	switch (led){
    1be2:	81 30       	cpi	r24, 0x01	; 1
    1be4:	89 f0       	breq	.+34     	; 0x1c08 <Led_off+0x26>
    1be6:	81 30       	cpi	r24, 0x01	; 1
    1be8:	30 f4       	brcc	.+12     	; 0x1bf6 <Led_off+0x14>
	case Led0:
#if(LED0_Con == FOREWORD)
			Dio_write(LED0_PORT,LED0_PIN,Dio_LOW);
    1bea:	82 e0       	ldi	r24, 0x02	; 2
    1bec:	62 e0       	ldi	r22, 0x02	; 2
    1bee:	40 e0       	ldi	r20, 0x00	; 0
    1bf0:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
    1bf4:	08 95       	ret

		}
}

void Led_off(led_t led){
	switch (led){
    1bf6:	82 30       	cpi	r24, 0x02	; 2
    1bf8:	09 f0       	breq	.+2      	; 0x1bfc <Led_off+0x1a>
    1bfa:	08 95       	ret
			Dio_write(LED1_PORT,LED1_PIN,Dio_HIGH);
#endif
		break;
	case Led2:
#if(LED2_Con == FOREWORD)
			Dio_write(LED2_PORT,LED2_PIN,Dio_LOW);
    1bfc:	83 e0       	ldi	r24, 0x03	; 3
    1bfe:	63 e0       	ldi	r22, 0x03	; 3
    1c00:	40 e0       	ldi	r20, 0x00	; 0
    1c02:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
    1c06:	08 95       	ret
			Dio_write(LED0_PORT,LED0_PIN,Dio_HIGH);
#endif
		break;
	case Led1:
#if(LED1_Con == FOREWORD)
			Dio_write(LED1_PORT,LED1_PIN,Dio_LOW);
    1c08:	82 e0       	ldi	r24, 0x02	; 2
    1c0a:	67 e0       	ldi	r22, 0x07	; 7
    1c0c:	40 e0       	ldi	r20, 0x00	; 0
    1c0e:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
    1c12:	08 95       	ret

00001c14 <Led_on>:
	Dio_config(LED0_PORT,LED0_PIN,OUTPUT);
	Dio_config(LED1_PORT,LED1_PIN,OUTPUT);
	Dio_config(LED2_PORT,LED2_PIN,OUTPUT);
}
void Led_on(led_t led){
	switch (led){
    1c14:	81 30       	cpi	r24, 0x01	; 1
    1c16:	89 f0       	breq	.+34     	; 0x1c3a <Led_on+0x26>
    1c18:	81 30       	cpi	r24, 0x01	; 1
    1c1a:	30 f4       	brcc	.+12     	; 0x1c28 <Led_on+0x14>
		case Led0:
#if(LED0_Con == FOREWORD)
				Dio_write(LED0_PORT,LED0_PIN,Dio_HIGH);
    1c1c:	82 e0       	ldi	r24, 0x02	; 2
    1c1e:	62 e0       	ldi	r22, 0x02	; 2
    1c20:	41 e0       	ldi	r20, 0x01	; 1
    1c22:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
    1c26:	08 95       	ret
	Dio_config(LED0_PORT,LED0_PIN,OUTPUT);
	Dio_config(LED1_PORT,LED1_PIN,OUTPUT);
	Dio_config(LED2_PORT,LED2_PIN,OUTPUT);
}
void Led_on(led_t led){
	switch (led){
    1c28:	82 30       	cpi	r24, 0x02	; 2
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <Led_on+0x1a>
    1c2c:	08 95       	ret
				Dio_write(LED1_PORT,LED1_PIN,Dio_LOW);
#endif
			break;
		case Led2:
#if(LED2_Con == FOREWORD)
				Dio_write(LED2_PORT,LED2_PIN,Dio_HIGH);
    1c2e:	83 e0       	ldi	r24, 0x03	; 3
    1c30:	63 e0       	ldi	r22, 0x03	; 3
    1c32:	41 e0       	ldi	r20, 0x01	; 1
    1c34:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
    1c38:	08 95       	ret
				Dio_write(LED0_PORT,LED0_PIN,Dio_LOW);
#endif
			break;
		case Led1:
#if(LED1_Con == FOREWORD)
				Dio_write(LED1_PORT,LED1_PIN,Dio_HIGH);
    1c3a:	82 e0       	ldi	r24, 0x02	; 2
    1c3c:	67 e0       	ldi	r22, 0x07	; 7
    1c3e:	41 e0       	ldi	r20, 0x01	; 1
    1c40:	0e 94 a1 11 	call	0x2342	; 0x2342 <Dio_write>
    1c44:	08 95       	ret

00001c46 <Led_Init>:
 *      Author: Ahmed abdel Gawad
 */
#include "Led.h"
#include "LED_config.h"
void Led_Init(void){
	Dio_config(LED0_PORT,LED0_PIN,OUTPUT);
    1c46:	82 e0       	ldi	r24, 0x02	; 2
    1c48:	62 e0       	ldi	r22, 0x02	; 2
    1c4a:	41 e0       	ldi	r20, 0x01	; 1
    1c4c:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	Dio_config(LED1_PORT,LED1_PIN,OUTPUT);
    1c50:	82 e0       	ldi	r24, 0x02	; 2
    1c52:	67 e0       	ldi	r22, 0x07	; 7
    1c54:	41 e0       	ldi	r20, 0x01	; 1
    1c56:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
	Dio_config(LED2_PORT,LED2_PIN,OUTPUT);
    1c5a:	83 e0       	ldi	r24, 0x03	; 3
    1c5c:	63 e0       	ldi	r22, 0x03	; 3
    1c5e:	41 e0       	ldi	r20, 0x01	; 1
    1c60:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
}
    1c64:	08 95       	ret

00001c66 <TIMER2_Start>:
	CLR_BIT(TCCR2_REG, 6); /////Normal mode
	GINT_Global_Enable();
	GINT_Enable_InternalInt(TMER2);
}
void TIMER2_Start() {
	TCCR2_REG = (TCCR2_REG & 0xF8) | 0x07; ///preScaller 1027
    1c66:	85 b5       	in	r24, 0x25	; 37
    1c68:	87 60       	ori	r24, 0x07	; 7
    1c6a:	85 bd       	out	0x25, r24	; 37
}
    1c6c:	08 95       	ret

00001c6e <TIMER2_Stop>:
void TIMER2_Stop() {

}
    1c6e:	08 95       	ret

00001c70 <TIMER2_Reset>:
void TIMER2_Reset() {

}
    1c70:	08 95       	ret

00001c72 <TIMER2_Get_Time>:
U32 TIMER2_Get_Time() {
	return 0;
}
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	08 95       	ret

00001c7c <TIMER2_No_of_over_flows>:
U32 TIMER2_No_of_over_flows(void) {
	return 0;
}
    1c7c:	60 e0       	ldi	r22, 0x00	; 0
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	08 95       	ret

00001c86 <TIMER2_Init>:

#include "timer2.h"
extern U8 No_of_over_flows_timer2 ;

void TIMER2_Init() {
	CLR_BIT(TCCR2_REG, 3);
    1c86:	85 b5       	in	r24, 0x25	; 37
    1c88:	87 7f       	andi	r24, 0xF7	; 247
    1c8a:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2_REG, 6); /////Normal mode
    1c8c:	85 b5       	in	r24, 0x25	; 37
    1c8e:	8f 7b       	andi	r24, 0xBF	; 191
    1c90:	85 bd       	out	0x25, r24	; 37
	GINT_Global_Enable();
    1c92:	0e 94 92 10 	call	0x2124	; 0x2124 <GINT_Global_Enable>
	GINT_Enable_InternalInt(TMER2);
    1c96:	82 e0       	ldi	r24, 0x02	; 2
    1c98:	0e 94 1f 11 	call	0x223e	; 0x223e <GINT_Enable_InternalInt>
}
    1c9c:	08 95       	ret

00001c9e <EEPROM_Read>:

#include "EEPROM.h"

U8 EEPROM_Read(U16 Address) {

	while(CHK_BIT(EECR_REG,1)){
    1c9e:	e1 99       	sbic	0x1c, 1	; 28
    1ca0:	fe cf       	rjmp	.-4      	; 0x1c9e <EEPROM_Read>
			//wait
		}
	EEARL_REG = Address;
    1ca2:	8e bb       	out	0x1e, r24	; 30
	EEARH_REG = (Address >> 8);
    1ca4:	9f bb       	out	0x1f, r25	; 31
	SET_BIT(EECR_REG, 0); //Read enable
    1ca6:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR_REG;
    1ca8:	8d b3       	in	r24, 0x1d	; 29
}
    1caa:	08 95       	ret

00001cac <EEPROM_Write>:
void EEPROM_Write(U16 Address, U8 data) {
	while(CHK_BIT(EECR_REG,1)){
    1cac:	e1 99       	sbic	0x1c, 1	; 28
    1cae:	fe cf       	rjmp	.-4      	; 0x1cac <EEPROM_Write>
		//wait
	}
	EEARL_REG = Address;
    1cb0:	8e bb       	out	0x1e, r24	; 30
	EEARH_REG = (Address >> 8);
    1cb2:	9f bb       	out	0x1f, r25	; 31
	EEDR_REG=data;
    1cb4:	6d bb       	out	0x1d, r22	; 29
	SET_BIT(EECR_REG,2);
    1cb6:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(EECR_REG, 1); //Write enable
    1cb8:	e1 9a       	sbi	0x1c, 1	; 28
}
    1cba:	08 95       	ret

00001cbc <I2C_MasterInit>:
 *      Author: Ahmed abdel Gawad
 */
#include "I2C.h"

void I2C_MasterInit(void) {
	SET_BIT(TWCR_REG, 6); // ACK Enable
    1cbc:	86 b7       	in	r24, 0x36	; 54
    1cbe:	80 64       	ori	r24, 0x40	; 64
    1cc0:	86 bf       	out	0x36, r24	; 54
	TWBR_REG = 32; //speed = 100Khz
    1cc2:	80 e2       	ldi	r24, 0x20	; 32
    1cc4:	80 b9       	out	0x00, r24	; 0
	TWSR_REG = (TWSR_REG % 0xFC) | 0x00; //preScaller 1
    1cc6:	81 b1       	in	r24, 0x01	; 1
    1cc8:	6c ef       	ldi	r22, 0xFC	; 252
    1cca:	0e 94 ba 12 	call	0x2574	; 0x2574 <__udivmodqi4>
    1cce:	91 b9       	out	0x01, r25	; 1
	SET_BIT(TWCR_REG, 2); //enable I2C
    1cd0:	86 b7       	in	r24, 0x36	; 54
    1cd2:	84 60       	ori	r24, 0x04	; 4
    1cd4:	86 bf       	out	0x36, r24	; 54

}
    1cd6:	08 95       	ret

00001cd8 <I2C_SlaveInit>:
void I2C_SlaveInit(void) {
	SET_BIT(TWCR_REG, 6); // ACK Enable
    1cd8:	86 b7       	in	r24, 0x36	; 54
    1cda:	80 64       	ori	r24, 0x40	; 64
    1cdc:	86 bf       	out	0x36, r24	; 54
	TWAR_REG = 0b00000010; //slave address
    1cde:	82 e0       	ldi	r24, 0x02	; 2
    1ce0:	82 b9       	out	0x02, r24	; 2
	SET_BIT(TWCR_REG, 2); //enable I2C
    1ce2:	86 b7       	in	r24, 0x36	; 54
    1ce4:	84 60       	ori	r24, 0x04	; 4
    1ce6:	86 bf       	out	0x36, r24	; 54

}
    1ce8:	08 95       	ret

00001cea <I2C_Start>:
void I2C_Start(void) {
	SET_BIT(TWCR_REG, 5); //start condition
    1cea:	86 b7       	in	r24, 0x36	; 54
    1cec:	80 62       	ori	r24, 0x20	; 32
    1cee:	86 bf       	out	0x36, r24	; 54
	SET_BIT(TWCR_REG, 7); //clear flag
    1cf0:	86 b7       	in	r24, 0x36	; 54
    1cf2:	80 68       	ori	r24, 0x80	; 128
    1cf4:	86 bf       	out	0x36, r24	; 54
	while (!CHK_BIT(TWCR_REG, 7)) {
    1cf6:	06 b6       	in	r0, 0x36	; 54
    1cf8:	07 fe       	sbrs	r0, 7
    1cfa:	fd cf       	rjmp	.-6      	; 0x1cf6 <I2C_Start+0xc>
		//wait
	}

}
    1cfc:	08 95       	ret

00001cfe <I2C_Repeated_Start>:
void I2C_Repeated_Start(void) {
	SET_BIT(TWCR_REG, 5); //start condition
    1cfe:	86 b7       	in	r24, 0x36	; 54
    1d00:	80 62       	ori	r24, 0x20	; 32
    1d02:	86 bf       	out	0x36, r24	; 54
	SET_BIT(TWCR_REG, 7); //clear flag
    1d04:	86 b7       	in	r24, 0x36	; 54
    1d06:	80 68       	ori	r24, 0x80	; 128
    1d08:	86 bf       	out	0x36, r24	; 54
	while (!CHK_BIT(TWCR_REG, 7)) {
    1d0a:	06 b6       	in	r0, 0x36	; 54
    1d0c:	07 fe       	sbrs	r0, 7
    1d0e:	fd cf       	rjmp	.-6      	; 0x1d0a <I2C_Repeated_Start+0xc>
		//wait
	}
}
    1d10:	08 95       	ret

00001d12 <I2C_Stop>:
void I2C_Stop(void) {
	SET_BIT(TWCR_REG, 4); //stop condition
    1d12:	86 b7       	in	r24, 0x36	; 54
    1d14:	80 61       	ori	r24, 0x10	; 16
    1d16:	86 bf       	out	0x36, r24	; 54
	SET_BIT(TWCR_REG, 7); //clear flag
    1d18:	86 b7       	in	r24, 0x36	; 54
    1d1a:	80 68       	ori	r24, 0x80	; 128
    1d1c:	86 bf       	out	0x36, r24	; 54
	while (!CHK_BIT(TWCR_REG, 7)) {
    1d1e:	06 b6       	in	r0, 0x36	; 54
    1d20:	07 fe       	sbrs	r0, 7
    1d22:	fd cf       	rjmp	.-6      	; 0x1d1e <I2C_Stop+0xc>
		//wait
	}

}
    1d24:	08 95       	ret

00001d26 <I2C_SlaveAddressWithWrite>:

void I2C_SlaveAddressWithWrite(U8 Addres) {
	TWDR_REG = (Addres << 1);
    1d26:	88 0f       	add	r24, r24
    1d28:	83 b9       	out	0x03, r24	; 3
	CLR_BIT(TWCR_REG, 5); //Clear start condition
    1d2a:	86 b7       	in	r24, 0x36	; 54
    1d2c:	8f 7d       	andi	r24, 0xDF	; 223
    1d2e:	86 bf       	out	0x36, r24	; 54
	SET_BIT(TWCR_REG, 7); //clear flag
    1d30:	86 b7       	in	r24, 0x36	; 54
    1d32:	80 68       	ori	r24, 0x80	; 128
    1d34:	86 bf       	out	0x36, r24	; 54
	while (!CHK_BIT(TWCR_REG, 7)) {
    1d36:	06 b6       	in	r0, 0x36	; 54
    1d38:	07 fe       	sbrs	r0, 7
    1d3a:	fd cf       	rjmp	.-6      	; 0x1d36 <I2C_SlaveAddressWithWrite+0x10>
		//wait
	}
}
    1d3c:	08 95       	ret

00001d3e <I2C_SlaveAdderssWithRead>:
void I2C_SlaveAdderssWithRead(U8 Addres) {
	TWDR_REG = (Addres << 1);
    1d3e:	88 0f       	add	r24, r24
    1d40:	83 b9       	out	0x03, r24	; 3
	SET_BIT(TWDR_REG, 0);
    1d42:	18 9a       	sbi	0x03, 0	; 3
	CLR_BIT(TWCR_REG, 5); //Clear start condition
    1d44:	86 b7       	in	r24, 0x36	; 54
    1d46:	8f 7d       	andi	r24, 0xDF	; 223
    1d48:	86 bf       	out	0x36, r24	; 54
	SET_BIT(TWCR_REG, 7); //clear flag
    1d4a:	86 b7       	in	r24, 0x36	; 54
    1d4c:	80 68       	ori	r24, 0x80	; 128
    1d4e:	86 bf       	out	0x36, r24	; 54
	while (!CHK_BIT(TWCR_REG, 7)) {
    1d50:	06 b6       	in	r0, 0x36	; 54
    1d52:	07 fe       	sbrs	r0, 7
    1d54:	fd cf       	rjmp	.-6      	; 0x1d50 <I2C_SlaveAdderssWithRead+0x12>
		//wait
	}
}
    1d56:	08 95       	ret

00001d58 <I2C_Mastar_write_bite_to_slave>:

void I2C_Mastar_write_bite_to_slave(U8 byte) {
	TWDR_REG = byte;
    1d58:	83 b9       	out	0x03, r24	; 3
	SET_BIT(TWCR_REG, 7); //clear flag
    1d5a:	86 b7       	in	r24, 0x36	; 54
    1d5c:	80 68       	ori	r24, 0x80	; 128
    1d5e:	86 bf       	out	0x36, r24	; 54
	while (!CHK_BIT(TWCR_REG, 7)) {
    1d60:	06 b6       	in	r0, 0x36	; 54
    1d62:	07 fe       	sbrs	r0, 7
    1d64:	fd cf       	rjmp	.-6      	; 0x1d60 <I2C_Mastar_write_bite_to_slave+0x8>
		//wait
	}
}
    1d66:	08 95       	ret

00001d68 <I2C_Mastar_Read_bite_from_slave>:

U8 I2C_Mastar_Read_bite_from_slave(U8 byte) {

	SET_BIT(TWCR_REG, 7); //clear flag
    1d68:	86 b7       	in	r24, 0x36	; 54
    1d6a:	80 68       	ori	r24, 0x80	; 128
    1d6c:	86 bf       	out	0x36, r24	; 54
	while (!CHK_BIT(TWCR_REG, 7)) {
    1d6e:	06 b6       	in	r0, 0x36	; 54
    1d70:	07 fe       	sbrs	r0, 7
    1d72:	fd cf       	rjmp	.-6      	; 0x1d6e <I2C_Mastar_Read_bite_from_slave+0x6>
		//wait
	}
	return TWDR_REG;
    1d74:	83 b1       	in	r24, 0x03	; 3
}
    1d76:	08 95       	ret

00001d78 <SPI_Master_Init>:
#define _SPI_SOURCE_SPI_C_

#include "SPI.h"

void SPI_Master_Init(void) {
	SET_BIT(SPCR_REG, 6);		//SPI Enable
    1d78:	6e 9a       	sbi	0x0d, 6	; 13
	SET_BIT(SPCR_REG, 5);		//Data Order = LSB is transmitted first
    1d7a:	6d 9a       	sbi	0x0d, 5	; 13
	SET_BIT(SPCR_REG, 4);		//Master SPI mode
    1d7c:	6c 9a       	sbi	0x0d, 4	; 13

	SPCR_REG = (SPCR_REG & 0xFC) | 0x00;
    1d7e:	8d b1       	in	r24, 0x0d	; 13
    1d80:	8c 7f       	andi	r24, 0xFC	; 252
    1d82:	8d b9       	out	0x0d, r24	; 13
	CLR_BIT(SPSR_REG, 0); 		///clk = Foso/4
    1d84:	70 98       	cbi	0x0e, 0	; 14
}
    1d86:	08 95       	ret

00001d88 <SPI_Slave_Init>:
void SPI_Slave_Init(void) {
	SET_BIT(SPCR_REG, 6);		//SPI Enable
    1d88:	6e 9a       	sbi	0x0d, 6	; 13
	SET_BIT(SPCR_REG, 5);		//Data Order = LSB is transmitted first
    1d8a:	6d 9a       	sbi	0x0d, 5	; 13
	CLR_BIT(SPCR_REG, 4);		//Slave SPI mode
    1d8c:	6c 98       	cbi	0x0d, 4	; 13

}
    1d8e:	08 95       	ret

00001d90 <SPI_transave>:
U8 SPI_transave(U8 byte) {
	SPDR_REG = byte;
    1d90:	8f b9       	out	0x0f, r24	; 15
	while (!CHK_BIT(SPSR_REG, 7)) {
    1d92:	77 9b       	sbis	0x0e, 7	; 14
    1d94:	fe cf       	rjmp	.-4      	; 0x1d92 <SPI_transave+0x2>
		//waiting
	}
	return SPDR_REG;
    1d96:	8f b1       	in	r24, 0x0f	; 15
}
    1d98:	08 95       	ret

00001d9a <SPI_transmit_Byte>:
void SPI_transmit_Byte(U8 byte) {
	U8 locBuffer;
	SPDR_REG = byte;
    1d9a:	8f b9       	out	0x0f, r24	; 15
	while (!CHK_BIT(SPSR_REG, 7)) {
    1d9c:	77 9b       	sbis	0x0e, 7	; 14
    1d9e:	fe cf       	rjmp	.-4      	; 0x1d9c <SPI_transmit_Byte+0x2>
		//waiting
	}
	locBuffer = SPDR_REG;
    1da0:	8f b1       	in	r24, 0x0f	; 15
}
    1da2:	08 95       	ret

00001da4 <SPI_receive_Byte>:
U8 SPI_receive_Byte(void) {
	SPDR_REG = SPI_DUMMY_BYTE;
    1da4:	8f ef       	ldi	r24, 0xFF	; 255
    1da6:	8f b9       	out	0x0f, r24	; 15
	while (!CHK_BIT(SPSR_REG, 7)) {
    1da8:	77 9b       	sbis	0x0e, 7	; 14
    1daa:	fe cf       	rjmp	.-4      	; 0x1da8 <SPI_receive_Byte+0x4>
		//waiting
	}
	return SPDR_REG;
    1dac:	8f b1       	in	r24, 0x0f	; 15
}
    1dae:	08 95       	ret

00001db0 <UART_sendChar>:

}

void UART_sendChar(U8 chr) {

	while (!CHK_BIT(UCSRA_REG, 5)) { //Transmit Complete
    1db0:	5d 9b       	sbis	0x0b, 5	; 11
    1db2:	fe cf       	rjmp	.-4      	; 0x1db0 <UART_sendChar>
		;
	}
	UDR_REG = chr;
    1db4:	8c b9       	out	0x0c, r24	; 12
}
    1db6:	08 95       	ret

00001db8 <UART_receiveChar>:
	}
}
*/
U8 UART_receiveChar(void) {
	return RxValue;
}
    1db8:	80 91 a8 01 	lds	r24, 0x01A8
    1dbc:	08 95       	ret

00001dbe <UART_sendString>:
void UART_sendString(U8 *str) {
    1dbe:	fc 01       	movw	r30, r24
	while (*str != '\0') {
    1dc0:	80 81       	ld	r24, Z
    1dc2:	88 23       	and	r24, r24
    1dc4:	39 f0       	breq	.+14     	; 0x1dd4 <UART_sendString+0x16>

}

void UART_sendChar(U8 chr) {

	while (!CHK_BIT(UCSRA_REG, 5)) { //Transmit Complete
    1dc6:	5d 9b       	sbis	0x0b, 5	; 11
    1dc8:	fe cf       	rjmp	.-4      	; 0x1dc6 <UART_sendString+0x8>
		;
	}
	UDR_REG = chr;
    1dca:	8c b9       	out	0x0c, r24	; 12
	return RxValue;
}
void UART_sendString(U8 *str) {
	while (*str != '\0') {
		UART_sendChar(*str);
		str++;
    1dcc:	31 96       	adiw	r30, 0x01	; 1
*/
U8 UART_receiveChar(void) {
	return RxValue;
}
void UART_sendString(U8 *str) {
	while (*str != '\0') {
    1dce:	80 81       	ld	r24, Z
    1dd0:	88 23       	and	r24, r24
    1dd2:	c9 f7       	brne	.-14     	; 0x1dc6 <UART_sendString+0x8>
    1dd4:	08 95       	ret

00001dd6 <UART_Init>:
 */

#include "UART.h"
U8 RxValue=0;

void UART_Init(U32 Boud_rate) {
    1dd6:	1f 93       	push	r17
    1dd8:	16 2f       	mov	r17, r22
	GINT_Global_Enable();
    1dda:	0e 94 92 10 	call	0x2124	; 0x2124 <GINT_Global_Enable>
	SET_BIT(UCSRB_REG,7);					//RX Complete Interrupt Enable
    1dde:	57 9a       	sbi	0x0a, 7	; 10
	CLR_BIT(UBRRH_REG, 7);					//Select UBRRH_REG
    1de0:	80 b5       	in	r24, 0x20	; 32
    1de2:	8f 77       	andi	r24, 0x7F	; 127
    1de4:	80 bd       	out	0x20, r24	; 32
	UBRRL_REG = (U8) (Boud_rate);
    1de6:	19 b9       	out	0x09, r17	; 9
	UBRRH_REG = (U8) (Boud_rate) >> 8;
    1de8:	10 bc       	out	0x20, r1	; 32

	//SET_BIT(UCSRC_REG, 7); 					//Select UCSRC_reg
	CLR_BIT(UCSRC_REG, 6);					//Asynchronous Operation
    1dea:	80 b5       	in	r24, 0x20	; 32
    1dec:	8f 7b       	andi	r24, 0xBF	; 191
    1dee:	80 bd       	out	0x20, r24	; 32

	//UCSRC_REG = (UCSRC_REG & 0xCF) | 0x20;  //Enabled, Even Parity
	//CLR_BIT(UCSRC_REG, 3); 					//Stop Bit = 1 bit

	CLR_BIT(UCSRB_REG, 2);
    1df0:	52 98       	cbi	0x0a, 2	; 10
	//UCSRC_REG = (UCSRC_REG & 0xF9) | 0x06; //Character Size = 8 bit
	UCSRC_REG |= (1 << 7) | (3 << 1) | (2 << 4);
    1df2:	80 b5       	in	r24, 0x20	; 32
    1df4:	86 6a       	ori	r24, 0xA6	; 166
    1df6:	80 bd       	out	0x20, r24	; 32
	;
	SET_BIT(UCSRB_REG, 3); 					//Transmitter Enable
    1df8:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT(UCSRB_REG, 4); 					//Receiver Enable
    1dfa:	54 9a       	sbi	0x0a, 4	; 10

	SET_BIT(UCSRB_REG, 7); 					//Complete Interrupt Enable
    1dfc:	57 9a       	sbi	0x0a, 7	; 10

}
    1dfe:	1f 91       	pop	r17
    1e00:	08 95       	ret

00001e02 <PWM1_Set_Duty>:

	Dio_config(Dio_PORTD, Dio_pin5, OUTPUT);
}

void PWM1_Set_Duty(U32 present) {
    present = (present * Top) / 100;
    1e02:	20 91 a9 01 	lds	r18, 0x01A9
    1e06:	30 91 aa 01 	lds	r19, 0x01AA
    1e0a:	40 91 ab 01 	lds	r20, 0x01AB
    1e0e:	50 91 ac 01 	lds	r21, 0x01AC
    1e12:	0e 94 9b 12 	call	0x2536	; 0x2536 <__mulsi3>
    1e16:	24 e6       	ldi	r18, 0x64	; 100
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e0       	ldi	r20, 0x00	; 0
    1e1c:	50 e0       	ldi	r21, 0x00	; 0
    1e1e:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__udivmodsi4>
    1e22:	c9 01       	movw	r24, r18
    1e24:	da 01       	movw	r26, r20
	OCR1AL_REG = present;
    1e26:	2a bd       	out	0x2a, r18	; 42
	OCR1AH_REG = present >> 8;
    1e28:	89 2f       	mov	r24, r25
    1e2a:	9a 2f       	mov	r25, r26
    1e2c:	ab 2f       	mov	r26, r27
    1e2e:	bb 27       	eor	r27, r27
    1e30:	8b bd       	out	0x2b, r24	; 43
}
    1e32:	08 95       	ret

00001e34 <PWM1_Start>:
void PWM1_Start(void) {
	TCCR1B_REG = (TCCR1B_REG & 0xF8) | 0x03; //preScaller 64
    1e34:	8e b5       	in	r24, 0x2e	; 46
    1e36:	88 7f       	andi	r24, 0xF8	; 248
    1e38:	83 60       	ori	r24, 0x03	; 3
    1e3a:	8e bd       	out	0x2e, r24	; 46
}
    1e3c:	08 95       	ret

00001e3e <PWM1_Stop>:

void PWM1_Stop(void) {
	TCCR1B_REG = (TCCR1B_REG & 0xF8) | 0x00;
    1e3e:	8e b5       	in	r24, 0x2e	; 46
    1e40:	88 7f       	andi	r24, 0xF8	; 248
    1e42:	8e bd       	out	0x2e, r24	; 46
}
    1e44:	08 95       	ret

00001e46 <PWM1_Init>:
 *  Created on: Feb 2, 2022
 *      Author: Ahmed abdel Gawad
 */
#include "PWM1.h"
static U32 Top = 0;
void PWM1_Init(U32 Frequency) {
    1e46:	9b 01       	movw	r18, r22
    1e48:	ac 01       	movw	r20, r24
	Top = ((16000000) / (Frequency * 64)) - 1;
    1e4a:	22 0f       	add	r18, r18
    1e4c:	33 1f       	adc	r19, r19
    1e4e:	44 1f       	adc	r20, r20
    1e50:	55 1f       	adc	r21, r21
    1e52:	22 0f       	add	r18, r18
    1e54:	33 1f       	adc	r19, r19
    1e56:	44 1f       	adc	r20, r20
    1e58:	55 1f       	adc	r21, r21
    1e5a:	22 0f       	add	r18, r18
    1e5c:	33 1f       	adc	r19, r19
    1e5e:	44 1f       	adc	r20, r20
    1e60:	55 1f       	adc	r21, r21
    1e62:	22 0f       	add	r18, r18
    1e64:	33 1f       	adc	r19, r19
    1e66:	44 1f       	adc	r20, r20
    1e68:	55 1f       	adc	r21, r21
    1e6a:	22 0f       	add	r18, r18
    1e6c:	33 1f       	adc	r19, r19
    1e6e:	44 1f       	adc	r20, r20
    1e70:	55 1f       	adc	r21, r21
    1e72:	22 0f       	add	r18, r18
    1e74:	33 1f       	adc	r19, r19
    1e76:	44 1f       	adc	r20, r20
    1e78:	55 1f       	adc	r21, r21
    1e7a:	60 e0       	ldi	r22, 0x00	; 0
    1e7c:	74 e2       	ldi	r23, 0x24	; 36
    1e7e:	84 ef       	ldi	r24, 0xF4	; 244
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__udivmodsi4>
    1e86:	21 50       	subi	r18, 0x01	; 1
    1e88:	30 40       	sbci	r19, 0x00	; 0
    1e8a:	40 40       	sbci	r20, 0x00	; 0
    1e8c:	50 40       	sbci	r21, 0x00	; 0
    1e8e:	20 93 a9 01 	sts	0x01A9, r18
    1e92:	30 93 aa 01 	sts	0x01AA, r19
    1e96:	40 93 ab 01 	sts	0x01AB, r20
    1e9a:	50 93 ac 01 	sts	0x01AC, r21
	ICR1L_REG = Top;
    1e9e:	26 bd       	out	0x26, r18	; 38
	ICR1H_REG = Top >> 8;
    1ea0:	23 2f       	mov	r18, r19
    1ea2:	34 2f       	mov	r19, r20
    1ea4:	45 2f       	mov	r20, r21
    1ea6:	55 27       	eor	r21, r21
    1ea8:	27 bd       	out	0x27, r18	; 39

	TCCR1A_REG = (TCCR1A_REG & 0xFC) | 0x02;
    1eaa:	8f b5       	in	r24, 0x2f	; 47
    1eac:	8c 7f       	andi	r24, 0xFC	; 252
    1eae:	82 60       	ori	r24, 0x02	; 2
    1eb0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x18;   //Fast PWM
    1eb2:	8e b5       	in	r24, 0x2e	; 46
    1eb4:	88 61       	ori	r24, 0x18	; 24
    1eb6:	8e bd       	out	0x2e, r24	; 46
	TCCR1A_REG = (TCCR1A_REG & 0x3F) | 0x80; //non-inverting
    1eb8:	8f b5       	in	r24, 0x2f	; 47
    1eba:	8f 73       	andi	r24, 0x3F	; 63
    1ebc:	80 68       	ori	r24, 0x80	; 128
    1ebe:	8f bd       	out	0x2f, r24	; 47

	Dio_config(Dio_PORTD, Dio_pin5, OUTPUT);
    1ec0:	83 e0       	ldi	r24, 0x03	; 3
    1ec2:	65 e0       	ldi	r22, 0x05	; 5
    1ec4:	41 e0       	ldi	r20, 0x01	; 1
    1ec6:	0e 94 32 11 	call	0x2264	; 0x2264 <Dio_config>
}
    1eca:	08 95       	ret

00001ecc <__vector_11>:
F64 tick_time;
extern U8 sensor_working ;
extern U8 rising_edge ;
void (*funcptr)(void);

ISR(TIMER0_OVF_vect) {
    1ecc:	1f 92       	push	r1
    1ece:	0f 92       	push	r0
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	0f 92       	push	r0
    1ed4:	11 24       	eor	r1, r1
    1ed6:	2f 93       	push	r18
    1ed8:	8f 93       	push	r24
    1eda:	9f 93       	push	r25
    1edc:	af 93       	push	r26
    1ede:	bf 93       	push	r27
	No_of_over_flows++;
    1ee0:	80 91 ad 01 	lds	r24, 0x01AD
    1ee4:	90 91 ae 01 	lds	r25, 0x01AE
    1ee8:	a0 91 af 01 	lds	r26, 0x01AF
    1eec:	b0 91 b0 01 	lds	r27, 0x01B0
    1ef0:	01 96       	adiw	r24, 0x01	; 1
    1ef2:	a1 1d       	adc	r26, r1
    1ef4:	b1 1d       	adc	r27, r1
    1ef6:	80 93 ad 01 	sts	0x01AD, r24
    1efa:	90 93 ae 01 	sts	0x01AE, r25
    1efe:	a0 93 af 01 	sts	0x01AF, r26
    1f02:	b0 93 b0 01 	sts	0x01B0, r27
	if (No_of_over_flows > 730) {
    1f06:	8b 5d       	subi	r24, 0xDB	; 219
    1f08:	92 40       	sbci	r25, 0x02	; 2
    1f0a:	a0 40       	sbci	r26, 0x00	; 0
    1f0c:	b0 40       	sbci	r27, 0x00	; 0
    1f0e:	68 f0       	brcs	.+26     	; 0x1f2a <__vector_11+0x5e>
	No_of_over_flows = 0;
	TCCR0_REG = (TCCR0_REG & 0xF8) | 0x00;
}
void TIMER0_Reset() {
	No_of_over_flows = 0;
	TCNT0_REG = 0;
    1f10:	12 be       	out	0x32, r1	; 50

ISR(TIMER0_OVF_vect) {
	No_of_over_flows++;
	if (No_of_over_flows > 730) {
		TIMER0_Reset();
		sensor_working = 0;
    1f12:	10 92 a2 01 	sts	0x01A2, r1
		rising_edge = 0;
    1f16:	10 92 a3 01 	sts	0x01A3, r1
		No_of_over_flows = 0;
    1f1a:	10 92 ad 01 	sts	0x01AD, r1
    1f1e:	10 92 ae 01 	sts	0x01AE, r1
    1f22:	10 92 af 01 	sts	0x01AF, r1
    1f26:	10 92 b0 01 	sts	0x01B0, r1
	}
}
    1f2a:	bf 91       	pop	r27
    1f2c:	af 91       	pop	r26
    1f2e:	9f 91       	pop	r25
    1f30:	8f 91       	pop	r24
    1f32:	2f 91       	pop	r18
    1f34:	0f 90       	pop	r0
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	0f 90       	pop	r0
    1f3a:	1f 90       	pop	r1
    1f3c:	18 95       	reti

00001f3e <TIMER0_Start>:
	GINT_Enable_InternalInt(TMIR0);
}

void TIMER0_Start() {
#if (TIMER0_PRESCALLER==CLK)
	TCCR0_REG = (TCCR0_REG & 0xF8) | 0x01;
    1f3e:	83 b7       	in	r24, 0x33	; 51
    1f40:	88 7f       	andi	r24, 0xF8	; 248
    1f42:	81 60       	ori	r24, 0x01	; 1
    1f44:	83 bf       	out	0x33, r24	; 51
	tick_time = 0.0000000625;
    1f46:	8d eb       	ldi	r24, 0xBD	; 189
    1f48:	97 e3       	ldi	r25, 0x37	; 55
    1f4a:	a6 e8       	ldi	r26, 0x86	; 134
    1f4c:	b3 e3       	ldi	r27, 0x33	; 51
    1f4e:	80 93 ed 01 	sts	0x01ED, r24
    1f52:	90 93 ee 01 	sts	0x01EE, r25
    1f56:	a0 93 ef 01 	sts	0x01EF, r26
    1f5a:	b0 93 f0 01 	sts	0x01F0, r27
	TCCR0_REG = (TCCR0_REG & 0xF8) | 0x07;
#else
	TCCR0_REG = (TCCR0_REG & 0xF8) | 0x05;
#endif

}
    1f5e:	08 95       	ret

00001f60 <TIMER0_Stop>:
void TIMER0_Stop() {
	No_of_over_flows = 0;
    1f60:	10 92 ad 01 	sts	0x01AD, r1
    1f64:	10 92 ae 01 	sts	0x01AE, r1
    1f68:	10 92 af 01 	sts	0x01AF, r1
    1f6c:	10 92 b0 01 	sts	0x01B0, r1
	TCCR0_REG = (TCCR0_REG & 0xF8) | 0x00;
    1f70:	83 b7       	in	r24, 0x33	; 51
    1f72:	88 7f       	andi	r24, 0xF8	; 248
    1f74:	83 bf       	out	0x33, r24	; 51
}
    1f76:	08 95       	ret

00001f78 <TIMER0_Reset>:
void TIMER0_Reset() {
	No_of_over_flows = 0;
    1f78:	10 92 ad 01 	sts	0x01AD, r1
    1f7c:	10 92 ae 01 	sts	0x01AE, r1
    1f80:	10 92 af 01 	sts	0x01AF, r1
    1f84:	10 92 b0 01 	sts	0x01B0, r1
	TCNT0_REG = 0;
    1f88:	12 be       	out	0x32, r1	; 50
}
    1f8a:	08 95       	ret

00001f8c <TIMER0_Get_Time>:
U32 TIMER0_Get_Time() {
    1f8c:	6f 92       	push	r6
    1f8e:	7f 92       	push	r7
    1f90:	8f 92       	push	r8
    1f92:	9f 92       	push	r9
    1f94:	af 92       	push	r10
    1f96:	bf 92       	push	r11
    1f98:	cf 92       	push	r12
    1f9a:	df 92       	push	r13
    1f9c:	ef 92       	push	r14
    1f9e:	ff 92       	push	r15
    1fa0:	0f 93       	push	r16
    1fa2:	1f 93       	push	r17
	F64 time = (No_of_over_flows * 256 * tick_time + TCNT0_REG * tick_time)
			* 1000;
    1fa4:	60 90 ed 01 	lds	r6, 0x01ED
    1fa8:	70 90 ee 01 	lds	r7, 0x01EE
    1fac:	80 90 ef 01 	lds	r8, 0x01EF
    1fb0:	90 90 f0 01 	lds	r9, 0x01F0
    1fb4:	e2 b6       	in	r14, 0x32	; 50
    1fb6:	60 91 ad 01 	lds	r22, 0x01AD
    1fba:	70 91 ae 01 	lds	r23, 0x01AE
    1fbe:	80 91 af 01 	lds	r24, 0x01AF
    1fc2:	90 91 b0 01 	lds	r25, 0x01B0
    1fc6:	98 2f       	mov	r25, r24
    1fc8:	87 2f       	mov	r24, r23
    1fca:	76 2f       	mov	r23, r22
    1fcc:	66 27       	eor	r22, r22
    1fce:	0e 94 a7 04 	call	0x94e	; 0x94e <__floatunsisf>
    1fd2:	a4 01       	movw	r20, r8
    1fd4:	93 01       	movw	r18, r6
    1fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fda:	5b 01       	movw	r10, r22
    1fdc:	6c 01       	movw	r12, r24
    1fde:	ff 24       	eor	r15, r15
    1fe0:	00 27       	eor	r16, r16
    1fe2:	f7 fc       	sbrc	r15, 7
    1fe4:	00 95       	com	r16
    1fe6:	10 2f       	mov	r17, r16
    1fe8:	c8 01       	movw	r24, r16
    1fea:	b7 01       	movw	r22, r14
    1fec:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
    1ff0:	9b 01       	movw	r18, r22
    1ff2:	ac 01       	movw	r20, r24
    1ff4:	c4 01       	movw	r24, r8
    1ff6:	b3 01       	movw	r22, r6
    1ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffc:	9b 01       	movw	r18, r22
    1ffe:	ac 01       	movw	r20, r24
    2000:	c6 01       	movw	r24, r12
    2002:	b5 01       	movw	r22, r10
    2004:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	4a e7       	ldi	r20, 0x7A	; 122
    200e:	54 e4       	ldi	r21, 0x44	; 68
    2010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2018:	9b 01       	movw	r18, r22
    201a:	ac 01       	movw	r20, r24
	return (U32) (time);
}
    201c:	ca 01       	movw	r24, r20
    201e:	1f 91       	pop	r17
    2020:	0f 91       	pop	r16
    2022:	ff 90       	pop	r15
    2024:	ef 90       	pop	r14
    2026:	df 90       	pop	r13
    2028:	cf 90       	pop	r12
    202a:	bf 90       	pop	r11
    202c:	af 90       	pop	r10
    202e:	9f 90       	pop	r9
    2030:	8f 90       	pop	r8
    2032:	7f 90       	pop	r7
    2034:	6f 90       	pop	r6
    2036:	08 95       	ret

00002038 <TIMER0_No_of_over_flows>:
U32 TIMER0_No_of_over_flows(void) {
    2038:	60 91 ad 01 	lds	r22, 0x01AD
    203c:	70 91 ae 01 	lds	r23, 0x01AE
	return No_of_over_flows;
}
    2040:	80 91 af 01 	lds	r24, 0x01AF
    2044:	90 91 b0 01 	lds	r25, 0x01B0
    2048:	08 95       	ret

0000204a <TIMER0_Init>:
	}
}

void TIMER0_Init() {
#if(TIMER0_MODE == Normal)
	CLR_BIT(TCCR0_REG, 3);
    204a:	83 b7       	in	r24, 0x33	; 51
    204c:	87 7f       	andi	r24, 0xF7	; 247
    204e:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0_REG, 6);
    2050:	83 b7       	in	r24, 0x33	; 51
    2052:	8f 7b       	andi	r24, 0xBF	; 191
    2054:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0_REG, 6);
#else
	CLR_BIT(TCCR0_REG, 3);
	CLR_BIT(TCCR0_REG, 6);
#endif
	GINT_Global_Enable();
    2056:	0e 94 92 10 	call	0x2124	; 0x2124 <GINT_Global_Enable>
	GINT_Enable_InternalInt(TMIR0);
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	0e 94 1f 11 	call	0x223e	; 0x223e <GINT_Enable_InternalInt>
}
    2060:	08 95       	ret

00002062 <ADC_Init>:
 *      Author: Ahmed abdel Gawad
 */
#include "ADC.h"

void ADC_Init( U8 Prescaler) {
	SET_BIT(ADCSRA_REG, 7);	//Enable ADC module
    2062:	37 9a       	sbi	0x06, 7	; 6
	CLR_BIT(ADCMUX_REG, 5); //left adjust
    2064:	3d 98       	cbi	0x07, 5	; 7

	switch (Prescaler) {
    2066:	80 31       	cpi	r24, 0x10	; 16
    2068:	09 f4       	brne	.+2      	; 0x206c <ADC_Init+0xa>
    206a:	42 c0       	rjmp	.+132    	; 0x20f0 <ADC_Init+0x8e>
    206c:	81 31       	cpi	r24, 0x11	; 17
    206e:	78 f0       	brcs	.+30     	; 0x208e <ADC_Init+0x2c>
    2070:	80 34       	cpi	r24, 0x40	; 64
    2072:	61 f1       	breq	.+88     	; 0x20cc <ADC_Init+0x6a>
    2074:	80 38       	cpi	r24, 0x80	; 128
    2076:	c9 f0       	breq	.+50     	; 0x20aa <ADC_Init+0x48>
    2078:	80 32       	cpi	r24, 0x20	; 32
    207a:	b9 f4       	brne	.+46     	; 0x20aa <ADC_Init+0x48>
			break;
		case 16:
			ADCSRA_REG = (ADCSRA_REG & 0xF8) | 4;
			break;
		case 32:
			ADCSRA_REG = (ADCSRA_REG & 0xF8) | 5;
    207c:	86 b1       	in	r24, 0x06	; 6
    207e:	88 7f       	andi	r24, 0xF8	; 248
    2080:	85 60       	ori	r24, 0x05	; 5
    2082:	86 b9       	out	0x06, r24	; 6
	switch (CONECTION_OF_REFERANCE) {
		case AREF:
			ADCMUX_REG = (ADCMUX_REG & 0x3F) | (0 << 6);
			break;
		case AVCC:
			ADCMUX_REG = (ADCMUX_REG & 0x3F) | (1 << 6);
    2084:	87 b1       	in	r24, 0x07	; 7
    2086:	8f 73       	andi	r24, 0x3F	; 63
    2088:	80 64       	ori	r24, 0x40	; 64
    208a:	87 b9       	out	0x07, r24	; 7
			break;
		default:
			ADCMUX_REG = (ADCMUX_REG & 0x3F) | (1 << 6);
			break;
		}
}
    208c:	08 95       	ret

void ADC_Init( U8 Prescaler) {
	SET_BIT(ADCSRA_REG, 7);	//Enable ADC module
	CLR_BIT(ADCMUX_REG, 5); //left adjust

	switch (Prescaler) {
    208e:	84 30       	cpi	r24, 0x04	; 4
    2090:	31 f1       	breq	.+76     	; 0x20de <ADC_Init+0x7c>
    2092:	88 30       	cpi	r24, 0x08	; 8
    2094:	91 f0       	breq	.+36     	; 0x20ba <ADC_Init+0x58>
    2096:	82 30       	cpi	r24, 0x02	; 2
    2098:	41 f4       	brne	.+16     	; 0x20aa <ADC_Init+0x48>
		case 2:
			ADCSRA_REG = (ADCSRA_REG & 0xF8) | 0;
    209a:	86 b1       	in	r24, 0x06	; 6
    209c:	88 7f       	andi	r24, 0xF8	; 248
    209e:	86 b9       	out	0x06, r24	; 6
	switch (CONECTION_OF_REFERANCE) {
		case AREF:
			ADCMUX_REG = (ADCMUX_REG & 0x3F) | (0 << 6);
			break;
		case AVCC:
			ADCMUX_REG = (ADCMUX_REG & 0x3F) | (1 << 6);
    20a0:	87 b1       	in	r24, 0x07	; 7
    20a2:	8f 73       	andi	r24, 0x3F	; 63
    20a4:	80 64       	ori	r24, 0x40	; 64
    20a6:	87 b9       	out	0x07, r24	; 7
			break;
		default:
			ADCMUX_REG = (ADCMUX_REG & 0x3F) | (1 << 6);
			break;
		}
}
    20a8:	08 95       	ret
			break;
		case 128:
			ADCSRA_REG = (ADCSRA_REG & 0xF8) | 7;
			break;
		default:
			ADCSRA_REG = (ADCSRA_REG & 0xF8) | 7;
    20aa:	86 b1       	in	r24, 0x06	; 6
    20ac:	87 60       	ori	r24, 0x07	; 7
    20ae:	86 b9       	out	0x06, r24	; 6
	switch (CONECTION_OF_REFERANCE) {
		case AREF:
			ADCMUX_REG = (ADCMUX_REG & 0x3F) | (0 << 6);
			break;
		case AVCC:
			ADCMUX_REG = (ADCMUX_REG & 0x3F) | (1 << 6);
    20b0:	87 b1       	in	r24, 0x07	; 7
    20b2:	8f 73       	andi	r24, 0x3F	; 63
    20b4:	80 64       	ori	r24, 0x40	; 64
    20b6:	87 b9       	out	0x07, r24	; 7
			break;
		default:
			ADCMUX_REG = (ADCMUX_REG & 0x3F) | (1 << 6);
			break;
		}
}
    20b8:	08 95       	ret
			break;
		case 4:
			ADCSRA_REG = (ADCSRA_REG & 0xF8) | 2;
			break;
		case 8:
			ADCSRA_REG = (ADCSRA_REG & 0xF8) | 3;
    20ba:	86 b1       	in	r24, 0x06	; 6
    20bc:	88 7f       	andi	r24, 0xF8	; 248
    20be:	83 60       	ori	r24, 0x03	; 3
    20c0:	86 b9       	out	0x06, r24	; 6
	switch (CONECTION_OF_REFERANCE) {
		case AREF:
			ADCMUX_REG = (ADCMUX_REG & 0x3F) | (0 << 6);
			break;
		case AVCC:
			ADCMUX_REG = (ADCMUX_REG & 0x3F) | (1 << 6);
    20c2:	87 b1       	in	r24, 0x07	; 7
    20c4:	8f 73       	andi	r24, 0x3F	; 63
    20c6:	80 64       	ori	r24, 0x40	; 64
    20c8:	87 b9       	out	0x07, r24	; 7
			break;
		default:
			ADCMUX_REG = (ADCMUX_REG & 0x3F) | (1 << 6);
			break;
		}
}
    20ca:	08 95       	ret
			break;
		case 32:
			ADCSRA_REG = (ADCSRA_REG & 0xF8) | 5;
			break;
		case 64:
			ADCSRA_REG = (ADCSRA_REG & 0xF8) | 6;
    20cc:	86 b1       	in	r24, 0x06	; 6
    20ce:	88 7f       	andi	r24, 0xF8	; 248
    20d0:	86 60       	ori	r24, 0x06	; 6
    20d2:	86 b9       	out	0x06, r24	; 6
	switch (CONECTION_OF_REFERANCE) {
		case AREF:
			ADCMUX_REG = (ADCMUX_REG & 0x3F) | (0 << 6);
			break;
		case AVCC:
			ADCMUX_REG = (ADCMUX_REG & 0x3F) | (1 << 6);
    20d4:	87 b1       	in	r24, 0x07	; 7
    20d6:	8f 73       	andi	r24, 0x3F	; 63
    20d8:	80 64       	ori	r24, 0x40	; 64
    20da:	87 b9       	out	0x07, r24	; 7
			break;
		default:
			ADCMUX_REG = (ADCMUX_REG & 0x3F) | (1 << 6);
			break;
		}
}
    20dc:	08 95       	ret
	switch (Prescaler) {
		case 2:
			ADCSRA_REG = (ADCSRA_REG & 0xF8) | 0;
			break;
		case 4:
			ADCSRA_REG = (ADCSRA_REG & 0xF8) | 2;
    20de:	86 b1       	in	r24, 0x06	; 6
    20e0:	88 7f       	andi	r24, 0xF8	; 248
    20e2:	82 60       	ori	r24, 0x02	; 2
    20e4:	86 b9       	out	0x06, r24	; 6
	switch (CONECTION_OF_REFERANCE) {
		case AREF:
			ADCMUX_REG = (ADCMUX_REG & 0x3F) | (0 << 6);
			break;
		case AVCC:
			ADCMUX_REG = (ADCMUX_REG & 0x3F) | (1 << 6);
    20e6:	87 b1       	in	r24, 0x07	; 7
    20e8:	8f 73       	andi	r24, 0x3F	; 63
    20ea:	80 64       	ori	r24, 0x40	; 64
    20ec:	87 b9       	out	0x07, r24	; 7
			break;
		default:
			ADCMUX_REG = (ADCMUX_REG & 0x3F) | (1 << 6);
			break;
		}
}
    20ee:	08 95       	ret
			break;
		case 8:
			ADCSRA_REG = (ADCSRA_REG & 0xF8) | 3;
			break;
		case 16:
			ADCSRA_REG = (ADCSRA_REG & 0xF8) | 4;
    20f0:	86 b1       	in	r24, 0x06	; 6
    20f2:	88 7f       	andi	r24, 0xF8	; 248
    20f4:	84 60       	ori	r24, 0x04	; 4
    20f6:	86 b9       	out	0x06, r24	; 6
	switch (CONECTION_OF_REFERANCE) {
		case AREF:
			ADCMUX_REG = (ADCMUX_REG & 0x3F) | (0 << 6);
			break;
		case AVCC:
			ADCMUX_REG = (ADCMUX_REG & 0x3F) | (1 << 6);
    20f8:	87 b1       	in	r24, 0x07	; 7
    20fa:	8f 73       	andi	r24, 0x3F	; 63
    20fc:	80 64       	ori	r24, 0x40	; 64
    20fe:	87 b9       	out	0x07, r24	; 7
			break;
		default:
			ADCMUX_REG = (ADCMUX_REG & 0x3F) | (1 << 6);
			break;
		}
}
    2100:	08 95       	ret

00002102 <ADC_ReadChannel>:

U16 ADC_ReadChannel(U8 ChannelNumber) {//init pre and ref
	U16 ADC_RES;


	ADCMUX_REG = (ADCMUX_REG & 0xF8) | ChannelNumber;
    2102:	97 b1       	in	r25, 0x07	; 7
    2104:	98 7f       	andi	r25, 0xF8	; 248
    2106:	98 2b       	or	r25, r24
    2108:	97 b9       	out	0x07, r25	; 7
	SET_BIT(ADCSRA_REG, 6); //enable start conversion
    210a:	36 9a       	sbi	0x06, 6	; 6
	while (!(CHK_BIT(ADCSRA_REG, 4))) {
    210c:	34 9b       	sbis	0x06, 4	; 6
    210e:	fe cf       	rjmp	.-4      	; 0x210c <ADC_ReadChannel+0xa>
		//wait to the end of conversion
	}
	SET_BIT(ADCSRA_REG, 4); //clear flag
    2110:	34 9a       	sbi	0x06, 4	; 6
	ADC_RES = ADCL_REG | (ADCH_REG << 8);
    2112:	24 b1       	in	r18, 0x04	; 4
    2114:	45 b1       	in	r20, 0x05	; 5
    2116:	94 2f       	mov	r25, r20
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	28 2b       	or	r18, r24
    211e:	39 2b       	or	r19, r25
	return ADC_RES;
}
    2120:	c9 01       	movw	r24, r18
    2122:	08 95       	ret

00002124 <GINT_Global_Enable>:
 */

#include "GINT.h"

void GINT_Global_Enable(void) {
	SET_BIT(GINT_SREG_REG, 7);
    2124:	8f b7       	in	r24, 0x3f	; 63
    2126:	80 68       	ori	r24, 0x80	; 128
    2128:	8f bf       	out	0x3f, r24	; 63
}
    212a:	08 95       	ret

0000212c <GINT_Global_Disable>:
void GINT_Global_Disable(void) {
	CLR_BIT(GINT_SREG_REG, 7);
    212c:	8f b7       	in	r24, 0x3f	; 63
    212e:	8f 77       	andi	r24, 0x7F	; 127
    2130:	8f bf       	out	0x3f, r24	; 63
}
    2132:	08 95       	ret

00002134 <GINT_DisaleExtINT>:

void GINT_DisaleExtINT(Ext_INT_t INT) {
	switch (INT) {
    2134:	81 30       	cpi	r24, 0x01	; 1
    2136:	69 f0       	breq	.+26     	; 0x2152 <GINT_DisaleExtINT+0x1e>
    2138:	81 30       	cpi	r24, 0x01	; 1
    213a:	20 f4       	brcc	.+8      	; 0x2144 <GINT_DisaleExtINT+0x10>
	case INTR0:
		CLR_BIT(GINT_GICR_REG, 6);
    213c:	8b b7       	in	r24, 0x3b	; 59
    213e:	8f 7b       	andi	r24, 0xBF	; 191
    2140:	8b bf       	out	0x3b, r24	; 59
    2142:	08 95       	ret
void GINT_Global_Disable(void) {
	CLR_BIT(GINT_SREG_REG, 7);
}

void GINT_DisaleExtINT(Ext_INT_t INT) {
	switch (INT) {
    2144:	82 30       	cpi	r24, 0x02	; 2
    2146:	09 f0       	breq	.+2      	; 0x214a <GINT_DisaleExtINT+0x16>
    2148:	08 95       	ret
		break;
	case INTR1:
		CLR_BIT(GINT_GICR_REG, 7);
		break;
	case INTR2:
		CLR_BIT(GINT_GICR_REG, 5);
    214a:	8b b7       	in	r24, 0x3b	; 59
    214c:	8f 7d       	andi	r24, 0xDF	; 223
    214e:	8b bf       	out	0x3b, r24	; 59
    2150:	08 95       	ret
	switch (INT) {
	case INTR0:
		CLR_BIT(GINT_GICR_REG, 6);
		break;
	case INTR1:
		CLR_BIT(GINT_GICR_REG, 7);
    2152:	8b b7       	in	r24, 0x3b	; 59
    2154:	8f 77       	andi	r24, 0x7F	; 127
    2156:	8b bf       	out	0x3b, r24	; 59
    2158:	08 95       	ret

0000215a <GINT_EnaleExtINT>:
		break;
	}
}

void GINT_EnaleExtINT(Ext_INT_t INT) {
	switch (INT) {
    215a:	81 30       	cpi	r24, 0x01	; 1
    215c:	69 f0       	breq	.+26     	; 0x2178 <GINT_EnaleExtINT+0x1e>
    215e:	81 30       	cpi	r24, 0x01	; 1
    2160:	20 f4       	brcc	.+8      	; 0x216a <GINT_EnaleExtINT+0x10>
	case INTR0:
		SET_BIT(GINT_GICR_REG, 6);
    2162:	8b b7       	in	r24, 0x3b	; 59
    2164:	80 64       	ori	r24, 0x40	; 64
    2166:	8b bf       	out	0x3b, r24	; 59
    2168:	08 95       	ret
		break;
	}
}

void GINT_EnaleExtINT(Ext_INT_t INT) {
	switch (INT) {
    216a:	82 30       	cpi	r24, 0x02	; 2
    216c:	09 f0       	breq	.+2      	; 0x2170 <GINT_EnaleExtINT+0x16>
    216e:	08 95       	ret
		break;
	case INTR1:
		SET_BIT(GINT_GICR_REG, 7);
		break;
	case INTR2:
		SET_BIT(GINT_GICR_REG, 5);
    2170:	8b b7       	in	r24, 0x3b	; 59
    2172:	80 62       	ori	r24, 0x20	; 32
    2174:	8b bf       	out	0x3b, r24	; 59
    2176:	08 95       	ret
	switch (INT) {
	case INTR0:
		SET_BIT(GINT_GICR_REG, 6);
		break;
	case INTR1:
		SET_BIT(GINT_GICR_REG, 7);
    2178:	8b b7       	in	r24, 0x3b	; 59
    217a:	80 68       	ori	r24, 0x80	; 128
    217c:	8b bf       	out	0x3b, r24	; 59
    217e:	08 95       	ret

00002180 <GINT_Ext_Interrupt_Mode>:
	}

}

void GINT_Ext_Interrupt_Mode(Ext_INT_t ID, Ext_Mode mode) {
	switch (ID) {
    2180:	81 30       	cpi	r24, 0x01	; 1
    2182:	c1 f0       	breq	.+48     	; 0x21b4 <GINT_Ext_Interrupt_Mode+0x34>
    2184:	81 30       	cpi	r24, 0x01	; 1
    2186:	58 f4       	brcc	.+22     	; 0x219e <GINT_Ext_Interrupt_Mode+0x1e>
	case INTR0:
		switch (mode) {
    2188:	61 30       	cpi	r22, 0x01	; 1
    218a:	51 f1       	breq	.+84     	; 0x21e0 <GINT_Ext_Interrupt_Mode+0x60>
    218c:	61 30       	cpi	r22, 0x01	; 1
    218e:	d0 f5       	brcc	.+116    	; 0x2204 <GINT_Ext_Interrupt_Mode+0x84>
		case Low_level:
			CLR_BIT(GINT_MCUCR_REG, 0);
    2190:	85 b7       	in	r24, 0x35	; 53
    2192:	8e 7f       	andi	r24, 0xFE	; 254
    2194:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(GINT_MCUCR_REG, 1);
    2196:	85 b7       	in	r24, 0x35	; 53
    2198:	8d 7f       	andi	r24, 0xFD	; 253
    219a:	85 bf       	out	0x35, r24	; 53
    219c:	08 95       	ret
	}

}

void GINT_Ext_Interrupt_Mode(Ext_INT_t ID, Ext_Mode mode) {
	switch (ID) {
    219e:	82 30       	cpi	r24, 0x02	; 2
    21a0:	09 f0       	breq	.+2      	; 0x21a4 <GINT_Ext_Interrupt_Mode+0x24>
    21a2:	08 95       	ret
			SET_BIT(GINT_MCUCR_REG, 3);
			break;
		}
		break;
	case INTR2:
		switch (mode) {
    21a4:	62 30       	cpi	r22, 0x02	; 2
    21a6:	89 f0       	breq	.+34     	; 0x21ca <GINT_Ext_Interrupt_Mode+0x4a>
    21a8:	63 30       	cpi	r22, 0x03	; 3
    21aa:	b9 f1       	breq	.+110    	; 0x221a <GINT_Ext_Interrupt_Mode+0x9a>
			break;
		case Rising_Edge:
			SET_BIT(GINT_MCUCSR_REG, 6);
			break;
		default:
			CLR_BIT(GINT_MCUCSR_REG, 6);
    21ac:	84 b7       	in	r24, 0x34	; 52
    21ae:	8f 7b       	andi	r24, 0xBF	; 191
    21b0:	84 bf       	out	0x34, r24	; 52
    21b2:	08 95       	ret
			SET_BIT(GINT_MCUCR_REG, 1);
			break;
		}
		break;
	case INTR1:
		switch (mode) {
    21b4:	61 30       	cpi	r22, 0x01	; 1
    21b6:	69 f0       	breq	.+26     	; 0x21d2 <GINT_Ext_Interrupt_Mode+0x52>
    21b8:	61 30       	cpi	r22, 0x01	; 1
    21ba:	c8 f4       	brcc	.+50     	; 0x21ee <GINT_Ext_Interrupt_Mode+0x6e>
		case Low_level:
			CLR_BIT(GINT_MCUCR_REG, 2);
    21bc:	85 b7       	in	r24, 0x35	; 53
    21be:	8b 7f       	andi	r24, 0xFB	; 251
    21c0:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(GINT_MCUCR_REG, 3);
    21c2:	85 b7       	in	r24, 0x35	; 53
    21c4:	87 7f       	andi	r24, 0xF7	; 247
    21c6:	85 bf       	out	0x35, r24	; 53
    21c8:	08 95       	ret
		}
		break;
	case INTR2:
		switch (mode) {
		case Falling_Edge:
			CLR_BIT(GINT_MCUCSR_REG, 6);
    21ca:	84 b7       	in	r24, 0x34	; 52
    21cc:	8f 7b       	andi	r24, 0xBF	; 191
    21ce:	84 bf       	out	0x34, r24	; 52
    21d0:	08 95       	ret
		case Low_level:
			CLR_BIT(GINT_MCUCR_REG, 2);
			CLR_BIT(GINT_MCUCR_REG, 3);
			break;
		case AnyLogic:
			SET_BIT(GINT_MCUCR_REG, 2);
    21d2:	85 b7       	in	r24, 0x35	; 53
    21d4:	84 60       	ori	r24, 0x04	; 4
    21d6:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(GINT_MCUCR_REG, 3);
    21d8:	85 b7       	in	r24, 0x35	; 53
    21da:	87 7f       	andi	r24, 0xF7	; 247
    21dc:	85 bf       	out	0x35, r24	; 53
    21de:	08 95       	ret
		case Low_level:
			CLR_BIT(GINT_MCUCR_REG, 0);
			CLR_BIT(GINT_MCUCR_REG, 1);
			break;
		case AnyLogic:
			SET_BIT(GINT_MCUCR_REG, 0);
    21e0:	85 b7       	in	r24, 0x35	; 53
    21e2:	81 60       	ori	r24, 0x01	; 1
    21e4:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(GINT_MCUCR_REG, 1);
    21e6:	85 b7       	in	r24, 0x35	; 53
    21e8:	8d 7f       	andi	r24, 0xFD	; 253
    21ea:	85 bf       	out	0x35, r24	; 53
    21ec:	08 95       	ret
			SET_BIT(GINT_MCUCR_REG, 1);
			break;
		}
		break;
	case INTR1:
		switch (mode) {
    21ee:	62 30       	cpi	r22, 0x02	; 2
    21f0:	f9 f0       	breq	.+62     	; 0x2230 <GINT_Ext_Interrupt_Mode+0xb0>
    21f2:	63 30       	cpi	r22, 0x03	; 3
    21f4:	b1 f6       	brne	.-84     	; 0x21a2 <GINT_Ext_Interrupt_Mode+0x22>
		case Falling_Edge:
			CLR_BIT(GINT_MCUCR_REG, 2);
			SET_BIT(GINT_MCUCR_REG, 3);
			break;
		case Rising_Edge:
			SET_BIT(GINT_MCUCR_REG, 2);
    21f6:	85 b7       	in	r24, 0x35	; 53
    21f8:	84 60       	ori	r24, 0x04	; 4
    21fa:	85 bf       	out	0x35, r24	; 53
			SET_BIT(GINT_MCUCR_REG, 3);
    21fc:	85 b7       	in	r24, 0x35	; 53
    21fe:	88 60       	ori	r24, 0x08	; 8
    2200:	85 bf       	out	0x35, r24	; 53
    2202:	08 95       	ret
}

void GINT_Ext_Interrupt_Mode(Ext_INT_t ID, Ext_Mode mode) {
	switch (ID) {
	case INTR0:
		switch (mode) {
    2204:	62 30       	cpi	r22, 0x02	; 2
    2206:	69 f0       	breq	.+26     	; 0x2222 <GINT_Ext_Interrupt_Mode+0xa2>
    2208:	63 30       	cpi	r22, 0x03	; 3
    220a:	59 f6       	brne	.-106    	; 0x21a2 <GINT_Ext_Interrupt_Mode+0x22>
		case Falling_Edge:
			CLR_BIT(GINT_MCUCR_REG, 0);
			SET_BIT(GINT_MCUCR_REG, 1);
			break;
		case Rising_Edge:
			SET_BIT(GINT_MCUCR_REG, 0);
    220c:	85 b7       	in	r24, 0x35	; 53
    220e:	81 60       	ori	r24, 0x01	; 1
    2210:	85 bf       	out	0x35, r24	; 53
			SET_BIT(GINT_MCUCR_REG, 1);
    2212:	85 b7       	in	r24, 0x35	; 53
    2214:	82 60       	ori	r24, 0x02	; 2
    2216:	85 bf       	out	0x35, r24	; 53
    2218:	08 95       	ret
		switch (mode) {
		case Falling_Edge:
			CLR_BIT(GINT_MCUCSR_REG, 6);
			break;
		case Rising_Edge:
			SET_BIT(GINT_MCUCSR_REG, 6);
    221a:	84 b7       	in	r24, 0x34	; 52
    221c:	80 64       	ori	r24, 0x40	; 64
    221e:	84 bf       	out	0x34, r24	; 52
    2220:	08 95       	ret
		case AnyLogic:
			SET_BIT(GINT_MCUCR_REG, 0);
			CLR_BIT(GINT_MCUCR_REG, 1);
			break;
		case Falling_Edge:
			CLR_BIT(GINT_MCUCR_REG, 0);
    2222:	85 b7       	in	r24, 0x35	; 53
    2224:	8e 7f       	andi	r24, 0xFE	; 254
    2226:	85 bf       	out	0x35, r24	; 53
			SET_BIT(GINT_MCUCR_REG, 1);
    2228:	85 b7       	in	r24, 0x35	; 53
    222a:	82 60       	ori	r24, 0x02	; 2
    222c:	85 bf       	out	0x35, r24	; 53
    222e:	08 95       	ret
		case AnyLogic:
			SET_BIT(GINT_MCUCR_REG, 2);
			CLR_BIT(GINT_MCUCR_REG, 3);
			break;
		case Falling_Edge:
			CLR_BIT(GINT_MCUCR_REG, 2);
    2230:	85 b7       	in	r24, 0x35	; 53
    2232:	8b 7f       	andi	r24, 0xFB	; 251
    2234:	85 bf       	out	0x35, r24	; 53
			SET_BIT(GINT_MCUCR_REG, 3);
    2236:	85 b7       	in	r24, 0x35	; 53
    2238:	88 60       	ori	r24, 0x08	; 8
    223a:	85 bf       	out	0x35, r24	; 53
    223c:	08 95       	ret

0000223e <GINT_Enable_InternalInt>:
		break;
	}
}

void GINT_Enable_InternalInt(Internal_INT ID) {
	switch (ID) {
    223e:	88 23       	and	r24, r24
    2240:	21 f4       	brne	.+8      	; 0x224a <GINT_Enable_InternalInt+0xc>
	case TMIR0:
		SET_BIT(TIMSK_REG, 0);
    2242:	89 b7       	in	r24, 0x39	; 57
    2244:	81 60       	ori	r24, 0x01	; 1
    2246:	89 bf       	out	0x39, r24	; 57
    2248:	08 95       	ret
		break;
	}
}

void GINT_Enable_InternalInt(Internal_INT ID) {
	switch (ID) {
    224a:	82 30       	cpi	r24, 0x02	; 2
    224c:	09 f0       	breq	.+2      	; 0x2250 <GINT_Enable_InternalInt+0x12>
    224e:	08 95       	ret
	case TMIR0:
		SET_BIT(TIMSK_REG, 0);
		break;
	case TMER2:
		SET_BIT(TIMSK_REG, 6);
    2250:	89 b7       	in	r24, 0x39	; 57
    2252:	80 64       	ori	r24, 0x40	; 64
    2254:	89 bf       	out	0x39, r24	; 57
    2256:	08 95       	ret

00002258 <GINT_Disable_InternalInt>:
		break;
	}
}

void GINT_Disable_InternalInt(Internal_INT ID) {
	switch (ID) {
    2258:	88 23       	and	r24, r24
    225a:	19 f4       	brne	.+6      	; 0x2262 <GINT_Disable_InternalInt+0xa>
	case TMIR0:
		CLR_BIT(TIMSK_REG, 0);
    225c:	89 b7       	in	r24, 0x39	; 57
    225e:	8e 7f       	andi	r24, 0xFE	; 254
    2260:	89 bf       	out	0x39, r24	; 57
    2262:	08 95       	ret

00002264 <Dio_config>:


#include <dio.h>

void Dio_config(Dio_port_t port,Dio_pin_t pin,Dio_Dirction_t dirction){
switch(port){
    2264:	81 30       	cpi	r24, 0x01	; 1
    2266:	29 f1       	breq	.+74     	; 0x22b2 <Dio_config+0x4e>
    2268:	81 30       	cpi	r24, 0x01	; 1
    226a:	28 f0       	brcs	.+10     	; 0x2276 <Dio_config+0x12>
    226c:	82 30       	cpi	r24, 0x02	; 2
    226e:	79 f1       	breq	.+94     	; 0x22ce <Dio_config+0x6a>
    2270:	83 30       	cpi	r24, 0x03	; 3
    2272:	81 f0       	breq	.+32     	; 0x2294 <Dio_config+0x30>
    2274:	08 95       	ret
case Dio_PORTA:
	if(dirction==OUTPUT){
    2276:	41 30       	cpi	r20, 0x01	; 1
    2278:	09 f4       	brne	.+2      	; 0x227c <Dio_config+0x18>
    227a:	4d c0       	rjmp	.+154    	; 0x2316 <Dio_config+0xb2>
		SET_BIT(DDRA_REG,pin);
	}else{
		CLR_BIT(DDRA_REG,pin);
    227c:	2a b3       	in	r18, 0x1a	; 26
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	02 c0       	rjmp	.+4      	; 0x2288 <Dio_config+0x24>
    2284:	88 0f       	add	r24, r24
    2286:	99 1f       	adc	r25, r25
    2288:	6a 95       	dec	r22
    228a:	e2 f7       	brpl	.-8      	; 0x2284 <Dio_config+0x20>
    228c:	80 95       	com	r24
    228e:	82 23       	and	r24, r18
    2290:	8a bb       	out	0x1a, r24	; 26
    2292:	08 95       	ret
		}else{
			CLR_BIT(DDRC_REG,pin);
		}
	break;
case Dio_PORTD:
	if(dirction==OUTPUT){
    2294:	41 30       	cpi	r20, 0x01	; 1
    2296:	09 f4       	brne	.+2      	; 0x229a <Dio_config+0x36>
    2298:	49 c0       	rjmp	.+146    	; 0x232c <Dio_config+0xc8>
			SET_BIT(DDRD_REG,pin);
		}else{
			CLR_BIT(DDRD_REG,pin);
    229a:	21 b3       	in	r18, 0x11	; 17
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	02 c0       	rjmp	.+4      	; 0x22a6 <Dio_config+0x42>
    22a2:	88 0f       	add	r24, r24
    22a4:	99 1f       	adc	r25, r25
    22a6:	6a 95       	dec	r22
    22a8:	e2 f7       	brpl	.-8      	; 0x22a2 <Dio_config+0x3e>
    22aa:	80 95       	com	r24
    22ac:	82 23       	and	r24, r18
    22ae:	81 bb       	out	0x11, r24	; 17
    22b0:	08 95       	ret
	}else{
		CLR_BIT(DDRA_REG,pin);
	}
	break;
case Dio_PORTB:
	if(dirction==OUTPUT){
    22b2:	41 30       	cpi	r20, 0x01	; 1
    22b4:	29 f1       	breq	.+74     	; 0x2300 <Dio_config+0x9c>
			SET_BIT(DDRB_REG,pin);
		}else{
			CLR_BIT(DDRB_REG,pin);
    22b6:	27 b3       	in	r18, 0x17	; 23
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <Dio_config+0x5e>
    22be:	88 0f       	add	r24, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	6a 95       	dec	r22
    22c4:	e2 f7       	brpl	.-8      	; 0x22be <Dio_config+0x5a>
    22c6:	80 95       	com	r24
    22c8:	82 23       	and	r24, r18
    22ca:	87 bb       	out	0x17, r24	; 23
    22cc:	08 95       	ret
		}
	break;
case Dio_PORTC:
	if(dirction==OUTPUT){
    22ce:	41 30       	cpi	r20, 0x01	; 1
    22d0:	61 f0       	breq	.+24     	; 0x22ea <Dio_config+0x86>
			SET_BIT(DDRC_REG,pin);
		}else{
			CLR_BIT(DDRC_REG,pin);
    22d2:	24 b3       	in	r18, 0x14	; 20
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <Dio_config+0x7a>
    22da:	88 0f       	add	r24, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	6a 95       	dec	r22
    22e0:	e2 f7       	brpl	.-8      	; 0x22da <Dio_config+0x76>
    22e2:	80 95       	com	r24
    22e4:	82 23       	and	r24, r18
    22e6:	84 bb       	out	0x14, r24	; 20
    22e8:	08 95       	ret
			CLR_BIT(DDRB_REG,pin);
		}
	break;
case Dio_PORTC:
	if(dirction==OUTPUT){
			SET_BIT(DDRC_REG,pin);
    22ea:	24 b3       	in	r18, 0x14	; 20
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	02 c0       	rjmp	.+4      	; 0x22f6 <Dio_config+0x92>
    22f2:	88 0f       	add	r24, r24
    22f4:	99 1f       	adc	r25, r25
    22f6:	6a 95       	dec	r22
    22f8:	e2 f7       	brpl	.-8      	; 0x22f2 <Dio_config+0x8e>
    22fa:	28 2b       	or	r18, r24
    22fc:	24 bb       	out	0x14, r18	; 20
    22fe:	08 95       	ret
		CLR_BIT(DDRA_REG,pin);
	}
	break;
case Dio_PORTB:
	if(dirction==OUTPUT){
			SET_BIT(DDRB_REG,pin);
    2300:	27 b3       	in	r18, 0x17	; 23
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	02 c0       	rjmp	.+4      	; 0x230c <Dio_config+0xa8>
    2308:	88 0f       	add	r24, r24
    230a:	99 1f       	adc	r25, r25
    230c:	6a 95       	dec	r22
    230e:	e2 f7       	brpl	.-8      	; 0x2308 <Dio_config+0xa4>
    2310:	28 2b       	or	r18, r24
    2312:	27 bb       	out	0x17, r18	; 23
    2314:	08 95       	ret

void Dio_config(Dio_port_t port,Dio_pin_t pin,Dio_Dirction_t dirction){
switch(port){
case Dio_PORTA:
	if(dirction==OUTPUT){
		SET_BIT(DDRA_REG,pin);
    2316:	2a b3       	in	r18, 0x1a	; 26
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <Dio_config+0xbe>
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	6a 95       	dec	r22
    2324:	e2 f7       	brpl	.-8      	; 0x231e <Dio_config+0xba>
    2326:	28 2b       	or	r18, r24
    2328:	2a bb       	out	0x1a, r18	; 26
    232a:	08 95       	ret
			CLR_BIT(DDRC_REG,pin);
		}
	break;
case Dio_PORTD:
	if(dirction==OUTPUT){
			SET_BIT(DDRD_REG,pin);
    232c:	21 b3       	in	r18, 0x11	; 17
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <Dio_config+0xd4>
    2334:	88 0f       	add	r24, r24
    2336:	99 1f       	adc	r25, r25
    2338:	6a 95       	dec	r22
    233a:	e2 f7       	brpl	.-8      	; 0x2334 <Dio_config+0xd0>
    233c:	28 2b       	or	r18, r24
    233e:	21 bb       	out	0x11, r18	; 17
    2340:	08 95       	ret

00002342 <Dio_write>:
	break;

}
}
void Dio_write(Dio_port_t port,Dio_pin_t pin,Dio_level_t level){
	switch(port){
    2342:	81 30       	cpi	r24, 0x01	; 1
    2344:	19 f1       	breq	.+70     	; 0x238c <Dio_write+0x4a>
    2346:	81 30       	cpi	r24, 0x01	; 1
    2348:	28 f0       	brcs	.+10     	; 0x2354 <Dio_write+0x12>
    234a:	82 30       	cpi	r24, 0x02	; 2
    234c:	69 f1       	breq	.+90     	; 0x23a8 <Dio_write+0x66>
    234e:	83 30       	cpi	r24, 0x03	; 3
    2350:	79 f0       	breq	.+30     	; 0x2370 <Dio_write+0x2e>
    2352:	08 95       	ret
	case Dio_PORTA:
		if(level==Dio_LOW){
    2354:	44 23       	and	r20, r20
    2356:	b1 f5       	brne	.+108    	; 0x23c4 <Dio_write+0x82>
					CLR_BIT(PORTA_REG,pin);
    2358:	2b b3       	in	r18, 0x1b	; 27
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	02 c0       	rjmp	.+4      	; 0x2364 <Dio_write+0x22>
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	6a 95       	dec	r22
    2366:	e2 f7       	brpl	.-8      	; 0x2360 <Dio_write+0x1e>
    2368:	80 95       	com	r24
    236a:	82 23       	and	r24, r18
    236c:	8b bb       	out	0x1b, r24	; 27
    236e:	08 95       	ret
					SET_BIT(PORTC_REG,pin);
				}

		break;
	case Dio_PORTD:
		if(level==Dio_LOW){
    2370:	44 23       	and	r20, r20
    2372:	09 f4       	brne	.+2      	; 0x2376 <Dio_write+0x34>
    2374:	48 c0       	rjmp	.+144    	; 0x2406 <Dio_write+0xc4>
					CLR_BIT(PORTD_REG,pin);
				}else{
					SET_BIT(PORTD_REG,pin);
    2376:	22 b3       	in	r18, 0x12	; 18
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	02 c0       	rjmp	.+4      	; 0x2382 <Dio_write+0x40>
    237e:	88 0f       	add	r24, r24
    2380:	99 1f       	adc	r25, r25
    2382:	6a 95       	dec	r22
    2384:	e2 f7       	brpl	.-8      	; 0x237e <Dio_write+0x3c>
    2386:	28 2b       	or	r18, r24
    2388:	22 bb       	out	0x12, r18	; 18
    238a:	08 95       	ret
				}else{
					SET_BIT(PORTA_REG,pin);
				}
		break;
	case Dio_PORTB:
		if(level==Dio_LOW){
    238c:	44 23       	and	r20, r20
    238e:	81 f5       	brne	.+96     	; 0x23f0 <Dio_write+0xae>
					CLR_BIT(PORTB_REG,pin);
    2390:	28 b3       	in	r18, 0x18	; 24
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	02 c0       	rjmp	.+4      	; 0x239c <Dio_write+0x5a>
    2398:	88 0f       	add	r24, r24
    239a:	99 1f       	adc	r25, r25
    239c:	6a 95       	dec	r22
    239e:	e2 f7       	brpl	.-8      	; 0x2398 <Dio_write+0x56>
    23a0:	80 95       	com	r24
    23a2:	82 23       	and	r24, r18
    23a4:	88 bb       	out	0x18, r24	; 24
    23a6:	08 95       	ret
				}else{
					SET_BIT(PORTB_REG,pin);
				}
		break;
	case Dio_PORTC:
		if(level==Dio_LOW){
    23a8:	44 23       	and	r20, r20
    23aa:	b9 f4       	brne	.+46     	; 0x23da <Dio_write+0x98>
					CLR_BIT(PORTC_REG,pin);
    23ac:	25 b3       	in	r18, 0x15	; 21
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	02 c0       	rjmp	.+4      	; 0x23b8 <Dio_write+0x76>
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	6a 95       	dec	r22
    23ba:	e2 f7       	brpl	.-8      	; 0x23b4 <Dio_write+0x72>
    23bc:	80 95       	com	r24
    23be:	82 23       	and	r24, r18
    23c0:	85 bb       	out	0x15, r24	; 21
    23c2:	08 95       	ret
	switch(port){
	case Dio_PORTA:
		if(level==Dio_LOW){
					CLR_BIT(PORTA_REG,pin);
				}else{
					SET_BIT(PORTA_REG,pin);
    23c4:	2b b3       	in	r18, 0x1b	; 27
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <Dio_write+0x8e>
    23cc:	88 0f       	add	r24, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	6a 95       	dec	r22
    23d2:	e2 f7       	brpl	.-8      	; 0x23cc <Dio_write+0x8a>
    23d4:	28 2b       	or	r18, r24
    23d6:	2b bb       	out	0x1b, r18	; 27
    23d8:	08 95       	ret
		break;
	case Dio_PORTC:
		if(level==Dio_LOW){
					CLR_BIT(PORTC_REG,pin);
				}else{
					SET_BIT(PORTC_REG,pin);
    23da:	25 b3       	in	r18, 0x15	; 21
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	02 c0       	rjmp	.+4      	; 0x23e6 <Dio_write+0xa4>
    23e2:	88 0f       	add	r24, r24
    23e4:	99 1f       	adc	r25, r25
    23e6:	6a 95       	dec	r22
    23e8:	e2 f7       	brpl	.-8      	; 0x23e2 <Dio_write+0xa0>
    23ea:	28 2b       	or	r18, r24
    23ec:	25 bb       	out	0x15, r18	; 21
    23ee:	08 95       	ret
		break;
	case Dio_PORTB:
		if(level==Dio_LOW){
					CLR_BIT(PORTB_REG,pin);
				}else{
					SET_BIT(PORTB_REG,pin);
    23f0:	28 b3       	in	r18, 0x18	; 24
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	02 c0       	rjmp	.+4      	; 0x23fc <Dio_write+0xba>
    23f8:	88 0f       	add	r24, r24
    23fa:	99 1f       	adc	r25, r25
    23fc:	6a 95       	dec	r22
    23fe:	e2 f7       	brpl	.-8      	; 0x23f8 <Dio_write+0xb6>
    2400:	28 2b       	or	r18, r24
    2402:	28 bb       	out	0x18, r18	; 24
    2404:	08 95       	ret
				}

		break;
	case Dio_PORTD:
		if(level==Dio_LOW){
					CLR_BIT(PORTD_REG,pin);
    2406:	22 b3       	in	r18, 0x12	; 18
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	02 c0       	rjmp	.+4      	; 0x2412 <Dio_write+0xd0>
    240e:	88 0f       	add	r24, r24
    2410:	99 1f       	adc	r25, r25
    2412:	6a 95       	dec	r22
    2414:	e2 f7       	brpl	.-8      	; 0x240e <Dio_write+0xcc>
    2416:	80 95       	com	r24
    2418:	82 23       	and	r24, r18
    241a:	82 bb       	out	0x12, r24	; 18
    241c:	08 95       	ret

0000241e <Dio_read>:
		break;
	}
}
Dio_level_t Dio_read(Dio_port_t port,Dio_pin_t pin){
	Dio_level_t read=Dio_LOW;
	switch(port){
    241e:	81 30       	cpi	r24, 0x01	; 1
    2420:	d1 f0       	breq	.+52     	; 0x2456 <Dio_read+0x38>
    2422:	81 30       	cpi	r24, 0x01	; 1
    2424:	30 f0       	brcs	.+12     	; 0x2432 <Dio_read+0x14>
    2426:	82 30       	cpi	r24, 0x02	; 2
    2428:	f9 f0       	breq	.+62     	; 0x2468 <Dio_read+0x4a>
    242a:	83 30       	cpi	r24, 0x03	; 3
    242c:	59 f0       	breq	.+22     	; 0x2444 <Dio_read+0x26>
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	08 95       	ret
	case Dio_PORTA:
		read=CHK_BIT(PINA_REG,pin);
    2432:	89 b3       	in	r24, 0x19	; 25
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	02 c0       	rjmp	.+4      	; 0x243c <Dio_read+0x1e>
    2438:	95 95       	asr	r25
    243a:	87 95       	ror	r24
    243c:	6a 95       	dec	r22
    243e:	e2 f7       	brpl	.-8      	; 0x2438 <Dio_read+0x1a>
    2440:	81 70       	andi	r24, 0x01	; 1
    2442:	08 95       	ret
	break;
	case Dio_PORTC:
		read=CHK_BIT(PINC_REG,pin);
	break;
	case Dio_PORTD:
		read=CHK_BIT(PIND_REG,pin);
    2444:	80 b3       	in	r24, 0x10	; 16
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	02 c0       	rjmp	.+4      	; 0x244e <Dio_read+0x30>
    244a:	95 95       	asr	r25
    244c:	87 95       	ror	r24
    244e:	6a 95       	dec	r22
    2450:	e2 f7       	brpl	.-8      	; 0x244a <Dio_read+0x2c>
    2452:	81 70       	andi	r24, 0x01	; 1
	break;
	}

	return read;
}
    2454:	08 95       	ret
	switch(port){
	case Dio_PORTA:
		read=CHK_BIT(PINA_REG,pin);
	break;
	case Dio_PORTB:
		read=CHK_BIT(PINB_REG,pin);
    2456:	86 b3       	in	r24, 0x16	; 22
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	02 c0       	rjmp	.+4      	; 0x2460 <Dio_read+0x42>
    245c:	95 95       	asr	r25
    245e:	87 95       	ror	r24
    2460:	6a 95       	dec	r22
    2462:	e2 f7       	brpl	.-8      	; 0x245c <Dio_read+0x3e>
    2464:	81 70       	andi	r24, 0x01	; 1
    2466:	08 95       	ret
	break;
	case Dio_PORTC:
		read=CHK_BIT(PINC_REG,pin);
    2468:	83 b3       	in	r24, 0x13	; 19
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <Dio_read+0x54>
    246e:	95 95       	asr	r25
    2470:	87 95       	ror	r24
    2472:	6a 95       	dec	r22
    2474:	e2 f7       	brpl	.-8      	; 0x246e <Dio_read+0x50>
    2476:	81 70       	andi	r24, 0x01	; 1
    2478:	08 95       	ret

0000247a <Dio_writeChannelGroup>:
	}

	return read;
}
void Dio_writeChannelGroup(Dio_port_t port,U8 value,U8 mask){
	switch(port){
    247a:	81 30       	cpi	r24, 0x01	; 1
    247c:	b9 f0       	breq	.+46     	; 0x24ac <Dio_writeChannelGroup+0x32>
    247e:	81 30       	cpi	r24, 0x01	; 1
    2480:	28 f0       	brcs	.+10     	; 0x248c <Dio_writeChannelGroup+0x12>
    2482:	82 30       	cpi	r24, 0x02	; 2
    2484:	d9 f0       	breq	.+54     	; 0x24bc <Dio_writeChannelGroup+0x42>
    2486:	83 30       	cpi	r24, 0x03	; 3
    2488:	49 f0       	breq	.+18     	; 0x249c <Dio_writeChannelGroup+0x22>
    248a:	08 95       	ret
	case Dio_PORTA :
		PORTA_REG  = (PORTA_REG&~mask)|(value & mask);
    248c:	9b b3       	in	r25, 0x1b	; 27
    248e:	84 2f       	mov	r24, r20
    2490:	80 95       	com	r24
    2492:	89 23       	and	r24, r25
    2494:	46 23       	and	r20, r22
    2496:	84 2b       	or	r24, r20
    2498:	8b bb       	out	0x1b, r24	; 27
    249a:	08 95       	ret
			break;
	case Dio_PORTC:
		PORTC_REG  = (PORTC_REG&~mask)|(value & mask);
			break;
	case Dio_PORTD:
		PORTD_REG  = (PORTD_REG&~mask)|(value & mask);
    249c:	92 b3       	in	r25, 0x12	; 18
    249e:	84 2f       	mov	r24, r20
    24a0:	80 95       	com	r24
    24a2:	89 23       	and	r24, r25
    24a4:	46 23       	and	r20, r22
    24a6:	84 2b       	or	r24, r20
    24a8:	82 bb       	out	0x12, r24	; 18
    24aa:	08 95       	ret
	switch(port){
	case Dio_PORTA :
		PORTA_REG  = (PORTA_REG&~mask)|(value & mask);
			break;
	case Dio_PORTB:
		PORTB_REG  = (PORTB_REG&~mask)|(value & mask);
    24ac:	98 b3       	in	r25, 0x18	; 24
    24ae:	84 2f       	mov	r24, r20
    24b0:	80 95       	com	r24
    24b2:	89 23       	and	r24, r25
    24b4:	46 23       	and	r20, r22
    24b6:	84 2b       	or	r24, r20
    24b8:	88 bb       	out	0x18, r24	; 24
    24ba:	08 95       	ret
			break;
	case Dio_PORTC:
		PORTC_REG  = (PORTC_REG&~mask)|(value & mask);
    24bc:	95 b3       	in	r25, 0x15	; 21
    24be:	84 2f       	mov	r24, r20
    24c0:	80 95       	com	r24
    24c2:	89 23       	and	r24, r25
    24c4:	46 23       	and	r20, r22
    24c6:	84 2b       	or	r24, r20
    24c8:	85 bb       	out	0x15, r24	; 21
    24ca:	08 95       	ret

000024cc <Dio_ToggleChannel>:



void Dio_ToggleChannel(Dio_port_t port, Dio_pin_t pin)
{
	switch (port)
    24cc:	81 30       	cpi	r24, 0x01	; 1
    24ce:	e9 f0       	breq	.+58     	; 0x250a <Dio_ToggleChannel+0x3e>
    24d0:	81 30       	cpi	r24, 0x01	; 1
    24d2:	28 f0       	brcs	.+10     	; 0x24de <Dio_ToggleChannel+0x12>
    24d4:	82 30       	cpi	r24, 0x02	; 2
    24d6:	21 f1       	breq	.+72     	; 0x2520 <Dio_ToggleChannel+0x54>
    24d8:	83 30       	cpi	r24, 0x03	; 3
    24da:	61 f0       	breq	.+24     	; 0x24f4 <Dio_ToggleChannel+0x28>
    24dc:	08 95       	ret
	{
	case Dio_PORTA:
		TOGGLE_BIT(PORTA_REG,pin);
    24de:	2b b3       	in	r18, 0x1b	; 27
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	02 c0       	rjmp	.+4      	; 0x24ea <Dio_ToggleChannel+0x1e>
    24e6:	88 0f       	add	r24, r24
    24e8:	99 1f       	adc	r25, r25
    24ea:	6a 95       	dec	r22
    24ec:	e2 f7       	brpl	.-8      	; 0x24e6 <Dio_ToggleChannel+0x1a>
    24ee:	28 27       	eor	r18, r24
    24f0:	2b bb       	out	0x1b, r18	; 27
    24f2:	08 95       	ret
	case Dio_PORTC:
		TOGGLE_BIT(PORTC_REG,pin);
		break;

	case Dio_PORTD:
		TOGGLE_BIT(PORTD_REG,pin);
    24f4:	22 b3       	in	r18, 0x12	; 18
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	02 c0       	rjmp	.+4      	; 0x2500 <Dio_ToggleChannel+0x34>
    24fc:	88 0f       	add	r24, r24
    24fe:	99 1f       	adc	r25, r25
    2500:	6a 95       	dec	r22
    2502:	e2 f7       	brpl	.-8      	; 0x24fc <Dio_ToggleChannel+0x30>
    2504:	28 27       	eor	r18, r24
    2506:	22 bb       	out	0x12, r18	; 18
    2508:	08 95       	ret
	case Dio_PORTA:
		TOGGLE_BIT(PORTA_REG,pin);
		break;

	case Dio_PORTB:
		TOGGLE_BIT(PORTB_REG,pin);
    250a:	28 b3       	in	r18, 0x18	; 24
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	02 c0       	rjmp	.+4      	; 0x2516 <Dio_ToggleChannel+0x4a>
    2512:	88 0f       	add	r24, r24
    2514:	99 1f       	adc	r25, r25
    2516:	6a 95       	dec	r22
    2518:	e2 f7       	brpl	.-8      	; 0x2512 <Dio_ToggleChannel+0x46>
    251a:	28 27       	eor	r18, r24
    251c:	28 bb       	out	0x18, r18	; 24
    251e:	08 95       	ret
		break;

	case Dio_PORTC:
		TOGGLE_BIT(PORTC_REG,pin);
    2520:	25 b3       	in	r18, 0x15	; 21
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	02 c0       	rjmp	.+4      	; 0x252c <Dio_ToggleChannel+0x60>
    2528:	88 0f       	add	r24, r24
    252a:	99 1f       	adc	r25, r25
    252c:	6a 95       	dec	r22
    252e:	e2 f7       	brpl	.-8      	; 0x2528 <Dio_ToggleChannel+0x5c>
    2530:	28 27       	eor	r18, r24
    2532:	25 bb       	out	0x15, r18	; 21
    2534:	08 95       	ret

00002536 <__mulsi3>:
    2536:	62 9f       	mul	r22, r18
    2538:	d0 01       	movw	r26, r0
    253a:	73 9f       	mul	r23, r19
    253c:	f0 01       	movw	r30, r0
    253e:	82 9f       	mul	r24, r18
    2540:	e0 0d       	add	r30, r0
    2542:	f1 1d       	adc	r31, r1
    2544:	64 9f       	mul	r22, r20
    2546:	e0 0d       	add	r30, r0
    2548:	f1 1d       	adc	r31, r1
    254a:	92 9f       	mul	r25, r18
    254c:	f0 0d       	add	r31, r0
    254e:	83 9f       	mul	r24, r19
    2550:	f0 0d       	add	r31, r0
    2552:	74 9f       	mul	r23, r20
    2554:	f0 0d       	add	r31, r0
    2556:	65 9f       	mul	r22, r21
    2558:	f0 0d       	add	r31, r0
    255a:	99 27       	eor	r25, r25
    255c:	72 9f       	mul	r23, r18
    255e:	b0 0d       	add	r27, r0
    2560:	e1 1d       	adc	r30, r1
    2562:	f9 1f       	adc	r31, r25
    2564:	63 9f       	mul	r22, r19
    2566:	b0 0d       	add	r27, r0
    2568:	e1 1d       	adc	r30, r1
    256a:	f9 1f       	adc	r31, r25
    256c:	bd 01       	movw	r22, r26
    256e:	cf 01       	movw	r24, r30
    2570:	11 24       	eor	r1, r1
    2572:	08 95       	ret

00002574 <__udivmodqi4>:
    2574:	99 1b       	sub	r25, r25
    2576:	79 e0       	ldi	r23, 0x09	; 9
    2578:	04 c0       	rjmp	.+8      	; 0x2582 <__udivmodqi4_ep>

0000257a <__udivmodqi4_loop>:
    257a:	99 1f       	adc	r25, r25
    257c:	96 17       	cp	r25, r22
    257e:	08 f0       	brcs	.+2      	; 0x2582 <__udivmodqi4_ep>
    2580:	96 1b       	sub	r25, r22

00002582 <__udivmodqi4_ep>:
    2582:	88 1f       	adc	r24, r24
    2584:	7a 95       	dec	r23
    2586:	c9 f7       	brne	.-14     	; 0x257a <__udivmodqi4_loop>
    2588:	80 95       	com	r24
    258a:	08 95       	ret

0000258c <__udivmodhi4>:
    258c:	aa 1b       	sub	r26, r26
    258e:	bb 1b       	sub	r27, r27
    2590:	51 e1       	ldi	r21, 0x11	; 17
    2592:	07 c0       	rjmp	.+14     	; 0x25a2 <__udivmodhi4_ep>

00002594 <__udivmodhi4_loop>:
    2594:	aa 1f       	adc	r26, r26
    2596:	bb 1f       	adc	r27, r27
    2598:	a6 17       	cp	r26, r22
    259a:	b7 07       	cpc	r27, r23
    259c:	10 f0       	brcs	.+4      	; 0x25a2 <__udivmodhi4_ep>
    259e:	a6 1b       	sub	r26, r22
    25a0:	b7 0b       	sbc	r27, r23

000025a2 <__udivmodhi4_ep>:
    25a2:	88 1f       	adc	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	5a 95       	dec	r21
    25a8:	a9 f7       	brne	.-22     	; 0x2594 <__udivmodhi4_loop>
    25aa:	80 95       	com	r24
    25ac:	90 95       	com	r25
    25ae:	bc 01       	movw	r22, r24
    25b0:	cd 01       	movw	r24, r26
    25b2:	08 95       	ret

000025b4 <__udivmodsi4>:
    25b4:	a1 e2       	ldi	r26, 0x21	; 33
    25b6:	1a 2e       	mov	r1, r26
    25b8:	aa 1b       	sub	r26, r26
    25ba:	bb 1b       	sub	r27, r27
    25bc:	fd 01       	movw	r30, r26
    25be:	0d c0       	rjmp	.+26     	; 0x25da <__udivmodsi4_ep>

000025c0 <__udivmodsi4_loop>:
    25c0:	aa 1f       	adc	r26, r26
    25c2:	bb 1f       	adc	r27, r27
    25c4:	ee 1f       	adc	r30, r30
    25c6:	ff 1f       	adc	r31, r31
    25c8:	a2 17       	cp	r26, r18
    25ca:	b3 07       	cpc	r27, r19
    25cc:	e4 07       	cpc	r30, r20
    25ce:	f5 07       	cpc	r31, r21
    25d0:	20 f0       	brcs	.+8      	; 0x25da <__udivmodsi4_ep>
    25d2:	a2 1b       	sub	r26, r18
    25d4:	b3 0b       	sbc	r27, r19
    25d6:	e4 0b       	sbc	r30, r20
    25d8:	f5 0b       	sbc	r31, r21

000025da <__udivmodsi4_ep>:
    25da:	66 1f       	adc	r22, r22
    25dc:	77 1f       	adc	r23, r23
    25de:	88 1f       	adc	r24, r24
    25e0:	99 1f       	adc	r25, r25
    25e2:	1a 94       	dec	r1
    25e4:	69 f7       	brne	.-38     	; 0x25c0 <__udivmodsi4_loop>
    25e6:	60 95       	com	r22
    25e8:	70 95       	com	r23
    25ea:	80 95       	com	r24
    25ec:	90 95       	com	r25
    25ee:	9b 01       	movw	r18, r22
    25f0:	ac 01       	movw	r20, r24
    25f2:	bd 01       	movw	r22, r26
    25f4:	cf 01       	movw	r24, r30
    25f6:	08 95       	ret

000025f8 <__prologue_saves__>:
    25f8:	2f 92       	push	r2
    25fa:	3f 92       	push	r3
    25fc:	4f 92       	push	r4
    25fe:	5f 92       	push	r5
    2600:	6f 92       	push	r6
    2602:	7f 92       	push	r7
    2604:	8f 92       	push	r8
    2606:	9f 92       	push	r9
    2608:	af 92       	push	r10
    260a:	bf 92       	push	r11
    260c:	cf 92       	push	r12
    260e:	df 92       	push	r13
    2610:	ef 92       	push	r14
    2612:	ff 92       	push	r15
    2614:	0f 93       	push	r16
    2616:	1f 93       	push	r17
    2618:	cf 93       	push	r28
    261a:	df 93       	push	r29
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
    2620:	ca 1b       	sub	r28, r26
    2622:	db 0b       	sbc	r29, r27
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	f8 94       	cli
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	cd bf       	out	0x3d, r28	; 61
    262e:	09 94       	ijmp

00002630 <__epilogue_restores__>:
    2630:	2a 88       	ldd	r2, Y+18	; 0x12
    2632:	39 88       	ldd	r3, Y+17	; 0x11
    2634:	48 88       	ldd	r4, Y+16	; 0x10
    2636:	5f 84       	ldd	r5, Y+15	; 0x0f
    2638:	6e 84       	ldd	r6, Y+14	; 0x0e
    263a:	7d 84       	ldd	r7, Y+13	; 0x0d
    263c:	8c 84       	ldd	r8, Y+12	; 0x0c
    263e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2640:	aa 84       	ldd	r10, Y+10	; 0x0a
    2642:	b9 84       	ldd	r11, Y+9	; 0x09
    2644:	c8 84       	ldd	r12, Y+8	; 0x08
    2646:	df 80       	ldd	r13, Y+7	; 0x07
    2648:	ee 80       	ldd	r14, Y+6	; 0x06
    264a:	fd 80       	ldd	r15, Y+5	; 0x05
    264c:	0c 81       	ldd	r16, Y+4	; 0x04
    264e:	1b 81       	ldd	r17, Y+3	; 0x03
    2650:	aa 81       	ldd	r26, Y+2	; 0x02
    2652:	b9 81       	ldd	r27, Y+1	; 0x01
    2654:	ce 0f       	add	r28, r30
    2656:	d1 1d       	adc	r29, r1
    2658:	0f b6       	in	r0, 0x3f	; 63
    265a:	f8 94       	cli
    265c:	de bf       	out	0x3e, r29	; 62
    265e:	0f be       	out	0x3f, r0	; 63
    2660:	cd bf       	out	0x3d, r28	; 61
    2662:	ed 01       	movw	r28, r26
    2664:	08 95       	ret

00002666 <_exit>:
    2666:	f8 94       	cli

00002668 <__stop_program>:
    2668:	ff cf       	rjmp	.-2      	; 0x2668 <__stop_program>
